#+INCLUDE: theme/style.org
#+TITLE: CPP/C++ Compiler Flags and Options 
#+DESCRIPTION: cpp c++ compiler flags command line options 
#+STARTUP: content 

- [[wiki:index][Index]]

* Compiler flags and invocation 
** GCC, GCC/Mingw and Clang++
*** Overview

 *Search Path and Library Linking Flags* 

 * -l[linalg]
   + => Links to shared library or shared object - Specifically, it
     links to linalg.dll on Windows, liblinalg.so (on Unix-like oses like
     Linux, BSD, AIX, ...) or linalg.dylib on MacOSX.

 * -L[/path/to/shared-libraries]
   + => Add search path to shared libraries, directory containing
     *.so, *.dll or *.dlyb files such as libLinearAlgebra.so depending
     on the current operating system.

 * -I[/path/to/header-files]
   * Add search path to header files (.h) or (.hpp).

 * -D[FLAG] or -D[FLAG]=VALUE
   * Pass preprocessor flag #if FLAG ... 


 *GCC and Clang* Most common compiler flags: 

 + std - Specify the C++ version or ISO standard version.
   + -std=c++11 (ISO C++11)
   + -std=c++14 (ISO C++14)
   + -std=c++1z (ISO C++17)
   + -std=c++20 (C++20 experimental)
   + -std=gnu++ (ISO C++ with GNU extensions)

 + Verbosity - [W stands for warning]
   + _-Wall_
     + Turns on lots of compiler warning flags, specifically
       (-Waddress, -Wcomment, -Wformat, -Wbool-compare,
       -Wuninitialized, -Wunknown-pragmas, -Wunused-value,
       -Wunused-value ...)

   + _-Werror_
     + Turn any warning into a _compilation error_. 

   + -Wextra or just -W ([[https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html][see more]])
     + Enables extra flags not enabled by -Wall, such as
       -Wsign-compare (C only), -Wtype-limits, -Wuninitialized ...

   + -pendantic or -Wpendantic
     + Issue all warning required by ISO C and ISO C++ standard, it
       issues warning whenever there are compiler extensions non
       compliant to ISO C or C++ standard.
   + -Wconversion
   + -Wcast-align
   + -Wunnused
   + -Wshadow
   + -Wold-style-cast
   + -Wpointer-arith -Wcast-qual -Wmissing-prototypes -Wno-missing-braces 

 + Output file: -o <outputfile>
   + g++ file.cpp -o file.bin

 + Common library flags
   + -lm - Compiles against the shared library libm (basic math
     library, mostly C only)
   + -lpthread  - Compile against Posix threads shared library

 + Include Path - Directories containing headers files.
   + -I/path/to/include1 -I/path/to/include2 ... 

 + Compilation flags *-D<flag name>*
   + ~-DCOMPILE_VAR~ -> Enable flag COMPILE_VAR - It is equivalent to
     add to the code (#define COMPILE_VAR)
   + ~-DDO_SOMETHING=1~  - Equivalent to add to the code _#define DO_SOMETHING = 1_
   + ~-DDISABLE_DEPRECATED_FUNCTIONS=0~

 + *Optmization* - [[https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html][docs]]
   + -O0
     + No optmization, faster compilation time, better for debugging builds. 
   + -O2 
   + -O3
     + Higher level of optmization. Slower compile-time, better for
       production builds.
   + -OFast
     + Enables higher level of optmization than (-O3). It enables lots
       of flags as can be seen [[https://stackoverflow.com/questions/3005564/gcc-options-for-fastest-code][src]] (-ffloat-store, -ffsast-math,
       -ffinite-math-only, -O3 ...)
   + -finline-functions
   + -m64
   + -funroll-loops
   + -fvectorize
   + -fprofile-generate

 + Misc
   + -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4

 + *Special Options* 

   + _-g_
     + => Builds executable with debugging symbols for GDB GNU
       Debugger or LLDB Clang/LLVM Debugger. It should only be used
       during development for debugging builds.

   + -c
     + => Compiler source(s) to object-code (input to linker). This
       option is better for incremental compilation when using
       multiple files. 

   + _-pie_
     + => Builds a dynamically linked position independent executable.

   + _-static-pie_
     + => Builds a staticlaly linked position independent executable.

   + _-shared_
     + => Build a shared library (.so or .dylib on U*nix-like Oses) or
       .dll on MS-Windows.

   + _-fno-exceptions_ 
     + => Disable C++ exceptions (it may be better for embedded systems
       or anything where exceptiions may not be acceptable).

   + _-fno-rtti_
     + => Disable RTTI (Runtime Type Information) - There many
       texts around where game and embedded systems developers report
       that they disable RTTI due to performance concerns.

   + _-fvisibility=hidden_
     + => Make library symbols hidden by default, in a similar way to
       what happens in Windows DLLs where exported symbols must have
       the prefix __declspec(dllexport) or __declspec(dllimport). When
       all symbols are exported by default, it may increase the
       likelyhood of undefined behavior if there a multiple
       definitions of same symbol during linking. See more at:
     + [[https://labjack.com/news/simple-cpp-symbol-visibility-demo][Simple C++ Symbol Visibility Demo | LabJack]]
     + 

   + https://wiki.debian.org/Hardening
     + => Lots of compiler flags for hardening security.


 *Files Generated by the Compiler* 
 + Object Files
   + *.o -> Generated on *NIX - Linux, MacOSX ... by GCC or Clang
   + *.obj -> Windows
 + Binary Native Executable - Object Code
   + *NIX: Linux, MacOSX, FreeBSD -> Without extension.
   + Windows: *.exe
   + *.hex -> Extension of many compiled firmwares generated by
     embedded systems compilers such as proprietary compilers for
     Microcontrollers.  
 + Shared Objects - Shared Libraries
   + *.dll -> Called dynamic linked libraries on Windows -> libplot.dll
   + *.so  -> Called shared Object on Linux -> libplot.so
   + *.dylib -> Extension used on MacOSX.
 + Static Library
   + *.a - extension 

Review See: 

 + [[https://gist.github.com/gubatron/32f82053596c24b6bec6][Things to remember when compiling and linking C/C++ programs Â· GitHub]]

 + [[https://msdn.microsoft.com/en-us/library/y0zzbyt4.aspx][Linker Options]]

C++ Compiler Online: 

 + http://rextester.com/FCCXK65881

*** Compiler invocation examples
*** Example - Build executable with unified compilation

Compile file1.cpp, file.cpp, file2.cpp into the executable app.bin 

 - Option 1: Compile and link once in a single command. The
   disadvantage of this way is the slower compile time rather than
   separate compilation and linking. 

#+BEGIN_SRC sh 
  # CC=gcc 
  CC=clang++

  $ clang++ file1.cpp file2.cpp file3.cpp \
    -std=c++14  -o app.bin -O3 -g \
    -Wall -Wextra -pendantic \
    -lpthread -lblas -lboost_system -lboost_filesystem \
    -I./include/path1/with/headers1 -I./include2 -L./path/lib1 -L./pathLib2
#+END_SRC
 
Explanation: 

 + -std=c++14 -> Set the C++ version. This flag can be C++11, C++14,
   C++17, C++20 ... 
 + -o app.bin -> Set the output native executable file ot app.bin
 + -I./include/path1/with/headers
   + Directory with header files
 + -g Produce executable with debug symbols
 + -Wall -Wextra -Wshadow 
   + Warning flags - enable more verbosity which helps to catch bugs
     earlier.
 + -O3 - Use optmization of level 3 - the disadvantage of using
   optmization is the slower compile time. So this flag should only be
   enabled on production builds.
 + -lpthread -lblas ~-lboost_system~ ~-lboost_filesystem~
   + Link against shared libraries (extensions: *.so - Unix, *.dylib
     or *.dll on Windows) pthread, blas, ~boost_system~ ...

*** Compile source with static Linking

#+BEGIN_SRC sh 
 $ gcc -static example.o -lgsl -lgslcblas -lm
#+END_SRC
*** Release / Debug building 

Compiler: 

 + GCC and CLANG
   + Debug: No optmized, but faster building time.
     * -OO -g  
   + Release:
     * -O3 -s -DNDEBUG [-march=native] [-mtune=native]
     * -O2 -s -DNDEBGU
 + MSVC:
   + Debug:
     * /MDd /Zi /Ob0 /Od /RTC1
   + Release:
     * /MD /O1 /Ob1 /DNDEBUG
Note: 
 - For GCC and Clang
   + -OO means no optmization
   + -g - adds debugging symbols to executable.
   + -DNDEBUG - disable assertions


References: 

 + [[https://stackoverflow.com/questions/1534912/how-to-build-in-release-mode-with-optimizations-in-gcc][c++ - How to build in release mode with optimizations in GCC? - Stack Overflow]]

 + 

** MSVC (VC++ or Visual C++) Compiler Options 

 MSVC Native tools: 

  * CC = cl.exe
    + C and C++ Compiler - Can compile both C and C++ code depending on
      the flag. By default it compiles C++ code.
  * rc.exe => Resource Compiler.
  * LD = link.exe 
    + C++ Linker.
  * AS = ml
    + Assembler 
  * AR = lib
    + Archiver 

 Compiler: cl.exe 

  + /nologo - Suppress microsoft's logo

  + /out:<file.exe> - Set output file name.

  + /EHsc

  + /Zi - Add debugging symbols to the executable

  + /c - Doesn't link generating *.exe or *.dll, it creates only
    intermedidate object code for further separate linking. It is
    useful for compiling large code bases where each compilation unit
    can be compiled separately.

  + /W4 - Set the level of warning to the highest.

  + /entry:<entrypoint> - Set the C/C++ runtime, it can be:
    + mainCRTStartup     => calls main(), the entrypoint for console mode apps
    + wmainCRTStartup    => calls wmain(), as above but the Unicode version
    + WinMainCRTStartup  => calls WinMain(), the entrypoint for native Windows apps
    + wWinMainCRTStartup => calls wWinMain(), as above but the Unicode version
    + _DllMainCRTStartup => Calls DLLMain() 

  + /subsystem:<type> - Set the subsystem - default Console, it can be:

    + _/subsystem:console_ - For applications that necessarly runs in the
      console (aka terminal emulator)

    + _/subsystem:windows_ - Doesn't display the cmd.exe terminal when
      ones click at the application executable.

  + /TC  -> Specify that file name is C source code
  + /TP  -> Specify that file name is a C++ source code (default)
  + /MD, /MT, /LD => Run-time library - Indcates that object-code
    (compiled program) is a DLL.
  + /GF -> (Eliminate Duplicate Strings) - Enables the compiler to
    create a single copy of identical strings in the program image and
    in memory during execution. This is an optimization called string
    pooling that can create smaller programs.

 *CRT C Runtime Options*

| File:       | Linking type  | Build Type | Compiler Flag |
|-------------+---------------+------------+---------------|
| libcmt.lib  | Static        | Debug      | /MT           |
| libcmtd.lib | Static        | Release    | /MTd          |
| msvcrt.lib  | Dynamic (DLL) | Release    | /MD           |
| msvcrtd.lib | Dynamic (DLL) | Debug      | /MDd          |
|-------------+---------------+------------+---------------|

 + Static Linking: The library is appended to the executable, only a
   single file, the executable needs to be deployed.

 + Dynamic Linking: The library is DLL shared library and not appended
   to the executable. The executable needs to be deployed with the
   library. 

 See: 
  + https://github.com/MicrosoftDocs/cpp-docs/blob/master/docs/build/building-on-the-command-line.md

 Useful preprocessor: 

  - Set subsystem 

 #+BEGIN_SRC cpp 
   #pragma comment(linker, "/SUBSYSTEM:WINDOWS")
   #pragma comment(linker, "/SUBSYSTEM:CONSOLE")
 #+END_SRC

  - Set linker library to be linked. This pragma is particularly useful
    in graphical applications.

 #+BEGIN_SRC cpp 
   #pragma comment(lib, "user32.lib")
 #+END_SRC

 Examples: 

  + Compile multiple files generating an executable named out.exe. Note
    the default subsystems is the console (_/subsystem:console_) and the
    default entry point is (mainCRTStartup).
    + /Isrc/includes  => Directories containing header files
    + /ld or /linker  => Linker flags
    + && out.exe      => If the compilation is successful runs the
      generated executable out.exe 

 #+BEGIN_SRC sh 
   $ cl.exe source1.cpp source2.cpp /Fe:out.exe /Isrc/includes /ld gdi.lib user32.lib && out.exe
 #+END_SRC

  - Compile multiple files for windows subsystem (GUI app) and with
    wmainCRtstartup.

 #+BEGIN_SRC sh 
   $ cl.exe source1.cpp source2.cpp /Fe:out.exe /Isrc/includes /entry:wmainCRtstartup /subsystem:windows /ld user32.lib && out.exe
 #+END_SRC

 References: 

  + [[http://psy.swansea.ac.uk/staff/carter/Compiling/compilation_build.htm][Command Line Compilation]]
  + [[https://cognitivewaves.wordpress.com/makefiles/][Makefiles and Visual Studio | Cognitive Waves]]
  + [[http://resources.esri.com/help/9.3/arcgisengine/com_cpp/Cpp/reference/Makefile.Windows.htm][C++ Windows Makefile]]
  + [[https://w3.cs.jmu.edu/bernstdh/web/common/help/msc_development.php][MS C/C++: The Command-Line Tools]]

 See also: 
 
  + [[https://support.microsoft.com/en-us/help/94248/how-to-use-the-c-run-time][How To Use the C Run-Time]]

  + 

  + 
