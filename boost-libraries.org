#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - Boost Libraries 
#+DESCRIPTION: cpp/c++ c++ design patterns gneric programming object oriented metaprogramming
#+STARTUP: content 

- [[wiki:index][Index]]

* Boost Libraries 
** Boost Format 

The boost library format provides a type-safe printf-like notation
which is concise as the old C-printf functions (printf, sprintf,
fprintf) and less intrusive and verbose than the C++ (<<) insertion
operator. 

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/libs/format/doc/format.html][Boost format]]

Using the library: 

#+BEGIN_SRC cpp 
  #include <boost/format.hpp>
#+END_SRC

Example 1: Test in CERN's ROOT REPL.

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <cmath>
  #include <boost/format.hpp>
  double x = 10.0;

  >> boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x)
  (boost::basic_format &) @0x7ffcfe86fbd8

  >> auto fmt = boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x)(boost::basic_format<char, std::char_traits<char>, std::allocator<char> > &) @0x7f8c7b52b020
  >> fmt
  (boost::basic_format<char, std::char_traits<char>, std::allocator<char> > &) @0x7f8c7b52b020
  >>  

  >> std::cout << fmt << "\n";
   x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193

  >> std::cout << boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x) << "\n";
   x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193
  >> 
#+END_SRC

Example 2: Multiline code. 

#+BEGIN_SRC cpp 
  // Pasting the following code block in the REPL between curly
  // brackets, including them.
  {
   std::cout << boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") 
                % x % std::sqrt(x) % std::log2(x) << "\n";
  } 
  // Output:
  x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193
#+END_SRC

Example 3.A: Turn format object into std::string.

#+BEGIN_SRC cpp 
  >> double z = M_PI_2;
  >> z
  (double) 1.5707963

  >> auto fm = boost::format("operation = %1% - z = %2% %1%(%2%) = %3%") % "sin" % z % std::sin(z) ;
  >> std::cout << "fm = " << fm << "\n";
  fm = operation = sin - z = 1.5708 sin(1.5708) = 1

  >> std::string result = fm.str();
  >> result
  (std::string &) "operation = sin - z = 1.5708 sin(1.5708) = 1"
#+END_SRC

Example 3.B: 

#+BEGIN_SRC cpp 
 >> std::string result2 = boost::str(boost::format("operation = %1% - z = %2% %1%(%2%) = %3%") % "sin" % z % std::sin(z))

 >> result2
 (std::string &) "operation = sin - z = 1.5708 sin(1.5708) = 1"
#+END_SRC





