#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - Boost Libraries 
#+DESCRIPTION: cpp/c++ c++ design patterns gneric programming object oriented metaprogramming
#+STARTUP: content 

- [[wiki:index][Index]]

* Boost Libraries 
** Boost Libraries already in C++ ISO standard 

Some Boost libraries are redundant as they are already in the C++ ISO
standard. However, it is worth using them if a compiler to new
C++ standards is not available. 

#+CAPTION: Boost libraries aready in C++ ISO Standard 
|-------------------+----------------------------------------------------+-------------------------------------|
| Boost Library     | C++ Standard                                       | Description                         |
|                   | equivalent                                         |                                     |
|-------------------+----------------------------------------------------+-------------------------------------|
| *Added since C++11* |                                                    |                                     |
|-------------------+----------------------------------------------------+-------------------------------------|
| Boost.Chrono      | std::chrono                                        | Time interval                       |
| Boost.Array       | std::array                                         |                                     |
| Boost.Foreach     | C++11 ranged for                                   |                                     |
| [[https://www.boost.org/doc/libs/1_65_1/doc/html/function.html][Boost.Function]]    | std::function                                      | Function type erasure and callbacks |
| Boost.Heap        | std::priority_queue                                |                                     |
| Boost.Intrusive   | STL move constructor  and move assignment operator |                                     |
| [[https://www.boost.org/doc/libs/1_62_0/doc/html/ratio.html][Boost.Ratio]]       | std::ratio                                         |                                     |
| [[https://www.boost.org/doc/libs/1_63_0/doc/html/move.html][Boost.Move]]        | std::move                                          |                                     |
| Boost.SaticAssert | std::static_assert                                 |                                     |
|                   |                                                    |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/libs/core/doc/html/core/ref.html][Boost.Ref]]         | Reference warapers in <functional> header          |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_random.html][Boost.Random]]      | Header <random>                                    |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/libs/regex/doc/html/index.html][Boost.Regex]]       | Library: [[https://en.cppreference.com/w/cpp/regex][<regex>]]  (std::regex)                     | Regular expressions library         |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/thread.html][Boost.Thread]]      | Library: [[https://en.cppreference.com/w/cpp/thread][<thread>]] (std::thread)                    |                                     |
|                   |                                                    |                                     |
|-------------------+----------------------------------------------------+-------------------------------------|
| *Added since C++17* |                                                    |                                     |
|-------------------+----------------------------------------------------+-------------------------------------|
| [[https://www.boost.org/doc/libs/1_69_0/libs/optional/doc/html/index.html][Boost.Optional]]    | std::optional                                      |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/any.html][Boost.Any]]         | std::any                                           |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/variant.html][Boost.Variant]]     | std::variant                                       |                                     |
| [[https://www.boost.org/doc/libs/1_69_0/libs/filesystem/doc/index.htm][Boost.Filesystem]]  | Library: [[https://en.cppreference.com/w/cpp/filesystem][filesystem]]                                |                                     |
|                   |                                                    |                                     |
|-------------------+----------------------------------------------------+-------------------------------------|

Boost Containers already in STL and C++ standards: 

#+CAPTION: Boost containers and functions aready incorpored into STL and C++ ISO Standard.
|-------------------------+------------------------+---------------+----------------------------------------------------------|
| Boost container or type | STL equivalent type    | STL Header    | Description                                              |
|-------------------------+------------------------+---------------+----------------------------------------------------------|
| *Since C++11*             |                        |               |                                                          |
|-------------------------+------------------------+---------------+----------------------------------------------------------|
| boost lambda            | C++11 lambdas          | -             | Lambda "function" constructor.                           |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/function.html][boost::function]]         | std::function          | <functional>  | Container for function or method-call type erasure.      |
| [[https://www.boost.org/doc/libs/1_69_0/libs/bind/doc/html/bind.html][boost::bind]]             | std::bind              | <functional>  | Function wrappers.                                       |
| boost::ref, boost::cref | std::cref and std::ref | <functional>> | Reference wrappers in header <functional>                |
| boost::unique_ptr       | std::unique_ptr        | <memory>      |                                                          |
| [[https://www.boost.org/doc/libs/1_69_0/libs/smart_ptr/doc/html/smart_ptr.html#shared_ptr][boost::shared_ptr]]       | std::shared_ptr        | <memory>      |                                                          |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/array.html][boost::array]]            | std::array             |               | Non-heap allocated fixed-size array, similar to C-array. |
|-------------------------+------------------------+---------------+----------------------------------------------------------|
| *Since C++17*             |                        |               |                                                          |
|-------------------------+------------------------+---------------+----------------------------------------------------------|
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/any.html][boost::any]]              | std::any               | <any>         | Type erasure container for storing any copiable type.    |
| [[https://www.boost.org/doc/libs/1_69_0/libs/optional/doc/html/index.html][boost::optional]]         | std::optional          | <optional>    | Container which may or may not have any value.           |
| [[https://www.boost.org/doc/libs/1_69_0/doc/html/variant.html][boost::variant]]          | std::variant           | <variant>     | Discriminated union, a better C-Union                    |
|                         |                        |               |                                                          |
|-------------------------+------------------------+---------------+----------------------------------------------------------|


Note: 
 + Reference wrappers in <functional> header:
   + [[https://en.cppreference.com/w/cpp/utility/functional/reference_wrapper][std::reference_wrapper]]
   + [[https://en.cppreference.com/w/cpp/utility/functional/ref][std::ref, std::cref]]

 +  [[https://www.boost.org/doc/libs/1_69_0/libs/bind/doc/html/bind.html][boost::bind]] and std::bind => Function for building lambda
   functions out of functions with partial arguments, member function
   pointers and pointer to member variables.

See:
 + [[https://stackoverflow.com/questions/7241993/is-it-smart-to-replace-boostthread-and-boostmutex-with-c11-equivalents][c++ - Is it smart to replace boost::thread and boost::mutex with c++11 equivalents? - Stack Overflow]]
** Boost Format 

The boost library format provides a type-safe printf-like notation
which is concise as the old C-printf functions (printf, sprintf,
fprintf) and less intrusive and verbose than the C++ (<<) insertion
operator. 

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/libs/format/doc/format.html][Boost format]]
 + Header: <boost/format.hpp>
 + Functions:
   + boost::str
   + boost::format

Using the library: 
 + As the library is a header-only library as almost all boost
   libraries. All what is needed to use it is just include the
   following header.

#+BEGIN_SRC cpp 
  #include <boost/format.hpp>
#+END_SRC

Example 1: Test in CERN's ROOT REPL.

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <cmath>
  #include <boost/format.hpp>
  double x = 10.0;

  >> boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x)
  (boost::basic_format &) @0x7ffcfe86fbd8

  >> auto fmt = boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x);
  >> fmt
  (boost::basic_format<char, std::char_traits<char>, std::allocator<char> > &) @0x7f8c7b52b020
  >>  

  >> std::cout << fmt << "\n";
   x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193

  >> std::cout << boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") % x % std::sqrt(x) % std::log2(x) << "\n";
   x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193
  >> 
#+END_SRC

Example 2: Multiline code. 

#+BEGIN_SRC cpp 
  // Pasting the following code block in the REPL between curly
  // brackets, including them.
  {
   std::cout << boost::format(" x = %1% ; sqrt(x) = %2% ; log2(x) = %3%") 
                % x % std::sqrt(x) % std::log2(x) << "\n";
  } 
  // Output:
  x = 10 ; sqrt(x) = 3.16228 ; log2(x) = 3.32193
#+END_SRC

Example 3.A: Turn format object into std::string.

#+BEGIN_SRC cpp 
  >> double z = M_PI_2;
  >> z
  (double) 1.5707963

  >> auto fm = boost::format("operation = %1% - z = %2% %1%(%2%) = %3%") % "sin" % z % std::sin(z) ;
  >> std::cout << "fm = " << fm << "\n";
  fm = operation = sin - z = 1.5708 sin(1.5708) = 1

  >> std::string result = fm.str();
  >> result
  (std::string &) "operation = sin - z = 1.5708 sin(1.5708) = 1"
#+END_SRC

Example 3.B: 

#+BEGIN_SRC cpp 
 >> std::string result2 = boost::str(boost::format("operation = %1% - z = %2% %1%(%2%) = %3%") % "sin" % z % std::sin(z))

 >> result2
 (std::string &) "operation = sin - z = 1.5708 sin(1.5708) = 1"
#+END_SRC
** Boost Lexical_cast 

Boost lexical cast is header-only library for converting from
built-int types to string and from string to built-in types. 

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_lexical_cast.html#boost_lexical_cast.motivation][Boost Lexical Cast]] 
 + Header: <boost/format.hpp>
 + Functions:
   + boost::lexical_cast 

Example: 

 + *Headers and namespace:*

#+BEGIN_SRC cpp 
  #include <boost/lexical_cast.hpp>

  // Namespace alias 
  namespace b = boost;
#+END_SRC

 *Basic conversions:*

#+BEGIN_SRC cpp 
  >> b::lexical_cast<int>("456")
  (int) 456

  >> b::lexical_cast<double>(".4615e3")
  (double) 461.50000

  >> b::lexical_cast<double>("inf")
  (double) inf

  >> b::lexical_cast<long double>("34e5")
  (long double) 3400000.0L
  >> 

  >> b::lexical_cast<double>("inf error")
  Error in <TRint::HandleTermInput()>: 
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast> > 
   caught: bad lexical cast: source type value could not be interpreted as target

  >> b::lexical_cast<double>(" asdsas ")
  Error in <TRint::HandleTermInput()>: 
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast> > 
  caught: bad lexical cast: source type value could not be interpreted as target
    >> 

  >> b::lexical_cast<long double>(" 100 ")
  Error in <TRint::HandleTermInput()>: 
   boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast> > 
   caught: bad lexical cast: source type value could not be interpreted as target
  >> 
#+END_SRC

 *Catch exceptions:*

#+BEGIN_SRC cpp 
  #include <cmath> 

  void PrintSquareRoot(const char* number_str){
       try {
          double x = boost::lexical_cast<double>(number_str);
          std::cout << "x = " << x
                    << " ; sqrt(x) = " << std::sqrt(x)
                    << "\n";
       } catch(boost::bad_lexical_cast const& ex)
       {
          std::cerr << " [ERROR] " << ex.what() << "\n";
       }
  }
#+END_SRC

Testing: 

#+BEGIN_SRC cpp 
  >> PrintSquareRoot("34.34")
  x = 34.34 ; sqrt(x) = 5.86003

  >> PrintSquareRoot("-125.0")
  x = -125 ; sqrt(x) = -nan

  >> PrintSquareRoot("-12dsad 5.0")
   [ERROR] bad lexical cast: source type value could not be interpreted as target

  >> PrintSquareRoot(" ")

  >> PrintSquareRoot(" 100 ")
   [ERROR] bad lexical cast: source type value could not be interpreted as target
  >> 
#+END_SRC

 *Function try_lexical_convert* 

Convert from string to built-in type without exceptions. 

Pseudo-signature: 
 + Returns true if succeed to convert source type to target type and
   then sets the result variable. Otherwise, the function returns
   false. 

#+BEGIN_SRC cpp 
  namespace boost::conversion 
  {
    template<typename Target, typename Source>
    bool try_lexical_convert(Source const& arg, Targe& result);
  }
#+END_SRC

Testing: 

#+BEGIN_SRC cpp 
  >> double z = 0.0
  (double) 0.0000000

  >> boost::conversion::try_lexical_convert("200.34", z)
  (bool) true
  >> z
  (double) 200.34000

  >> boost::conversion::try_lexical_convert("200 error .34", z)
  (bool) false
  >> z
  (double) 200.00000

  >> boost::conversion::try_lexical_convert("not-a-number", z)
  (bool) false
  >> z
  (double) 0.0000000
#+END_SRC
** Boost string algo 

Provides lots of useful string utility functions that are missing in
the standard library. 

 + Documentation:
   + [[https://www.boost.org/doc/libs/1_69_0/doc/html/string_algo/usage.html][Boost String Main Documentation]]
   + [[https://www.boost.org/doc/libs/1_69_0/doc/html/string_algo/quickref.html][Quick Referece card.]]
 + Header: <boost/algorithm/string.hpp>
 + Functions:
   + boost::to_upper
   + boost::to_lower
   + boost::trim
   + boost::iends_with
   + boost::istarts_with
   + boost::replace
   + boost::replace_first 

 *Example:*

Headers: 

#+BEGIN_SRC cpp 
   #include <iostream>
   #include <string> 
   #include <vector>
#+END_SRC

Boost header and namespace alias: 

#+BEGIN_SRC cpp  
   #include <boost/algorithm/string.hpp>

   // b => Namespace alias to boost namespace. 
   namespace b = boost;
#+END_SRC

Convert string to upper/lower case.

#+BEGIN_SRC cpp 
  >> std::string s = " C++ is an old new programmign LANGUAGE";
  >> 

  // To upper case 
  >> b::to_upper(s)
  >> s
  (std::string &) " C++ IS AN OLD NEW PROGRAMMIGN LANGUAGE"
  >> 

  // To lower case:
  >> b::to_lower(s)
  >> s
  (std::string &) " c++ is an old new programmign language"
#+END_SRC

Trim string on both sides: 

#+BEGIN_SRC cpp 
  >> std::string ss = "   A string with  spaces   ";
  >> b::trim(ss)
  >> ss
  (std::string &) "A string with  spaces"
#+END_SRC

Check whether starts with some prefix: 

#+BEGIN_SRC cpp 
  // Checks whether first string argument starts with 'industry
  >> b::istarts_with("revenues outlook.pdf", "industry")
  (bool) false

  >> b::istarts_with("industry revenues outlook.pdf", "industry")
  (bool) true

  >> b::istarts_with("   industry revenues outlook.pdf", "industry")
  (bool) false
#+END_SRC

Check whether string ends with some suffix:

#+BEGIN_SRC cpp 
  // Checks whether first strigns ends with suffix '.pdf'
  >>  b::iends_with("revenues-outlook.xls", ".pdf")
  (bool) false

  >>  b::iends_with("revenues-outlook.pdf", ".pdf")
  (bool) true
#+END_SRC

Replace all strings: 

#+BEGIN_SRC cpp 
  >> std::string words = "ASM c++ low c++ ASM  python bytes ASM c++";

  // Replace 'c++' by 'CEE-PLUS-PLUS'
  >> b::replace_all(words, "c++", "CEE-PLUS-PLUS")

  >> words
  (std::string &) "ASM CEE-PLUS-PLUS low CEE-PLUS-PLUS ASM  python bytes ASM CEE-PLUS-PLUS"
  >> 

  >> b::replace_all(words, "CEE-PLUS-PLUS", "cpp")
  >> words
  (std::string &) "ASM cpp low cpp ASM  python bytes ASM cpp"
#+END_SRC


Split string: 

#+BEGIN_SRC cpp 
  std::string dataset = " -100.23 ; 577.15 ; 99.34 ; 1003.5";
  std::vector<std::string> split_vector{};

  >> split_vector
  (std::vector<std::string> &) {}

  // Split string dataset at delimiter ";"
  >> b::split(split_vector, dataset, b::is_any_of(";"));

  // Result 
  >> split_vector
  (std::vector<std::string> &) { " -100.23 ", " 577.15 ", " 99.34 ", " 1003.5" }
#+END_SRC
** Boost Lambda 

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/doc/html/lambda.html#introduction][Boost.Lambda]]

Notes: 

boost::bind from Boost.Lambda is already in C++ standard since C++11
and the placeholders, _1, _2 are in the namespace
std::placeholders. 

STL lambda placeholders does not support arithmetic expressions like
boost lambda placeholders. For instance, the following code generates
a lambda expression shown after it.
 
#+CAPTION: Boost lambda placeholder 
#+BEGIN_SRC cpp 
  3.0 * boost::lambda::_1 + 10.0
#+END_SRC

Equivalent lambda expression (lambda object):

#+CAPTION: Equivalent C++11 lambda function. 
#+BEGIN_SRC cpp 
  [](double x){ return 3.0 * x + 10.0}
#+END_SRC

 *Examples:*
 
Headers: 

#+BEGIN_SRC cpp 
   #include <boost/lambda/lambda.hpp>
   #include <boost/lambda/loops.hpp>

   #include <iostream>
   #include <string>
   #include <algorithm>
#+END_SRC

Namespace alias: 

#+BEGIN_SRC cpp 
  namespace bl = boost::lambda;
#+END_SRC

Creating a function of one argument:

#+BEGIN_SRC cpp 
  >> auto funOf1Arg = 10.0 * bl::_1 - 20.0;

  >> funOf1Arg(20)
  (double) 180.00000

  >> funOf1Arg(6.7)
  (double) 47.000000
  > 
#+END_SRC

Creating a function of two arguments: 

#+BEGIN_SRC cpp 
  >> auto funOf2ArgsA = 10.0 * bl::_1 + 6 * bl::_2 - 20;

  >> funOf2ArgsA(3, 4)
  (double) 34.000000

  >> funOf2ArgsA(5, 1)
  (double) 36.000000

 
  >> auto funOf2 = std::cout << " x = " << bl::_1 << " ; y = " << bl::_2 << "\n";

  >> funOf2(100, "hello");
   x = 100 ; y = hello

  >> funOf2('z', "hello");
  z ; y = hello
#+END_SRC

Lambda placeholder and STL "algorithms":

 + Algorithm std::for_each 

#+BEGIN_SRC cpp 
   auto xs = std::vector<int>{100, 200, 50, -70, 80, 45};

   >> std::for_each(xs.begin(), xs.end(), std::cout << bl::_1 << "\n");
   100
   200
   50
   -70
   80
   45
   >> 

   // Increase at 25%
   >> std::for_each(xs.begin(), xs.end(), std::cout << 1.25 * bl::_1 << "\n");
   125
   250
   62.5
   -87.5
   100
   56.25
   >> 

   >> xs
   (std::vector<int> &) { 100, 200, 50, -70, 80, 45 }
   >> 

   >> std::for_each(xs.begin(), xs.end(), std::cout << 1.25 * bl::_1 + 10.0 << "\n");
   135
   260
   72.5
   -77.5
   110
   66.25
   >> 
 #+END_SRC

 + Algorithm std::transform 

#+BEGIN_SRC cpp 
  >> std::vector<double> out(xs.size());

  >> out
  (std::vector<double> &) { 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000 }

  >> std::transform(xs.begin(), xs.end(), out.begin(), bl::_1 * 3.0 + 100);
  >> out
  (std::vector<double> &) { 400.00000, 700.00000, 250.00000, -110.00000, 340.00000, 235.00000 }

  // Divide every element of xs by 100.0 and insert it at vector out. 
  >> std::transform(xs.begin(), xs.end(), out.begin(), bl::_1 / 100.0);
  >> out
  (std::vector<double> &) { 1.0000000, 2.0000000, 0.50000000, -0.70000000, 0.80000000, 0.45000000 }
#+END_SRC

 *Lambda expressions for control structures*

#+BEGIN_SRC cpp 
  >> std::vector<int> yds{200, 40, 5, 9, 20, 40, 90, 35};

  >> std::for_each(yds.begin(), yds.end(), bl::if_then( bl::_1 > 25, std::cout << bl::_1 << "\n"));
  200
  40
  40
  90
  35

  {
  std::for_each(yds.begin(), yds.end(), 
                bl::if_then( bl::_1 > 25, std::cout << 4.5 * bl::_1 - 20.0 << "\n")
               );

  }
  // Output: 
  880
  160
  160
  385
  137.5
#+END_SRC

** Boost Operators 
*** Overview 

There are about 50 operators in C++ that can be overloaded which makes
implementing them repetitive and cumbersome. Boost operators is a
header-only library simplifies operator overloading by implementing
redundant operators in terms of each other. For instance, from the
operator less-than or (<), boost operators can automatically generate
the operators (<=), (>) and (>=). The library uses the CRT (Curious
Recurring Template Design Pattern) for generating the operators at
compile-time.

Documentation: 
 + [[https://www.boost.org/doc/libs/1_69_0/libs/utility/operators.htm][Boost.Operators]]

Headers: 
 + <boost/operators.hpp>
*** Example 

 + File: [[file:src/boost/boost-operators.cpp][file:src/boost/boost-operators.cpp]]
 + Gist: [[https://gist.github.com/caiorss/3682847393fd42b4001c9c71a74e2c37][boost-operators.cpp]]
 + Online Compiler: https://rextester.com/UZGM54875

Compilation: 

#+BEGIN_SRC sh 
  # Compile 
  $ clang++ boost-operator.cpp -o boost-operator.bin -std=c++1z -g -O0 -Wall
  # Run 
  $ ./boost-operator.bin
#+END_SRC

 *Parts*

Headers: 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <cmath>
  #include <cassert>
  #include <boost/operators.hpp>
#+END_SRC

Class Vec3D: 

#+CAPTION: Class Vec3D - three dimensional vector of 3 coordinates X, Y, Z
#+BEGIN_SRC cpp 
  class Vec3D: public boost::less_than_comparable<Vec3D>
             , public boost::addable<Vec3D, double>
  {
  private:
      double m_x, m_y, m_z;
  public:
      Vec3D(double x, double y, double z);
      double norm() const;

      // Stream insertion operator => Make class printable 
      friend std::ostream& operator<<(std::ostream& os, Vec3D const& vec);	

      // Required by: boost::less_than_comparable<Vec3D>
      // From this operator, boost implements the operators (<=), (>), (>=)
      friend bool operator<(Vec3D const& lhs, Vec3D const& rhs);

      // Required by: boost::addable<Vec3D, double>
      // Boost implements: operator+(Vec3D, double) and operator+(double, Vec3D)
      friend Vec3D& operator+=(Vec3D& lhs, double rhs);	
  };
#+END_SRC

The templated class *boost::less_than_comparable<T>* requires that the
client code implements the operator function less-than (<) or: 

#+CAPTION: Operator less-than (<) required by boost::less_than_comparable
#+BEGIN_SRC cpp 
  friend bool operator<(Vec3D const& lhs, Vec3D const& rhs);
  
  // Implementation: 
  bool
  operator<(Vec3D const& lhs, Vec3D const& rhs)
  {
     return lhs.norm() < rhs.norm();
  }
#+END_SRC

From the operator less-than (<), the templated class implements the
following operator functions: 

#+CAPTION: Operators generated by boost::less_than_comparable
#+BEGIN_SRC cpp 
  friend bool operator<=(Vec3D const& lhs, Vec3D const& rhs);
  friend bool operator>(Vec3D const& lhs, Vec3D const& rhs);
  friend bool operator>=(Vec3D const& lhs, Vec3D const& rhs);
#+END_SRC

The templated class *boost::addable<Vec3D, double>* requires the client
code supplying the operator (+=):

#+CAPTION: Operator function required by boost::addable<Vec3D, double>
#+BEGIN_SRC cpp 
  friend Vec3D& operator+=(Vec3D& lhs, double rhs);	

  // Implementation or definition:
  Vec3D&
  operator+=(Vec3D& lhs, double rhs)
  {
      double  d = rhs;
      lhs = {lhs.m_x + d, lhs.m_y + d, lhs.m_z + d};
      return lhs;
  }
#+END_SRC

From the operator (+=), the class boost::addable generates the
operators: 

#+CAPTION: Operator functions generated by boost::addable<Vec3D, double>
#+BEGIN_SRC cpp 
  friend Vec3D operator+(Vec3D const& lhs, double rhs);	
  friend Vec3D operator+(double rhs, Vec3D const& lhs);	
#+END_SRC

Function: disp used for displaying variables

#+BEGIN_SRC cpp 
  template<typename variable_t>
  void disp(const char* variableName, variable_t const& value)
  {
     std::cout << " =>> " << variableName << " = " << value << "\n";
  }
#+END_SRC

 *Function Main*

Variables:

#+BEGIN_SRC cpp 
  Vec3D v1 = {3, 5, 6};
  Vec3D v2 = {12, 5, 9};
  std::cout << std::boolalpha;
  disp("v1", v1); disp("v2", v2);
  disp("v1.norm()", v1.norm());
  disp("v2.norm()", v2.norm());
#+END_SRC

Program Output: 

#+BEGIN_SRC text 
 =>> v1 = Vec3D{  x = 3 ; y = 5 ; z = 6 } 
 =>> v2 = Vec3D{  x = 12 ; y = 5 ; z = 9 } 
 =>> v1.norm() = 8.3666
 =>> v2.norm() = 15.8114
#+END_SRC

Experiment 1: 

#+BEGIN_SRC cpp 
  std::cout << "\n EXPERIMENT 1 boost::less_than_comparable<Vec3D>" << "\n";
  std::cout << "--------------------------------------------------" << "\n";

  std::cout << "[a] v1 <  v2 = " << (v1 < v2) << "\n";
  std::cout << "[b] v1 <  v2 = " << operator<(v1, v2) << "\n\n";   

  std::cout << "[a] v1 <= v2 = " << (v1 <= v2) << "\n";
  std::cout << "[b] v1 <= v2 = " << operator<=(v1, v2) << "\n\n";

  std::cout << "[a] v1 >  v2 = " << (v1 > v2) << "\n";
  std::cout << "[b] v1 >  v2 = " << operator>(v1, v2) << "\n\n";

  std::cout << "[a] v1 >=  v2 = " << (v1 >= v2) << "\n";
  std::cout << "[b] v1 >=  v2 = " << operator>=(v1, v2) << "\n\n";
#+END_SRC

Program Output: 

#+BEGIN_SRC text 
   EXPERIMENT 1 boost::less_than_comparable<Vec3D>
  --------------------------------------------------
  [a] v1 <  v2 = true
  [b] v1 <  v2 = true

  [a] v1 <= v2 = true
  [b] v1 <= v2 = true

  [a] v1 >  v2 = false
  [b] v1 >  v2 = false

  [a] v1 >=  v2 = false
  [b] v1 >=  v2 = false
#+END_SRC

Experiment 2: 

#+BEGIN_SRC cpp 
  std::cout << "\n EXPERIMENT 2 boost::less_than_comparable<Vec3D>" << "\n";
  std::cout << "--------------------------------------------------" << "\n";
  disp("v1 + 5.0", v1 + 5.0);
  disp("operator+(v1, 5.0)", operator+(v1, 5.0));
  disp("5.0 + v1", 5.0 + v1);
  disp("operator+(5.0, v1", operator+(5.0, v1));
  disp("v1", v1);
#+END_SRC

Output: 

#+BEGIN_SRC text 
   EXPERIMENT 2 boost::less_than_comparable<Vec3D>
  --------------------------------------------------
   =>> v1 + 5.0 = Vec3D{  x = 8 ; y = 10 ; z = 11 } 
   =>> operator+(v1, 5.0) = Vec3D{  x = 8 ; y = 10 ; z = 11 } 
   =>> 5.0 + v1 = Vec3D{  x = 8 ; y = 10 ; z = 11 } 
   =>> operator+(5.0, v1 = Vec3D{  x = 8 ; y = 10 ; z = 11 } 
   =>> v1 = Vec3D{  x = 3 ; y = 5 ; z = 6 } 
#+END_SRC

** Boost Range 

Documentation: 
 + [[https://www.boost.org/doc/libs/1_69_0/libs/range/doc/html/index.html][Boost.Range]]

New Version of Range Library - v3
 + https://ericniebler.github.io/range-v3/index.html

Headers and functionality: 
 + <boost/range.hpp>
 + <boost/range/adapators.hpp>
 + <boost/range/algorithm.hpp>
 + <boost/range/algorithm_ext/for_each.hpp>
 + <boost/range/algorithm/copy.hpp>
 + <boost/range/adaptor/reversed.hpp>
 + <boost/range/adaptor/transformed.hpp>

Namespaces: 
 + boost
 + boost::adaptors 

 *Example:*

Headers: 

#+BEGIN_SRC cpp 
  #include <boost/range.hpp>
  #include <boost/range/adaptors.hpp>
  // Include all algorithms 
  #include <boost/range/algorithm.hpp>

  #include <boost/range/algorithm/copy.hpp>
  #include <boost/range/adaptor/reversed.hpp>
  #include <boost/range/adaptor/transformed.hpp>
   
  #include <iostream> 
  #include <vector> 
  #include <deque>
  #include <string> 

  namespace b = boost;
  namespace ba = boost::adaptors;
#+END_SRC



 + Boost for_each rage: 

#+BEGIN_SRC cpp 
   #include <iostream> 
   #include <vector> 
   #include <boost/range/algorithm/for_each.hpp>

   auto xs = std::vector<int> {100, 80, 60, 70, 98, 45, 173};
   
   // Boost Range - for_each 
   >> boost::for_each(xs, [](int x){ std::cout << x << "\n"; });
   100
   80
   60
   70
   98
   45
   173
 
   // STL for_each: 
   >> std::for_each(xs.begin(), xs.end(), [](int x){ std::cout << x << "\n"; });
   100
   80
   60
   70
   98
   45
   173
#+END_SRC


 + Boost sort: 

#+BEGIN_SRC cpp 
   #include <iostream> 
   #include <vector> 
   #include <algorithm> 

   #include <boost/range/algorithm/sort.hpp>

   >> auto ys = xs;
   >> ys
   { 100, 80, 60, 70, 98, 45, 173 }

   // ----- Bost range ------------ // 
   >> boost::sort(ys);
   >> ys
   { 45, 60, 70, 80, 98, 100, 173 }

   // --- STL Range ------------- // 

   >> auto zs = xs;
   >> zs
    { 100, 80, 60, 70, 98, 45, 173 }

   >> std::sort(xs.begin(), xs.end());
   >> xs
    { 45, 60, 70, 80, 98, 100, 173 }
#+END_SRC

 + Boost copy 

#+BEGIN_SRC cpp 
  #include <boost/range/algorithm/copy.hpp>

  >> xs
  { 45, 60, 70, 80, 98, 100, 173 }
  >> 

  >> std::vector<int> out;

  >> boost::copy(xs, std::back_inserter(out));
  
  >> out
  { 45, 60, 70, 80, 98, 100, 173 }
#+END_SRC

 + Boost transform 

#+BEGIN_SRC cpp 
  >> std::vector<double> weights = {10.2, 5.60, 8.25};
  >> std::vector<double> ts(weights.size());

  >> boost::transform(weights, ts.begin(), [](double x){ return x / 100.0; });

  >> ts
  (std::vector<double> &) { 0.10200000, 0.056000000, 0.082500000 }
#+END_SRC

** Boost Pointer Container 

The C++ Standard Template Library - STL does not work well with
polymorphic types as polymorphic objects cannot be stored in container
directly due to object slicing, only the base part is copied and the
derived is discarded; storing polymorphic objects with smart pointers
pointers is memory and exception safe. However, it is still cumbersome
and does not plays well with STL algorithms such as std::sort or
std::for_each with functors or lambda wrappers due to STL algorithms
be designed to work with values, not pointers.

The boost pointer container library provides STL-like containers for
holding heap-allocated objects or polymorphic objects. The containers
provide interoperability with STL algorithms; non-pointer notation for
accessing object members; single memory-ownership.  

Note: If there is shared ownership semantics, in other words, multiple
objects need to point to a polymorphic object during their entire
lifetime, then this library is not suitable to this use case. In this
situation, the best solution is to use a container of shared pointers
such as std::vector<std::shared<T>>. 

See: [[https://web.archive.org/web/20050413215843/http://www.oonumerics.org:80/tmpw00/kuehl.html][STL and OO Don't Easily Mix]]

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/libs/ptr_container/doc/ptr_container.html][Pointer Container]]
 + Headers:
   + <boost/ptr_container/ptr_vector.hpp>
   + <boost/ptr_container/ptr_deque.hpp>
   + <boost/ptr_container/nullable.hpp>	
   + [[https://www.boost.org/doc/libs/1_69_0/libs/ptr_container/doc/headers.html][Full list]]
 + Containers:
   + ptr_vector
   + ptr_deque 
   + ptr_list
   + ptr_map
   + ptr_set
 + Functions:
   + boost::str
   + boost::format

 *Example:*

Source: 
 + File: [[file:src/boost/boost-pointer-container.cpp][file:src/boost/boost-pointer-container.cpp]]
 + Online Compiler: https://rextester.com/LIJMMS16329

Compiling and running: 

#+BEGIN_SRC sh 
 $ clang++ boost-pointer-container.cpp -o boost-pointer-container.bin -std=c++1z -g -O0 -Wall 
 $ ./boost-pointer-container.bin
#+END_SRC

Headers: 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <vector>
  #include <string>
  #include <functional>

  #include <boost/ptr_container/ptr_vector.hpp>
#+END_SRC

Sample class hierarchy: 

#+CAPTION: Base class of sample hierarchy.
#+BEGIN_SRC cpp 
  class Base{
  public:
      static auto nextID() -> int {
         static int i = 0;
         return ++i;
      }		

      Base() = default;
      // Destructor of base class must always be virtual
      virtual ~Base() = default;
      virtual auto getID() const -> int = 0;
      virtual auto getType() const -> std::string = 0;
  };
#+END_SRC

#+CAPTION: Class DerivedA - Derived class of Base 
#+BEGIN_SRC cpp 
  class DerivedA: public Base{	
  public:
      const int m_id;
	
      DerivedA(): m_id(Base::nextID())  { }
      auto getType() const  -> std::string {
         return "DerivedA";
      }
      auto getID() const -> int {
         return m_id;
      }	
      ~DerivedA(){
          std::cout << " [INFO] Class DerivedA deleted. => Object ID = "
                    << m_id << "\n";
      }
  };
#+END_SRC

#+CAPTION: Class DerivedB - Derived class of Base 
#+BEGIN_SRC cpp 
  class DerivedB: public Base{
      const int m_id;
  public:		
      DerivedB(): m_id(Base::nextID())  { }
      auto getType() const -> std::string {
         return "DerivedB";
      }
      auto getID() const -> int {
         return m_id;
      }		
      ~DerivedB(){
          std::cout << " [INFO] Class DerivedB deleted. => ObjectID = "
                    << m_id  << "\n";
      }
  };
#+END_SRC

Function showType: 

#+BEGIN_SRC cpp 
  void showType(Base const& obj)
  {
          std::cout << "Object ID = " << obj.getID()
                    <<  " Class type = " << obj.getType()
                    << "\n";
  }
#+END_SRC

 *Main Function*

Experiment 0: STL Container olding non-polymorphic objects
(non-dynamically allocated, type is known at compile-time).

#+BEGIN_SRC cpp 
  std::vector<DerivedA> xsa;
  xsa.push_back(DerivedA());
  xsa.push_back(DerivedA());
  xsa.emplace_back();

  std::cout << "Run std::for_each" << "\n";
  std::for_each(xsa.begin(), xsa.end(), showType);
#+END_SRC

Experiment 1: STL container holding polymorphic objects:

 + Note: STL algorithms require lambda wrappers.

#+BEGIN_SRC cpp 
  std::cout << "\n === EXPERIMENT 1 ==============================" << "\n";

  std::vector<std::shared_ptr<Base>> xs;
  xs.push_back(std::make_shared<DerivedA>());
  xs.push_back(std::make_shared<DerivedB>());
  xs.push_back(std::make_shared<DerivedA>());
  xs.push_back(std::make_shared<DerivedB>());

  std::cout << " <<INFO>> xs[0]  type " << xs[0]->getType()
            << " ; id = " << xs[0]->getID() << "\n";

  std::cout << " <<INFO>> xs[2]  type " << xs[2]->getType()
            << " ; id = " << xs[2]->getID() << "\n";

  std::for_each(xs.begin(), xs.end(),
                [](auto const& pBase){
                        showType(*pBase);
                });

  std::vector<int> identifiers1;
  std::transform(xs.begin(), xs.end(),
                 std::back_inserter(identifiers1),
                 [](auto pBase){ return pBase->getID(); });
#+END_SRC

Experiment 2: Boost ptr_vector 

 + Notes:
   + Accessing elements ps[0] uses conventional notation without (->)
     arrow operator.
   + STL algorithms does not need lambda or functor wrappers.
   + Memory solely owned by ptr_vector (single-ownership)

#+BEGIN_SRC cpp 
  boost::ptr_vector<Base> ps;
  ps.push_back(new DerivedA);
  ps.push_back(new DerivedB());
  ps.push_back(new DerivedA());
  ps.push_back(new DerivedB);

  std::cout << " <<INFO>> ps[0]  type " << ps[0].getType() << " ; id = " << ps[0].getID() << "\n";
  std::cout << " <<INFO>> ps[1]  type " << ps[1].getType() << " ; id = " << ps[1].getID() << "\n";
  std::cout << " <<INFO>> ps[2]  type " << ps[2].getType() << " ; id = " << ps[2].getID() << "\n";

  std::vector<int> identifiers2;
  std::transform(xs.begin(), xs.end(),
                 std::back_inserter(identifiers2),
                 std::bind(&Base::getID, std::placeholders::_1));

  std::cout << "\n ==> Show objects before deleting last item " << "\n";
  std::for_each(ps.begin(), ps.end(), showType);

  std::cout << "\n ==> Show objects after deleting last item " << "\n";
  ps.pop_back();
  std::for_each(ps.begin(), ps.end(), showType);

  std::cout << " ============= END =================" << "\n";
#+END_SRC

** Boost Interprocess 
*** Overview  

[[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess.html][Boost.Interprocess]] is a library that provides wrappers or a common
interface for many operating-system-specific inter process
communication (IPC) primitive functions. The library provides wrappers
to the following IPC facilities:

 + File locking 
 + Mutex
 + Semaphore 
 + Shared Memory
 + Memory Mapped File
 + Message Queue 
*** Example: Shared memory facilities

Shared memory is the fastest IPC inter-process communication mechanism
available in most operating systems for exchanging data between
processes in the same machine. The share memory IPC allows data to be
shared by multiple processes without any copying overhead which makes
it faster than sockets, message passing and so on. However, using
operating systems shared memory APIs directly is not easy or
portable. Boost inter-process library provides many facilities that
encapsulates operating systems APIs with a higher level interface that
makes the code portable across many operating systems.

 + Documentation: [[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess.html][Boost.InterProcess]]

This code provide many client/server examples about using the
Boost.Interprocess shared memory API and also about how to allocate
STL containers in a shared memory segment. 

 *Source Code* 
  + [[file:src/boost/boost-shared-memory1.cpp][file:src/boost/boost-shared-memory1.cpp]]

 *Headers*

 #+BEGIN_SRC cpp 
   #include <iostream>
   #include <cassert>
   #include <map>
   #include <functional>
   #include <vector>

   #include <boost/interprocess/mapped_region.hpp>
   #include <boost/interprocess/shared_memory_object.hpp>
   #include <boost/interprocess/sync/named_mutex.hpp>
   #include <boost/interprocess/managed_shared_memory.hpp>
   #include <boost/interprocess/segment_manager.hpp>
 #+END_SRC

Namespace alias: 

#+BEGIN_SRC cpp 
  namespace bi = boost::interprocess;
#+END_SRC

Templates: 

#+BEGIN_SRC cpp 
  /** Generic Shared Memory Allocator */
  template<typename T>
  using ShmemAllocator = bi::allocator<T, bi::managed_shared_memory::segment_manager> ;

  /** Generic STL vector allocated in shared memory */
  template<typename T>
  using ShmemVector = std::vector<T, ShmemAllocator<T>> ;
#+END_SRC

Class SharedMemoryCleaner uses the RAII (Resource Acquisition Is
Initialization) for deleting shared memory segments when out of
scope. 

#+BEGIN_SRC cpp 
  /** RAII Object for removing shared memory segment. */
  struct SharedMemoryCleaner
  {	
     std::string m_name;
     SharedMemoryCleaner(std::string name): m_name(name){ }

     ~SharedMemoryCleaner(){
          namespace bi = boost::interprocess;
          std::cerr << " [INFO] Remove shared memory segment { name = " << m_name << " }" << "\n";
          bi::shared_memory_object::remove(m_name.c_str());
     }
  };
#+END_SRC

Function Declarations: 

#+BEGIN_SRC cpp 
  int serverA();
  int clientA();

  int serverB();
  int clientB();

  int serverC();
  int clientC();
#+END_SRC

Main Function: 

#+BEGIN_SRC cpp 
  int main(int argc, char** argv){
       using DispatchTable = std::map<std::string, std::function<int ()>>;
       DispatchTable table = {
           {"serverA", &serverA},
           {"clientA", &clientA},
           {"serverB", &serverB},
           {"clientB", &clientB},
           {"serverC", &serverC},
           {"clientC", &clientC}
       };

       if(argc < 2) {
           std::cout << " Error: invalid arguments." << std::endl;
           return EXIT_SUCCESS;
       }
       auto it = table.find(argv[1]);
       if(it == table.end()){
           std::cout << " Error: invalid command." << std::endl;
           return EXIT_FAILURE;		
       }
       // Execute function 
       return it->second();			
  }
#+END_SRC

Function: ServerA.

#+BEGIN_SRC cpp 
  // Print string (char array) to shared memory 
  int serverA()
  {	
      // Create shared memory wrapper object 
      auto shm = bi::shared_memory_object{
                   // Creates shared memory segment if it does not exist 
                   bi::open_or_create,
                   "shared_memory_segment",
                   bi::read_write
                 };
      // RAII object that removes the segment when out of scope 
      auto shm_remove = SharedMemoryCleaner("shared_memory_segment");	
      // Set size of the shared memory segment in Kb (kbytes = 1024 bytes)
      shm.truncate(1024); // 1kb (kbytes)
      // Map the shared memory segment to current process
      auto region = bi::mapped_region{shm, bi::read_write};
      // Pointer to shared memory 
      void* pMem = region.get_address();

      // Print to shared memory
      char* pChar = static_cast<char*>(pMem);
      std::sprintf(pChar, " ==> String written to shared memory segment");

      // Keep the server Alive as the shared memory segment is not 
      // persistent on Windows. 
      std::cout << "Enter RETURN to EXIT " << "\n";
      std::cin.get();
      return EXIT_SUCCESS;
  }
#+END_SRC

Function: clientA.

#+BEGIN_SRC cpp 
   // Print string (char array) to shared memory 
   int clientA()
   {	
       // Create shared memory wrapper object 
       auto shm = bi::shared_memory_object{
          // Creates shared memory segment if it does not exist 
          bi::open_only,
          "shared_memory_segment",
          bi::read_only
          };
       auto region = bi::mapped_region{shm, bi::read_only};
       void* pMem = region.get_address();

       // Interpret shared memory as a pointer to char* 
       char* pMessage = static_cast<char*>(pMem);
       std::cout << " Content of shared memory = " << pMessage << "\n";	
       return EXIT_SUCCESS;
   }
#+END_SRC

Function: serverB.

#+BEGIN_SRC cpp 
  /** Allocate double[] array in shared memory */
  int serverB()
  {
       auto shm = bi::shared_memory_object{	
       bi::open_or_create,
       "shared_memory_segment",
       bi::read_write
       };
       auto shm_remove = SharedMemoryCleaner("shared_memory_segment");
       shm.truncate(1024); // 1kb (kbytes)
       auto region = bi::mapped_region{shm, bi::read_write};
       void* pMem = region.get_address();

       // Allocate array of 5 doubles in the shared memory 
       double* arr = new (pMem) double [5];
       arr[0] = 100.34;
       arr[1] = 200.5;
       arr[2] = -5.6;
       arr[3] = 9.10;
       arr[4] = 10.5;

       // Keep the server Alive as the shared memory segment is not 
       // persistent on Windows. 
       std::cout << "Enter RETURN to EXIT " << "\n";
       std::cin.get();
       return EXIT_SUCCESS;
  }

#+END_SRC

Function clientB:

#+BEGIN_SRC cpp 
  /** Retrieve double[] array from shared memory */
  int clientB(){
       auto shm = bi::shared_memory_object{
            bi::open_only, 
           "shared_memory_segment",
            bi::read_only 
       };
       auto region = bi::mapped_region{shm, bi::read_only};

       void* pMem = region.get_address();
       double* arr = static_cast<double*>(pMem);

       std::cout << "arr[0] = " << arr[0] << "\n";
       std::cout << "arr[1] = " << arr[1] << "\n";
       std::cout << "arr[2] = " << *(arr + 2) << "\n";
       std::cout << "arr[3] = " << *(arr + 3) << "\n";
       std::cout << "arr[4] = " << arr[4] << "\n";
       return EXIT_SUCCESS;
  }

#+END_SRC

Function: ServerC. 

#+BEGIN_SRC cpp 
  // Allocate STL container in shared memory  
  int serverC(){
       // Remove shared memory segment if it already exists 
       bi::shared_memory_object::remove("shared_seg");

       auto segment = bi::managed_shared_memory(
               bi::open_or_create,
               "shared_seg", // segment name 
               4096              // 4 kbytes 
               );
       auto shm_remove = SharedMemoryCleaner("shared_seg");

       // Segment manager pointer 
       // Type: managed_shared_memory::segment_manage* 
       auto segmgr = segment.get_segment_manager();
       segmgr->construct<const char*>("text")("'Hello world shared memory'");
       segmgr->construct<double>("speed")(10.50);
       segmgr->construct<int>("nodes")(100);

       // === Allocate STL Vector in Shared Memory === //	
       // Build shared memory allocator 
       auto aloc = ShmemAllocator<double>(segmgr);

       // Instantiate vector in shared memory 
       ShmemVector<double>* pVector = segmgr->construct<ShmemVector<double>>("avector")(aloc);
       pVector->reserve(50);
       pVector->push_back(4.5);
       pVector->push_back(10.3);
       pVector->push_back(100.50);
       pVector->push_back(20.0);

       std::cout << "Enter RETURN to EXIT " << "\n";
       std::cin.get();
       return EXIT_SUCCESS;
  };

#+END_SRC


Function: ClientC.

#+BEGIN_SRC cpp 
  int clientC(){
        auto segment = bi::managed_shared_memory(
                bi::open_or_create,
                "shared_seg", // segment name 
                4096          // 4 kbytes 
              );	

        auto segmgr = segment.get_segment_manager();
        std::pair<double*, size_t> p1 = segmgr->find<double>("speed");
        std::cout << "Speed = " << *p1.first << "\n";

        auto pairNodes = segmgr->find<int>("nodes");
        std::cout << "Nodes = " << *pairNodes.first << "\n";

        auto pairText = segmgr->find<const char*>("text");
        std::cout << "Text = " << *pairText.first << "\n";

        // C++17 - Structured Binding
        auto [pVector, _] = segmgr->find<ShmemVector<double>>("avector");

        std::cout << " => pVector->size() = " << pVector->size() << std::endl;
        std::cout << " => pVector[0] = " << pVector->operator[](0) << std::endl;
        std::cout << " => pVector[1] = " << (*pVector)[1] << std::endl;
        size_t idx = 0;
        for(auto const& x: *pVector)
            std::cout << "pVector[" << idx++ << "] = " <<  x << "\n";

        double speed;
        std::cout << "Enter new speed: ";
        std::cin >> speed;
        ,*p1.first = speed;

        pVector->push_back(speed);

        return EXIT_SUCCESS;
  };
#+END_SRC

 *Compile on Linux, OSX or any other Unix-like OS*

#+BEGIN_SRC sh 
  # GCC  
  $ g++ boost-shared-memory1.cpp -o boost-shared-memory1.bin -std=c++1z -Wall -lpthread -lrt

  # Clang 
  $ clang++ boost-shared-memory1.cpp -o boost-shared-memory1.bin -std=c++1z -Wall -lpthread -lrt
#+END_SRC

 *Compile on Windows* 

Compile with Visual C++ or MSVC (VC++)

#+BEGIN_SRC bat 
  $ cl.exe boost-shared-memory1.cpp /Fe:boost-shared-memory1.exe /EHsc /std:c++17 ...
    /GA /MDd /nologo /I C:\boost\boost_1_69_0 /link /LIBPATH:C:\boost\lib
#+END_SRC

Compile with Mingw (GCC)

#+BEGIN_SRC bat 
  $ g++ boost-shared-memory1.cpp -o boost-shared-memory1.exe -std=c++1z -I C:\boost\boost_1_69_0
#+END_SRC

 *Running functions serverA and clientA*

The process that runs serverA in terminal 1 allocates a string in the
shared memory and the process running in the terminal 2 displays the
string from fetched from shared memory. 

Terminal 1: 

#+BEGIN_SRC sh 
  F:\boost> boost-shared-memory1.exe serverA
  Enter RETURN to EXIT
#+END_SRC

Terminal 2: 

#+BEGIN_SRC sh 
  F:\boost> boost-shared-memory1.exe clientA
   Content of shared memory =  ==> String written to shared memory segment
#+END_SRC

 *Running functions serverB and clientB* 
 
Terminal 1: 

#+BEGIN_SRC sh 
  F:\boost>
  F:\boost> boost-shared-memory1.exe serverB
  Enter RETURN to EXIT
#+END_SRC

Terminal 2: 

#+BEGIN_SRC sh 
  F:\boost>boost-shared-memory1.exe clientB
  arr[0] = 100.34
  arr[1] = 200.5
  arr[2] = -5.6
  arr[3] = 9.1
  arr[4] = 10.5
#+END_SRC

 *Running functions serverC and clientC* 

The process running in terminal 1 (serverC) allocates several variables in the
shared memory and an std::vector<double> container and the process
running in the terminal 2 (clientC) reads the shared memory and
updates the variable speed and the vector container. The changes in
the std::vector container are persistent on each execution of the
process in terminal 2 while the process running the command serverC is
running. 

Terminal 1: 

#+BEGIN_SRC sh 
  F:\boost> boost-shared-memory1.exe serverC
  Enter RETURN to EXIT
#+END_SRC

Terminal 2: 

#+BEGIN_SRC sh 
  F:\boost> boost-shared-memory1.exe clientC
  Speed = 100.665
  Nodes = 100
  Text = 'Hello world shared memory'
   => pVector->size() = 5
   => pVector[0] = 4.5
   => pVector[1] = 10.3
  pVector[0] = 4.5
  pVector[1] = 10.3
  pVector[2] = 100.5
  pVector[3] = 20
  pVector[4] = 100.665
  Enter new speed: 40.51

  F:\boost> boost-shared-memory1.exe clientC
  Speed = 40.51
  Nodes = 100
  Text = 'Hello world shared memory'
   => pVector->size() = 6
   => pVector[0] = 4.5
   => pVector[1] = 10.3
  pVector[0] = 4.5
  pVector[1] = 10.3
  pVector[2] = 100.5
  pVector[3] = 20
  pVector[4] = 100.665
  pVector[5] = 40.51
  Enter new speed: ^C

#+END_SRC

*** Example: Shared memory logging with mutex synchronization

This sample program emulates a client that sends logging message to a
shared memory segment and a server that receives the logging messages
from the shared memory and prints them to the standard output
stdout. A named mutex object is used for coordinating both processes. 

 *File:*
 + [[file:src/boost/boost-shared-memory-logger.cpp][file:src/boost/boost-shared-memory-logger.cpp]]

 *Headers:*

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <string>
  #include <sstream>

  #include <cstring> // strok 
  #include <ctime>
  #include <chrono>

  #include <boost/interprocess/mapped_region.hpp>
  #include <boost/interprocess/shared_memory_object.hpp>
  #include <boost/interprocess/sync/named_mutex.hpp>
  #include <boost/interprocess/sync/scoped_lock.hpp>
#+END_SRC

 *Namespace Alias*

#+BEGIN_SRC cpp 
  namespace bi = boost::interprocess;
#+END_SRC

 *Function Main* 

Create shared memory segment: 

#+BEGIN_SRC cpp 
     // Create shared memory wrapper object 
     auto shm = bi::shared_memory_object{
             bi::open_or_create,  
             "logger_shm",
             bi::read_write
     };
     // Set size of the shared memory segment in Kb (kbytes = 1024 bytes)
     shm.truncate(4096); // 4kb (kbytes)
     // Map the shared memory segment to current process
     auto region = bi::mapped_region{shm, bi::read_write};
     // Pointer to shared memory 
     void* pMem = region.get_address();
#+END_SRC

Create a named mutex object for process synchronizing the shared memory
access: 

#+BEGIN_SRC cpp 
   // Create mutex Object 
   bi::named_mutex amutex(bi::open_or_create, "logger_mutex");
#+END_SRC

Check command line arguments: 

#+BEGIN_SRC cpp 
  if(argc < 2){
      std::cout << "$ " << argv[0] << " [-client|-server]" << "\n";
      return EXIT_SUCCESS;
  }

  std::string cmd = argv[1];
#+END_SRC

Server command: 

#+BEGIN_SRC cpp 
     if(cmd == "-server"){
         char* pMessage = (char*) pMem;
         while(true)
         {
              std::cerr << " [TRACE] Waiting logging message " << std::endl;
              // Acquire mutex lock blocking this thread 
              amutex.lock();
              // Print logging memssage from shared memory 
              std::cout << pMessage << std::endl;
         }
         return EXIT_SUCCESS;
     }
#+END_SRC

Client command: 

#+BEGIN_SRC cpp 
     if(cmd == "-client")
     {
         // Interpret shared memory as a pointer an null-terminated
         // array of characters 
         char* pMessage = (char*) pMem;
         std::string line;
         while(true)
         {
             std::cout << " => Enter line: ";
             std::getline(std::cin, line);			
             std::stringstream ss;
             auto now = std::chrono::system_clock::now();
             std::time_t ttp = std::chrono::system_clock::to_time_t(now);
             ss << " [INFO] " << strtok(std::ctime(&ttp), "\n") << " - " << line;
             // Print to shared memory (pointer by pMessage)
             std::sprintf(pMessage, "%s", ss.str().c_str());
             // Release mutex lock 
             amutex.unlock();
         }	   
         return EXIT_SUCCESS;
     }
#+END_SRC

 *Compiling on Linux or any other Unix-like OS:*

#+BEGIN_SRC sh 
 # Clang 
 $ clang++ boost-shared-memory-logger.cpp -o logger.bin -std=c++1z -g -O0 -Wall -lpthread -lrt  
 # GCC
 $ gcc++ boost-shared-memory-logger.cpp -o logger.bin -std=c++1z -g -O0 -Wall -lpthread -lrt  
#+END_SRC

 *Compiling on Windows with MingW/GCC* 

#+BEGIN_SRC sh 
  $ g++ boost-logger.cpp -o boost-logger.exe -IC:\boost\boost_1_69_0
#+END_SRC

 *Compiling on Windows with MSVC (VC++)*

Problem faced when compiling wiht MSVC:
 + [[https://stackoverflow.com/questions/9628527/linker-error-lnk1104-with-libboost-filesystem-vc100-mt-s-1-49-lib][c++ - Linker error LNK1104 with 'libboost_filesystem-vc100-mt-s-1_49.lib' - Stack Overflow]]

#+BEGIN_SRC sh 
  $ cl.exe boost-logger.cpp /Fe:boost-logger1.exe /EHsc /GA /MDd /nologo /I C:\boost\boost_1_69_0 /link /LIBPATH:C:\boost\lib
#+END_SRC

Run program as server in terminal 1: 

#+BEGIN_SRC sh 
  $ ./logger.bin -server
   [TRACE] Waiting logging message 
   [INFO] Sun Mar 17 08:13:26 2019 - price 10% up
   [TRACE] Waiting logging message 
   [INFO] Sun Mar 17 08:13:38 2019 - price change 4.5 down
   [TRACE] Waiting logging message 
   [INFO] Sun Mar 17 08:14:07 2019 - new forecast arriving soon
   [TRACE] Waiting logging message 
   [INFO] Sun Mar 17 08:14:11 2019 - new data
   [TRACE] Waiting logging message 
   ... ...  ... ...  ... ...  ... ... 
#+END_SRC

Run program as client in terminal 2: 
 + User type messages in this terminal and they are sent to the shared
   memory buffer, then mutex lock is released what makes the server
   process print the message from the shared memory to standard output.


#+BEGIN_SRC sh 
  $ ./logger.bin -client
   => Enter line: price 10% up
   => Enter line: price change 4.5 down
   => Enter line: new forecast arriving soon
   => Enter line: new data
   => Enter line: ^C
#+END_SRC
*** Example: Memory Mapped Files 
**** Overview 

Most operating systems have system-calls or APIs for mapping files
into a process' address space or virtual memory which allows reading
and writing to a file as it was a memory. Any changes in memory-mapped
file memory segment is immediately written to the disk. 

Among other things, memory-mapped files provide the following
benefits:

 * Faster and more performant file processing, specially for big files
   of Gigabyte-size (big-data).

 * Persistence and serialization:
   + Simplified serialization, any object allocated in a memory-mapped
     file segment is automatically written to the mapped file in a
     disk. And deserialization only requires reading the object from
     the memory or just casting a pointer without any special
     deserialization code.

Operating System APIs: 

 + Unix-like OSes or POSIX (Linux, MacOSX, Android, BSD, QNX ...)
   + Uses the system-call or API: [[https://en.wikipedia.org/wiki/Mmap][mmap]] for memory-mapped files.

 + Windows NT, Windows CE:
   + Uses the Win32 APIs: [[https://docs.microsoft.com/en-gb/windows/desktop/api/winbase/nf-winbase-createfilemappinga][CreateFileMapping]], [[https://docs.microsoft.com/en-gb/windows/desktop/api/memoryapi/nf-memoryapi-mapviewoffile][MapViewOFile]], [[https://docs.microsoft.com/en-gb/windows/desktop/api/memoryapi/nf-memoryapi-unmapviewoffile][UnmapViewOfFile]]

The boost interprocess library provides a generalized interface to
those operating system specific memory-mapping file APIs. The library
also provides a C++ friendly notation, memory-allocators, memory
managers and so on that simplifies the usage on many different
operating systems.

See also: 
 + Boost.Interprocess: [[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess/sharedmemorybetweenprocesses.html#interprocess.sharedmemorybetweenprocesses.mapped_file][Memory Mapped Files]]
 + Boost.Interprocess: [[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess/managed_memory_segments.html#interprocess.managed_memory_segments.managed_mapped_files][Managed Mapped Files]]
 + [[http://john.freml.in/mmap-pattern][John Fremlin's blog: The mmap pattern]]
 + [[https://stackoverflow.com/questions/7159271/live-c-objects-that-live-in-memory-mapped-files]["live C++ objects that live in memory mapped files"? - Stack Overflow]]
 + [[https://docs.microsoft.com/en-us/dotnet/standard/io/memory-mapped-files][Memory-Mapped Files | Microsoft Docs]]
 + [[https://software.intel.com/en-us/articles/introduction-to-programming-with-persistent-memory-from-intel][Introduction to Programming with Persistent Memory from Intel | Intel® Software]]
 + [[http://blogs.microsoft.co.il/sasha/2016/01/21/myth-busting-memory-mapped-files-and-shared-memory-on-windows/][Myth-Busting: Memory-Mapped Files and Shared Memory on Windows | All Your Base Are Belong To Us]]
 + [[https://en.wikipedia.org/wiki/Memory-mapped_file][Memory-mapped file - Wikipedia]]
 + [[https://pymotw.com/2/mmap/][mmap – Memory-map files - Python Module of the Week]]
**** Code 

 *File*:
  + [[file:src/boost/boost-memory-mapped-file.cpp][file:src/boost/boost-memory-mapped-file.cpp]]

Headers: 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <functional>
  #include <string>
  #include <fstream>
  #include <vector>

  #include <boost/interprocess/managed_mapped_file.hpp>
  #include <boost/interprocess/file_mapping.hpp>
  #include <boost/interprocess/mapped_region.hpp>
#+END_SRC

 *Namespace alias:*

#+BEGIN_SRC cpp 
  namespace bi = boost::interprocess;	
#+END_SRC

 *Template aliases:*

#+BEGIN_SRC cpp 
  /** Generic Memory-mapped file allocator */
  template<typename T>
  using MMFAllocator = bi::allocator<T, bi::managed_mapped_file::segment_manager> ;

  /** Generic STL vector allocated in memory-mapped file */
  template<typename T>
  using MMFVector = std::vector<T, MMFAllocator<T>> ;
#+END_SRC

 *Function Main*

Intial definitions: 

#+BEGIN_SRC cpp 
  constexpr const char* fileName = "memory-dump.dat";
  constexpr size_t      fileSize = 4096; // 4 kbytes
  bool flagFileExists            = fileExists(fileName);

  // Manged file mapping object => Creates the file if it does not exists 
  auto mf = bi::managed_mapped_file{bi::open_or_create, fileName, fileSize};
#+END_SRC

Check if file exits, if does not exist yet, then initial data is
written to the file by allocating data in the mapped memory. 

#+BEGIN_SRC cpp 
  if(!flagFileExists){
       // Executed when the file did not exist 
       std::cout << " [INFO] Setting file data" << std::endl;
       mf.construct<int>("NumberOfNodes")(100);	
       mf.construct<double>("Speed")(200.0);
       mf.construct<const char*>("Text")("'Allocated text in memory mapped file'");

       // Allocate std::vector<double>
       MMFAllocator<double> aloc1(mf.get_segment_manager());
       MMFVector<double>* pVector = mf.construct<MMFVector<double>>("AVector")(aloc1);
       pVector->reserve(20);
       pVector->push_back(40.5);
       pVector->push_back(98.10);
       pVector->push_back(-50.45);
       pVector->push_back(10);		

       return EXIT_SUCCESS;
  }
#+END_SRC

If the file already exists, then it is mapped into the current
process' virtual memory and the data extracted just by reading the
memory, any modification to this mapped segment is written to the file
memory-dump.dat. 

Get variable: NumberOfNodes and increment it.

#+BEGIN_SRC cpp 
  // ======= Executed when file already exists =========// 

  std::cout << " [INFO] Retrieving objects from memory mapped file" << std::endl;

  // Retrieve variable NumberOfNodes with very explicitly and verbose notation 
  std::pair<int*, size_t> pairResult1 =  mf.find<int>("NumberOfNodes");
  if(pairResult1.first == nullptr){
          std::cerr << " [ERROR] I cannot find the object 'NumberOfNodes'" << std::endl;
          return EXIT_FAILURE;
  }
  std::cout << "Number of nodes = " << *pairResult1.first  << "\n";
  (*pairResult1.first)++;
#+END_SRC

Get variable 'Text' and display it. 

#+BEGIN_SRC cpp 
  // Retrieve variable text
  auto [pText, _size1 ] = mf.find<const char*>("Text");
  assert(pText != nullptr);
  std::cout << "Text = " << *pText << "\n";
#+END_SRC

Get variable 'Speed' and update it with value read from user input. 

#+BEGIN_SRC cpp 
  // Retrieve variable speed
  auto [pSpeed, _size2 ] = mf.find<double>("Speed");
  assert(pSpeed != nullptr);
  std::cout << "Speed = " << *pSpeed << "\n";
  std::cout << " => Set new speed := ";
  std::cin >> *pSpeed;
#+END_SRC

Get vector named 'AVector', display, and update it. 

#+BEGIN_SRC cpp 
  // Rerieve vector
  auto [pVector, _size3] = mf.find<MMFVector<double>>("AVector");
  assert(pVector != nullptr);
  std::cout << "\n pVector->size() = " << pVector->size() << std::endl;
  size_t idx = 0;
  for(auto const& x: *pVector)
     std::cout << " pVector[" << idx++ << "] = " << x << std::endl ;	

  pVector->push_back(*pSpeed);	
  return 0;
#+END_SRC

 *Compile on Linux or any other Unix-like OS*

#+BEGIN_SRC sh    
  # Clang 
  $ clang++ boost-memory-mapped-file.cpp -o boost-memory-mapped-file.bin -std=c++1z -g -O0 -Wall -lpthread -lrt 
  # GCC
  $ g++ boost-memory-mapped-file.cpp -o boost-memory-mapped-file.bin -std=c++1z -g -O0 -Wall -lpthread -lrt 
#+END_SRC

 *Compile on Windows*

Compile with MSVC (VC++)

#+BEGIN_SRC bat
  $ cl.exe boost-memory-mapped-file.cpp /Fe:boost-memory-mapped-file.exe /EHsc /std:c++17 ...
     /GA /MDd /nologo /I C:\boost\boost_1_69_0 /link /LIBPATH:C:\boost\lib
#+END_SRC

Compile with Mingw

#+BEGIN_SRC sh 
  $ g++ boost-memory-mapped-file.cpp -o boost-memory-mapped-file.exe -std=c++1z -I C:\boost\boost_1_69_0
#+END_SRC

 *Running* 

Running for the first time, before the file 'memory-dump.dat'
exists. Note: (compiled with Mingw).

#+BEGIN_SRC sh 
  F:\boost> boost-memory-mapped-file.exe

   [INFO] Setting file data
#+END_SRC

Running for the second time: 

#+BEGIN_SRC sh 
  F:\boost> boost-memory-mapped-file.exe

   [INFO] Retrieving objects from memory mapped file
  Number of nodes = 100
  Text = 'Allocated text in memory mapped file'
  Speed = 200
   => Set new speed := 4.51

   pVector->size() = 4
   pVector[0] = 40.5
   pVector[1] = 98.1
   pVector[2] = -50.45
   pVector[3] = 10
#+END_SRC

Running for the third time: 

#+BEGIN_SRC sh 
  F:\boost> boost-memory-mapped-file.exe
   [INFO] Retrieving objects from memory mapped file
  Number of nodes = 101
  Text = 'Allocated text in memory mapped file'
  Speed = 4.51
   => Set new speed := 125.75

   pVector->size() = 5
   pVector[0] = 40.5
   pVector[1] = 98.1
   pVector[2] = -50.45
   pVector[3] = 10
   pVector[4] = 4.51
#+END_SRC

** Library Map 
*** Math 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/index.html][Math Toolkit 2.8.0 - 1.69.0]]
  + Brief: The math toolkit provides the following facilities:
    + Floating Point Utilities
    + Specific Width Floating Point Types
    + *Statistical Distributions* (Gaussian, Poisson, Bernouli...)
    + Mathematical Special Function
    + Root Finding and Function
    + Minimisations, Polynomials and Rational Functions
    + Interpolation
    + Numerical Integration and Differentiation
    + Quaternions and Octonions.   
  + [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/special.html][Chapter 6. Special Functions - 1.69.0]]
  + [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/dist.html][Chapter 5. Statistical Distributions and Functions - 1.69.0]]

+ [[https://www.boost.org/doc/libs/1_69_0/libs/numeric/ublas/][uBLAS]] (Linear algebra facilities, linear systems, vector matrices
  and so on.)
  + Brief: "uBLAS provides matrix and vector classes as well as basic
    linear algebra routines. Several dense, packed and sparse storage
    schemes are supported."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/numeric/odeint/doc/html/boost_numeric_odeint/getting_started/overview.html][Boost Odeint]]
  + Library for ordinary differential equations - initial value
    problems.

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/date_time.html][Date Time]]
  + Brief: "A set of date-time libraries based on generic programming concepts."
  + Descr: "The motivation for this library comes from working with
    and helping build several date-time libraries on several
    projects. Date-time libraries provide fundamental infrastructure
    for most development projects. However, most of them have
    limitations in their ability to calculate, format, convert, or
    perform some other functionality. For example, most libraries do
    not correctly handle leap seconds, provide concepts such as
    infinity, or provide the ability to use high resolution or
    network time sources. These libraries also tend to be rigid in
    their representation of dates and times. Thus customized policies
    for a project or subproject are not possible."

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/chrono.html][Chapter 7. Boost.Chrono 2.0.8 - 1.69.0]] (Time interval computation,
  already in C++11, but it is a good documentation for the STL
  library.) 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/accumulators.html][Accumulators]]
  + Summary: Incremental statistics.
  + Descr: "Boost.Accumulators is both a library for incremental statistical
    computation as well as an extensible framework for incremental
    calculation in general. The library deals primarily with the
    concept of an accumulator, which is a primitive computational
    entity that accepts data one sample at a time and maintains some
    internal state. These accumulators may offload some of their
    computations on other accumulators, on which they
    depend. Accumulators are grouped within an accumulator
    set. Boost.Accumulators resolves the inter-dependencies between
    accumulators in a set and ensures that accumulators are processed
    in the proper order."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/multiprecision/doc/html/boost_multiprecision/intro.html][Boost Multiprecisions]]
  + Brief: "The Multiprecision Library provides integer, rational,
    floating-point, and complex types in C++ that have more range and
    precision than C++'s ordinary built-in types. The big number
    types in Multiprecision can be used with a wide selection of
    basic mathematical operations, elementary transcendental
    functions as well as the functions in Boost.Math. The
    Multiprecision types can also interoperate with the built-in
    types in C++ using clearly defined conversion rules. This allows
    Boost.Multiprecision to be used for all kinds of mathematical
    calculations involving integer, rational and floating-point types
    requiring extended range and precision."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/units/][Units]]
  + Brief: "Zero-overhead dimensional analysis and unit/quantity
    manipulation and conversion."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/multi_array/doc/user.html][The Boost Multidimensional Array Library (Boost.MultiArray) - 1.69.0]]
  + Brief: Multidimensional arrays, aka tensors. 

*** Parallel Computing 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/mpi.html][Chapter 26. Boost.MPI - 1.69.0]]
  + Brief: "Boost.MPI is a library for message passing in high-performance
    parallel applications. A Boost.MPI program is one or more
    processes that can communicate either via sending and receiving
    individual messages (point-to-point communication) or by
    coordinating as a group (collective communication). Unlike
    communication in threaded environments or using a shared-memory
    library, Boost.MPI processes can be spread across many different
    machines, possibly with different operating systems and
    underlying architectures."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/compute/doc/html/index.html][Chapter 1. Boost.Compute - 1.69.0]]
  + Brief: "The Boost Compute library provides a C++ interface to
    multi-core CPU and GPGPU computing platforms based on OpenCL." 
 
*** String Utilities 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_lexical_cast.html][Chapter 21. Boost.Lexical_Cast 1.0 - 1.69.0]]

+ [[https://www.boost.org/doc/libs/1_69_0/libs/format/][The Boost Format library - 1.69.0]]
  + The format library provides a class for formatting arguments
    according to a format-string, as does printf, but with two major
    differences : format sends the arguments to an internal stream,
    and so is entirely type-safe and naturally supports all
    user-defined types. The ellipsis (...) can not be used correctly
    in the strongly typed context of format, and thus the function
    call with arbitrary arguments is replaced by successive calls to
    an argument feeding operator%

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/string_algo.html][String algo]]
  + Brief: "The String Algorithm Library provides a generic
    implementation of string-related algorithms which are missing in
    STL. It is an extension to the algorithms library of STL and it
    includes trimming, case conversion, predicates and find/replace
    functions. All of them come in different variants so it is easier
    to choose the best fit for a particular need." 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/spirit/][Boost Spirit]]
  + Brief: Framework for building parsers.

+ [[https://www.boost.org/doc/libs/1_69_0/libs/tokenizer/][Tokenizer]]
  + Brief: "Break of a string or other character sequence into a
    series of tokens."

*** Template Metaprogramming facilities 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/utility/operators.htm][Boost Operators]]

+ [[https://www.boost.org/doc/libs/1_69_0/libs/range/][Range]] [BEST]
  + Descr: "A new infrastructure for generic algorithms that builds
    on top of the new iterator concepts."
  + Note: Maybe the future replacement for C++ classical iterators.

+ [[https://www.boost.org/doc/libs/1_69_0/libs/hof/doc/html/doc/src/index.html][Boost.HigherOrderFunctions]] (aka Boost.Hof)
  + Brief: Provides many higher order functions. 
  + Descr: HigherOrderFunctions is a header-only C++11/C++14 library that
    provides utilities for functions and function objects, which can
    solve many problems with much simpler constructs than whats
    traditionally been done with metaprogramming.

+ [[https://www.boost.org/doc/libs/1_69_0/libs/mp11/doc/html/mp11.html][Boost.Mp11: A C++11 metaprogramming library - 1.69.0]]

+ [[https://www.boost.org/doc/libs/1_69_0/libs/fusion/doc/html/fusion/preface.html][Boost Fusion]]

+ [[https://www.boost.org/doc/libs/1_69_0/libs/hana/doc/html/index.html][Boost.Hana]]
  + Brief: "Hana is a header-only library for C++ metaprogramming
    suited for computations on both types and values."
  + Descr: "The functionality it provides is a superset of what is
    provided by the well established Boost.MPL and Boost.Fusion
    libraries. By leveraging C++11/14 implementation techniques and
    idioms, Hana boasts faster compilation times and runtime
    performance on par or better than previous metaprogramming
    libraries, while noticeably increasing the level of
    expressiveness in the process. Hana is easy to extend in a ad-hoc
    manner and it provides out-of-the-box inter-operation with
    Boost.Fusion, Boost.MPL and the standard library." 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/concept_check/][Concept check]]
  + Descr: "Tools for generic programming."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/proto/][Proto]]
  + Brief: "Expression template library and compiler construction
    toolkit for domain-specific embedded languages."

*** Design Patterns and Object Oriented Design Patterns 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_typeerasure.html][Chapter 40. Boost.TypeErasure - 1.69.0]]
  + Brief: "The Boost.TypeErasure library provides runtime
    polymorphism in C++ that is more flexible than that provided by
    the core language. The Boost.TypeErasure library combines the
    superior abstraction capabilities of templates, with the runtime
    flexibility of virtual functions."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/ptr_container/doc/ptr_container.html][Boost Pointer Container Library - 1.69.0]]
  + Brief: "Boost.Pointer Container provides containers for holding
    heap-allocated objects in an exception-safe manner and with
    minimal overhead. The aim of the library is in particular to make
    OO programming easier in C++ by establishing a standard set of
    classes, methods and designs for dealing with OO specific
    problems." 

+ [[https://www.boost.org/doc/libs/release/libs/flyweight/][Boost Flyweight]]
  + Brief: Descr: "Design pattern to manage large quantities of
    highly redundant objects."

  + Descr: "Flyweights are small-sized handle classes granting
    constant access to shared common data, thus allowing for the
    management of large amounts of entities within reasonable memory
    limits. Boost.Flyweight makes it easy to use this common
    programming idiom by providing the class template flyweight<T>,
    which acts as a drop-in replacement for const T."

  + Additional notes:
    + "Learning to use Boost.Flyweight can be accomplished in a matter
      of minutes. When special needs arise, however, an extensive
      customization interface is provided which allows the user to
      control and extend the following aspects:"
    + Type tagging for separation of domains using the same basic flyweight types.
    + Specification and parameterization of the so-called flyweight factory.
    + Control of the factory instantiation procedure.
    + Specification of the internal synchronization mechanisms.
    + Flyweight tracking, allowing for the disposal of stored values
      when no longer referenced by any flyweight object.

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/property_tree.html][Chapter 32. Boost.PropertyTree - 1.69.0]]
  + "The Property Tree library provides a data structure that stores
    an arbitrarily deeply nested tree of values, indexed at each
    level by some key. Each node of the tree stores its own value,
    plus an ordered list of its subnodes and their keys. The tree
    allows easy access to any of its nodes by means of a path, which
    is a concatenation of multiple keys." 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/functional/factory/doc/html/index.html][Boost.Functional/Factory]]
  + Brief: "The template boost::factory lets you encapsulate a new
    expression as a function object, boost::value_factory
    encapsulates a constructor invocation without new."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/property_map/doc/property_map.html][Property Map Library - 1.69.0]]

*** Command Line Options 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/program_options.html][Chapter 31. Boost.Program_options - 1.69.0]]

*** Debugging, Logging and Assertions 

+ [[https://www.boost.org/doc/libs/1_69_0/libs/log/doc/html/index.html][Chapter 1. Boost.Log v2 - 1.69.0]]
  + Descr: "The application stores all essential information about its
    execution to a log, and when something goes wrong this
    information can be used to analyze the program behavior and make
    the necessary corrections. There are other very useful
    applications of logging, such as gathering statistical
    information and highlighting events (i.e. indicating that some
    situation has occurred or that the application is experiencing
    some problems). These tasks have proved to be vital for many
    real-world industrial applications. This library aims to make
    logging significantly easier for the application developer. It
    provides a wide range of out-of-the-box tools along with public
    interfaces for extending the library. The main goals of the
    library are:"
    + Simplicity. A small example code snippet should be enough to
      get the feel of the library and be ready to use its basic
      features.
    + Extensibility. A user should be able to extend functionality of
      the library for collecting and storing information into logs.
    + Performance. The library should have as little performance
      impact on the user's application as possible.

*** Network - Sockets - TCP/IP

+ [[https://www.boost.org/doc/libs/1_69_0/libs/asio/][Boost Asio]]
  + Descr: "Portable networking and other low-level I/O, including sockets,
    timers, hostname resolution, socket iostreams, serial ports, file
    descriptors and Windows HANDLEs."

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/crc.html][Boost CRC]] - CRC (Cyclick Redundancy Checking)
  + Descr: " CRCs (cyclic redundancy codes) is one common technique
    to confirming data integrity after transmission. The Boost.CRC
    library provides access to two styles of CRC computation, one as
    a function template, the other as a function template and two
    computation object class templates, where the two class templates
    differ in speed."

+ [[https://www.boost.org/doc/libs/1_69_0/libs/statechart/][Statechart]]
  + Brief: "Boost.Statechart - Arbitrarily complex finite state
    machines can be implemented in easily readable and maintainable
    C++ code."
  + Note: Many network protocols, embedded systems applications and
    business processes are well described by state machines such as
     [[https://en.wikipedia.org/wiki/Mealy_machine][Mealy state machine]] or [[https://en.wikipedia.org/wiki/Moore_machine][Moore State machine]].

+ [[https://www.boost.org/doc/libs/1_69_0/libs/uuid/][UUID]] - A universally unique identifier.

*** Shared Libraries and Plugins - DLL, DSO, SO

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_dll.html][Boost DLL]]
  + Brief: "This library was designed to simplify plugin development using C++ in a portable cross-platform manner."
  + Descr: "Adding a specific features to an existing software
    applications at runtime could be useful in many cases. Such
    extensions, or plugins, are usually implemented using Dynamic
    Library Modules (DLL,SO/DSO) loaded at runtime."
  + Library provides a portable across platforms way to:
    + load libraries
    + import any native functions and variables
    + make alias names for C++ mangled functions and symbols
    + query libraries for sections and exported symbols
    + self loading and self querying
    + getting program and module location by exported symbol

*** Subprocess and inter process communication - IPC 

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess.html][Boost.Interprocess]]
  + Brief: "Boost.Interprocess simplifies the use of common
    interprocess communication and synchronization mechanisms and
    offers a wide range of them:"
    + Shared memory.
    + Memory-mapped files.
    + Semaphores, mutexes, condition variables and upgradable mutex
      types to place them in shared memory and memory mapped files.
    + Named versions of those synchronization objects, similar to UNIX/Windows sem_open/CreateSemaphore API.
    + File locking.
    + Relative pointers.
    + Message queues.
  + Additional:
    + Boost.Interprocess also offers higher-level interprocess
      mechanisms to allocate dynamically portions of a shared memory
      or a memory mapped file (in general, to allocate portions of a
      fixed size memory segment). Using these mechanisms,
      Boost.Interprocess offers useful tools to construct C++
      objects, including STL-like containers, in shared memory and
      memory mapped files:

+ [[https://www.boost.org/doc/libs/1_69_0/doc/html/process.html#boost_process.introduction][Boost.Process]]
  + Brief: "Boost.Process is a library to manage system processes. It
    can be used to:"
    + create child processes
    + setup streams for child processes
    + communicate with child processes through streams (synchronously
      or asynchronously)
    + wait for processes to exit (synchronously or asynchronously)
    + terminate processes

*** Low level and byte manipulation 

  + [[https://www.boost.org/doc/libs/1_69_0/libs/endian/doc/index.html][Endian Library - 1.69.0]]

