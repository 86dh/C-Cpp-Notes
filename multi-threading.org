#+INCLUDE: theme/style.org 
#+TITLE: Multithreading and concurrency 
#+DESCRIPTION: cpp/c++ thread concurrency std::thread modern cpp c++ 
#+AUTHOR:      Caio Rodrigues Soares - caiorss [DOT] rodrigues [AT] gmail [DOT] COM
#+STARTUP: content 

* Multithreading and concurrency 
** Concepts 

 *Processes and Threads*

Processes: 

 + A process is a running program with its own virtual memory,
   address space, unique process identifier ID and context (CPU
   registers - IP - Instruction Pointer and SP - Stack Pointer)

 + A single _CPU core_ is only capable of executing a single process
   at a time. However, users have the illusion that multiple
   processes are being run simultaneously because the _operating system's_
   _scheduler_ multiplexes the CPU execution time between all
   processes. As a result, each process is run sequentially by a
   single CPU core during a short _time slice_ (time sharing). When the
   scheduler switches to another process, it saves the _process' state_
   (current directory, CPU registers, ...) and loads the state of the
   next process (context switching). 

Threads: 

  * A thread is a independent flow of execution or task within a
    single process. The purpose of threads is to allow a process to
    execute multiple independent simultaneous tasks, such as running
    the user interface dispatch thread, handling socket connections,
    performing the download in a different thread and so on.

  * For an operating system, a thread is a _lightweight process_ or a
    stripped down process with its own stack, local data, CPU
    registers (specially IP - Instruction Pointer and SP - Stack
    Pointer), but without its own address space and virtual memory,
    instead it only can access to the virtual memory of the process
    that thread belongs to.

  * Threads are also known as (aka):
    + Lightweight process 
    + Native thread 
    + Kernel-thread
    + Operating system thread or OS thread 

Benefits of multi-threading:

  + Increase application responsiviness, specially GUI - Graphical
    User Interface Applications.

  + Take advantage of multi-core processor

  + Speed up heavy math computations. Multi-threading allows to
    split a heavy matrix calculation into multiple threads running
    in different CPU cores. 

  + Fewer system resources usage. Using multiple threads for running
    multiple tasks is cheaper than running multiple processes for
    each task. Note: before multi-threading, it was common in
    Unix-like operating system to use the _fork()_ system call to fork
    (copy) the current process for handling client socket
    connections in network server appliocations.  


 *Lowest Level Threading APIs:*

Threads and processes require operating system support, therefore
those APIs are operating system specific. The most fundamental APIs
provided by operating system for accessing threads are: 

  * _pthread (Posix threads)_ - POSIX API (C-API)
    * The posix thread API is implemented by most Unix-like operating
      systems such Linux, MacOsx, iOS, Android, BSD and some embedded
      real time systems such as RTEMS, QNX and VxWorks.

  * _Windows Win32 Thread API_


