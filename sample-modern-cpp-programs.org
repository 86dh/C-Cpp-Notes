#+INCLUDE: theme/style.org
#+TITLE: Sample Modern C++ Programs 
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 

 - [[wiki:index][Index]]

* Sample Modern C++ Programs 
** Reverse Polish Notation Interpreter for math computation 

This code is a _reverse polish notation_ ([[https://en.wikipedia.org/wiki/Reverse_Polish_notation][RPN]]) interactive interpreter
for math computation based on a subset of the old [[https://en.wikipedia.org/wiki/Forth_(programming_language)][Forth programming language]].

The RPN notation may look award, but it is very practical and
convenient for manual calculations and implementation of parsers,
evaluators and interpreters. As a result, those RPN features have
inspired some programming languages like:

  + [[https://en.wikipedia.org/wiki/Forth_(programming_language)][Forth programming language]] 

  + [[https://en.wikipedia.org/wiki/PostScript][PostScript]] 

  + [[https://en.wikipedia.org/wiki/Factor_(programming_language)][Factor programming language]]

  + [[https://en.wikipedia.org/wiki/RPL_(programming_language)][RPL - HP Calculators - programming language]]

  + HP ( Hewlett-Packard ) Calculators RPN Calculators such as:
    - [[https://en.wikipedia.org/wiki/HP_48_series][HP 48 series]] - family of scientific and engineering
      calculators which uses RPN notation.
    - [[https://en.wikipedia.org/wiki/HP-12C][HP-12C]] - Financial calculator with RPN notation.

 *Program* 

Source code:
 + [[file:src/sample-programs/rpn-calculator.cpp][file:src/sample-programs/rpn-calculator.cpp]] 

Online Compiler:
 + https://repl.it/repls/WiltedHoneydewClients

Notes:

 + This math evaluator can be extended for implementing some embedded
   scripting language. 

 + Modern C++ Features used:
   - Dynamic Polymorphism, aka subtyping polymorphism.
   - Template metaprogramming for the generic stack container.
   - Smart Pointers for resource management.
   - C++11 Lambdas and std::function
   - C++ exceptions for error handling.

Compile: 

#+BEGIN_SRC sh 
  $ clang++ rpn-calculator.cpp -o rpn-calculator.bin  -Wall -Wextra -std=c++1z -g
#+END_SRC

Running: 

#+BEGIN_SRC sh 
$ ./rpn-calculator.bin 
 EXPR+> 10 20 +
 stack:  30
 EXPR+> 50 - 
 stack:  -20

 EXPR+> 10 *
 stack:  -200
 EXPR+> 300 +
 stack:  100

 stack:  100

 EXPR+> M_PI 2 / sin
 stack:  100 1

 EXPR+> M_PI 2 / cos
 stack:  100 1 6.12323e-17

 EXPR+> M_LN10 exp
 stack:  100 1 6.12323e-17 10

 EXPR+> clear
 stack: 

 EXPR+> 30 dup
 stack:  30 30

 EXPR+> 40 dup
 stack:  30 30 40 40

 EXPR+> clear
 stack: 

 EXPR+> 30 dup *
 stack:  900

 EXPR+> 40 dup *
 stack:  900 1600
 EXPR+> +
 stack:  2500

 EXPR+> sqrt
 stack:  50

 EXPR+> 30 dup * 40 dup * + sqrt
 stack:  50 50
 EXPR+> 

 EXPR+> quit
 Exiting REPL OK.  
#+END_SRC
** Linux/Posix Daemon with syslog 

This sample program is an Posix daemon encapsulated in a class which
runs in background, even when the terminal is closed and logs to
syslog a hypothetical commodity price simulated by a random number.

The program was tested on Linux, however it may work in any other
compatible Posix operating system such as BSD, MacOSX and so on.

Code: 

 + [[file:src/sample-programs/posix-daemon.cpp][file:src/sample-programs/posix-daemon.cpp]]

Modern C++ Features used: 
 + std::functions is used for callback and inject behavior in the
   PosixDaemon class.
 + C++11 auto syntax for functions and variables.
 + Deleted copy constructor and copy-assignment operator.
 + C++11 random number facilities.

Posix and Linux APIs used: 
 + syslog
 + close() system calls
 + fork()
 + umaks()

See: 
 + [[https://en.wikipedia.org/wiki/Daemon_(computing)][Daemon (computing) - Wikipedia]]
 + [[https://en.wikipedia.org/wiki/Fork_(system_call)][Fork (system call) - Wikipedia]]
 + [[https://en.wikipedia.org/wiki/Fork%E2%80%93exec][Forkâ€“exec - Wikipedia]]

 *Parts* 

Class PosixDaemon:
 + Encapsulates the U-nix and Posix daemon.

#+BEGIN_SRC cpp 
  class PosixDaemon{
  public:
       using Action = std::function<bool ()>;

       PosixDaemon(std::string path, std::string pidfile,  Action action)
        : m_path(std::move(path)),
          m_pidfile(std::move(pidfile)),
          m_action(action) { }
       ~PosixDaemon(){}	

       // Disable copy constructor in order to forbid copy 
       PosixDaemon(const PosixDaemon&) = delete;
       // Disable copy-assignment operator to make the class non-copiable.
       PosixDaemon& operator= (const PosixDaemon&) = delete;

       auto run() -> void {
           // Make child process
           pid_t child_pid = fork();
           if(child_pid < 0){
               std::cerr << "Error: failed to fork this process." << "\n";
               return;
           }
           if(child_pid > 0){
              std::cout << "Process ID of child process = " << child_pid << "\n";
              return;
           }
           // Umask file mode
           ::umask(0);
           // Set new session
           pid_t sid = ::setsid();
           if(sid < 0)
                   return;
           //------ Code of Forked Process ---------//
           // Set path of forked process (daemon)
           ::chdir(m_path.c_str());

           // Check whether there is a running process of this program 
           auto fs = std::ifstream(m_pidfile);
           if(fs.good()){
              int pid;
              fs >> pid;
              std::cerr << " [LOG] Kill process of PID = " << pid << "\n";
              ::kill(-pid, SIGTERM);
              fs.close();							
           }
           auto fo = std::ofstream(m_pidfile);
           if(fo.good()){
               int pid = ::getpid();
               std::cerr << "Child PID = " << pid << "\n";
               fo << pid  << std::flush;
           } else {
               std::cerr << " [LOG] Error: could not open PID file " << m_pidfile << "\n";
               return;
           }	
           // Close stdin, stdout and stderr file descriptors.
           close(STDIN_FILENO);
           close(STDOUT_FILENO);
           close(STDERR_FILENO);
           while(m_action());
       }	
   private:
       std::string m_path;
       std::string m_pidfile;
       Action m_action;
       // Action m_onExit;
  };

#+END_SRC

Main function:
 
  + The PosixDaemon's constructor takes the following parameters: the
    path where the daemon process will run, the path to PID file used
    to ensure that only a single instance is running and a lambda
    function which contains the code that will be in the daemon
    process. 

#+BEGIN_SRC cpp 
    std::random_device rdng;	
    auto randomGen = std::bind(
            std::uniform_real_distribution<double>(10.0, 60.0),
            std::default_random_engine(rdng())
            );

    setlogmask (LOG_UPTO (LOG_INFO));
    openlog ("price-service", LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);	

    PosixDaemon daemon{		
        "/",
        "/tmp/price-server.pid",
        [&randomGen](){
          // Action executed in the child process (daemon)
          std::stringstream ss;
          ss << std::setprecision(3) << std::fixed;
          ss << "Price = " << randomGen() << " path = " << getcwd(nullptr, 0) ;
          syslog (LOG_INFO, "%s", ss.str().c_str());
          // 1 seconds delay
          std::this_thread::sleep_for(std::chrono::seconds(1));
          return true;
        }					  
    };

    daemon.run();
#+END_SRC

Compiling: 

#+BEGIN_SRC sh 
 $ clang++ posix-daemon.cpp -o posix-daemon.bin -g -std=c++1z -Wall -Wextra && ./posix-daemon.bin
#+END_SRC

Running: 

 + If there is already a process of this program running, it is killed
   and a new daemon is launched.

#+BEGIN_SRC sh 
 $ ./posix-daemon.bin
 Process ID of child process = 6022
  [LOG] Kill process of PID = 4795
 Child PID = 6022
#+END_SRC

See the daemon output with syslog: 

#+BEGIN_SRC sh 
  $ journalctl -f -t price-service 

  -- Logs begin at Wed 2018-10-03 16:00:02 -03. --
  Nov 16 15:40:39 localhost.localdomain price-service[6022]: Price = 14.357 path = /
  Nov 16 15:40:40 localhost.localdomain price-service[6022]: Price = 22.924 path = /
  Nov 16 15:40:41 localhost.localdomain price-service[6022]: Price = 51.256 path = /
  Nov 16 15:40:42 localhost.localdomain price-service[6022]: Price = 55.588 path = /
  Nov 16 15:40:43 localhost.localdomain price-service[6022]: Price = 43.370 path = /
  Nov 16 15:40:44 localhost.localdomain price-service[6022]: Price = 31.471 path = /
  Nov 16 15:40:45 localhost.localdomain price-service[6022]: Price = 54.759 path = /
   ...  ...  ...  ...  ...  ...  ...  ...  ... 
#+END_SRC

Stop daemon: 

#+BEGIN_SRC sh 
  $ kill 6022
#+END_SRC
