* C++ Interface with .NET (F# Fsharp).

This example shows how to interface a C++ shared library from .NET (F#
language) on Linux.

Objective - Find out how to: 

 - [ ] Pass and get arrays from C++ shared library.

 - [ ] Pass and get C-structs form C++ and C shared library.

 - [ ] Deal with C++ objects.

 - [ ] Pass STL vectors to C++.


Files:

 - [[file:hpc.cpp][file:hpc.cpp]] - C++ source code to build the Linux
   shared library _hpc.so_. 

 - [[file:wrapper.fsx][file:wrapper.fsx]] - F# code that calls the
   shared library _hpc.so_.

 - [[file:Makefile][file:Makefile]] - Makefile build recipe to compile
   all sources.


Note:

 - hpc - stands for high performance computing.


Shared Libraries 

| OS      | Suffix                       | Dynamic Linker | Object Code file Format |
|---------+------------------------------+----------------+-------------------------|
| Linux   | .so                          | ld.so          | ELF                     |
| Mac OSX |                              | dyld           | MacO                    |
| Windows | .dll or .OCX (OLE Libraries) |                |                         |
|         |                              |                |                         |

Linux Tooling 

|         |                  |
|---------+------------------|
| g++     | GCC C++ Compiler |
| nm      |                  |
| ldd     |                  |
| strings |                  |
| strace  |                  |
|         |                  |
|         |                  |


*Notes about C# - Pinvoke* 

 - C# Interface with unmanaged code (native code or shared libraries)

   - Pinvoke - 

   - C++/CLI - Managed C++, A C++ version that compiles to the .NET
     virtual machine. It allows mixing managed and unmaneged C# code.

   - COM (Component Object Model) Objects - Downside: Only available on windows.

 - To interface C++ it is necessary to write a C-interface to the C++
   shared library.

 - Only C-types can be marshalled. In order to to marshall a non
   C-type it is necessary to write C-wrapper or C-interface with
   "extern" and void* pointer.

 - Dllimport

   - EntryPoint

   - CharSet

     - CharSet.Ansi

   - CallingConvention

     - CallingConvention.ThisCall

     - CallingConvention.Cdecl

| C-type | C# type | F# type | Description |
|--------+---------+---------+-------------|
|        |         |         |             |
|        |         |         |             |
|        |         |         |             |




References:

 - [[https://bytes.com/topic/c/insights/921728-calling-c-class-methods-c][Calling C++ class methods from C - C / C++]]

 - [[http://www.thegeekstuff.com/2012/06/linux-shared-libraries][Intro to Linux Shared Libraries (How to Create Shared Libraries)]]

 - [[http://www.bogotobogo.com/cplusplus/libraries.php][C++ Tutorial: Libraries - 2017]]

 - [[http://www.techytalk.info/c-cplusplus-library-programming-on-linux-part-two-dynamic-libraries/][C/C++ library programming on Linux â€“ Part two: Dynamic libraries | TechyTalk]]

 - [[http://blogs.microsoft.co.il/sasha/2014/08/25/marshaling-net-stl-collections-ccli/][Marshaling .NET and STL Collections in C++/CLI | All Your Base Are Belong To Us]]

 - 

 - 

 - 

 - 

