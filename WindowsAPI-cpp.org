#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - Windows API Programming Win32
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 

* Windows API Programming Win32
** Idiosincrasies
 
  + Hungarian Notation
  + Non standard types:
    + LPSTRING, WORD, DWORD, BOOL, LPVOID ... 
  + Different Calling Conventions in the same OS: 
    + ~__stdcall~
    + ~__cdecl~
    + ~__fastcall~
  + Characters
    + 16-bits Unicode wide characters (wchar) instead of 8 bits
      Unicode UTF-8 which is common in most modern Unix-like Oses such
      as Linux, BSD and MacOSX.
  + Many string types
  + Many C-runtimes and entry points.
  + Functions has many parameters which makes them pretty complex. The
    only way to understand the API is to compile and run small
    specific examples.
  + Not all system calls are documented like open source OSes such as
    Linux or BSD. 



** Windows API Main Header Files

Most used headers: 

 + #include <windows.h>
 + #include <wchar.h> - Wide Characters - UTF16 chars 
 + #include <tchar.h>
 + #include <global.h>
 + #include <nsfbd.h>

Other useful header files: 

 + windows.h
   + Basic header file of Windows API
 + WinError.h
   + Error codes and strings
 + tchar.h
   + Provides the macro _T(...) and TEXT(...) for Unicode/ANSI string
     encoding handling.
 + wchar.h
   + Wide Character - UTF16 or wchar
 + global.h
 + ntfsb.h 
 + Winsock2.h
   + Network sockets 
 + Winbase.h
   + Windows types definitions
 + WinUser.h
   + Windows Messages
 + ShellAPI.h
   + Shell API
 + ShFolder.h
   + Folder definitions
 + Commdlg.h
   + Commom Controls (COM based)
 + Dlgs.h
   + Dialog definitions
 + IUnknown.h
   + COM header
 + conio.h
   + Console Input/Output functions - it is heritage grom MSDOS.

** Windows API Runtime Libraries

 + kernel32.dll
   + Low level NTDLL wrappers. 
 + user32.dll
   + User interface primitives used by graphical programs with menus,
     toolboxes, prompts, windows ..
 + shell.dll
   + 
 + gdi32.dll
   + Basic drawing primitives.
 + ole32.dll
 + MSVCRT.DLL
   + Implementation of the C standard library stdlib.
 + advapi.dll
   + Contains functions for system-related tasks such as registry and
     registry handling.
 + ~WS_32.DLL~
   + Winsock2 library contains a socket implementation.
 + Ntdll.dll
   + Interface to Kernel. Not used by Windows programs directly.
 + Wininet.dll
   + Provides high level network APIs, for instance, HttpOpenRequest,
     FtpGetFile ...
** WinAPI C Data Types 
*** General Terminology

 + _Handle_ - Is a unsigned integer number assigned to processes,
   windows, buttons, resources and etc. Actually, it is an opaque
   pointer to some system data structure (Kernel Object), similar to
   Unix's file descriptor pointer. The purpose of using handles or
   opaque pointer is to hide the implementation of those data
   structures allowing implementators to change their inner working
   without disrupting application developers. This approach gives a
   pseudo object-oriented interface to the Windows API. See also:

   + _Note_: A handle can be an _obfuscated pointer_ exposed as an
     integer, void pointer void* (also opaque pointer) or ordinary
     opaque pointer (pointer to a C-struct or class which
     implementation is not exposed). 

 + _Types of Kernel Objects_ (Handle is a numeric value related to the
   pointer to kernel object C-struct). The name "object" comes from
   the idea that it is possible to access the kernel data structure
   pointer by the handle using the Win32 API functions. It works in a
   similar way to classical object oriented programming where the data
   structure and internal representation can only be accessed by the
   class methodos. 
   + Symbolic Link
   + Process
     + A running program, executable. A process has its own address
       space, data, stack and heap.
   + Job
     + Group of processes managed as group. 
   + File
     + Open file or I/O device.
   + Token
     + Security token used by many Win32 functions.
   + Event
     + Synchronization object used for notification.
   + Threads
     + Smallest unit of execution within a process. 
   + Semaphore
   + Mutex
   + Timer
     + Object which provides notification after a certain period is
       elapsed.

References:

  + [[https://en.wikipedia.org/wiki/Opaque_pointer][Opaque pointer - Wikipedia]] - Note: Opaque pointer is also called
    "handle classes", "pimpl idiom", "Compiler-firewall", "d-pointer" in C++.
  + [[https://en.wikipedia.org/wiki/Handle_(computing)][Handle (computing) - Wikipedia]]
  + [[https://stackoverflow.com/questions/2334966/win32-application-arent-so-object-oriented-and-why-there-are-so-many-pointers][c++ - win32 application aren't so object oriented and why there are so many pointers? - Stack Overflow]]
  + [[https://dmitryfrank.com/articles/oop_in_c][Object-oriented techniques in C Dmitry Frank]]
  + [[https://lwn.net/Articles/444910/][Object-oriented design patterns in the kernel, part 1 ]]
*** Hungarian Notation 

|      |              |
|------+--------------|
| n    | short int    |
| H    | Handle       |
| p    | Pointer      |
| fn   | Function     |
| lpsz | Long Pointer |
| LP   | Long Pointer |
|      |              |
*** Common Data Types

| Data Type       | Definition                                  | Description                                                                      |
|-----------------+---------------------------------------------+----------------------------------------------------------------------------------|
| BOOL            | typedef int BOOL                            | Boolean variable true (non zero) or false (zero or 0)                            |
| BYTE            | typedef unsigned char BYTE                  | A byte, 8 bits.                                                                  |
| CCHAR           | typedef char CHAR                           | An 8-bit Windows (ANSI) character.                                               |
|                 |                                             |                                                                                  |
| DWORD           | typedef unsigned long DWORD                 | A 32-bit unsigned integer. The range is 0 through 4294967295 decimal.            |
| DWORDLONG       | typedef unsigned __int64 DWORDLONG          | 64 bits usigned int.                                                             |
| DWORD32         | typedef unsigned int DWORD32                | A 32-bit unsigned integer.                                                       |
| DWORD64         | typedef unsigned __int64 DWORD64            | A 64-bit unsigned integer.                                                       |
|                 |                                             |                                                                                  |
|                 |                                             |                                                                                  |
| FLOAT           | typedef float FLOAT                         | A floating-point variable.                                                       |
|                 |                                             |                                                                                  |
| INT8            | typedef signed char INT8                    | An 8-bit signed integer.                                                         |
| INT16           | typedef signed short INT16                  | A 16-bit signed integer.                                                         |
| INT32           | typedef signed int INT32                    | A 32-bit signed integer. The range is -2147483648 through 2147483647 decimal.    |
| INT64           | typedef signed __int64 INT64                | A 64-bit signed integer.                                                         |
|                 |                                             |                                                                                  |
|                 |                                             |                                                                                  |
| LPBOOL          | typedef BOOL far *LPBOOL;                   | A pointer to a BOOL.                                                             |
| LPBYTE          | typedef BYTE far *LPBYTE                    | A pointer to a BYTE.                                                             |
| LPCSTR, PCSTR   | typedef __nullterminated CONST CHAR *LPCSTR | pointer to a constant null-terminated string of 8-bit Windows (ANSI) characters. |
| LPCVOID         | typedef CONST void *LPCVOID;                | A pointer to a constant of any type.                                             |
| LPCWSTR, PCWSTR | typedef CONST WCHAR *LPCWSTR;               | A pointer to a constant null-terminated string of 16-bit Unicode characters.     |
| LPDWORD         | typedef DWORD *LPDWORD                      | A pointer to a DWORD.                                                            |
| LPSTR           | typedef CHAR *LPSTR;                        | A pointer to a null-terminated string of 8-bit Windows (ANSI) characters.        |
| LPTSTR          |                                             | An LPWSTR if UNICODE is defined, an LPSTR otherwise.                             |
| LPWSTR          | typedef WCHAR *LPWSTR;                      | A pointer to a null-terminated string of 16-bit Unicode characters.              |
| PCHAR           | typedef CHAR *PCHAR;                        | A pointer to a CHAR.                                                             |
|                 |                                             |                                                                                  |
| CHAR            | ANSI Char or char                           |                                                                                  |
| WCHAR           | Wide character 16 bits UTF16                |                                                                                  |
| TCHAR           | -                                           | A WCHAR if UNICODE is defined, a CHAR otherwise.                                 |
| UCHAR           | typedef unsigned char UCHAR;                | An unsigned CHAR.                                                                |
|                 |                                             |                                                                                  |
| WPARAM          | typedef UINT_PTR WPARAM;                    | A message parameter.                                                             |
|                 |                                             |                                                                                  |
|                 |                                             |                                                                                  |
*** Other data types

|           |                                                    |
|-----------+----------------------------------------------------|
|           |                                                    |
| HANDLE    | 32 bits integer used as a handle                   |
| HDC       | Handle to device context                           |
| HWND      | 32-bit unsigned integer used as handle to a window |
| LONG      |                                                    |
| LPARAM    |                                                    |
| LPSTR     |                                                    |
| LPVOID    | Generic pointer similar to void*                   |
| LRESULT   |                                                    |
| UINT      | Unsigned integer                                   |
| WCHAR     | 16-bit Unicode character or Wide-Character         |
| WPARAM    |                                                    |
| HINSTANCE |                                                    |



*** References 

General:

 + [[https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx][Windows Data Types (Windows)]]

 + [[https://msdn.microsoft.com/en-us/library/windows/desktop/dd374131(v=vs.85).aspx][Windows Data Types for Strings (Windows)]]

Windows Programming:

 + [[http://www.tenouk.com/ModuleC.html][The Windows OS Win32 programming tutorial: notes, references and C/Win32 program examples on data type, system error, notation, handles and objects]]

 + [[https://scs.senecac.on.ca/~chris.szalwinski/archives/gam666.073/content/windo.html][Seneca | Computer Studies | Introduction to Game Programming]]

 + [[https://www.codeproject.com/Articles/3004/The-Complete-Guide-to-C-Strings-Part-II-String-Wra][The Complete Guide to C++ Strings, Part II - String Wrapper Classes - CodeProject]]

** SAL - Source Code Annotation Language 

Annotation such as ~__In__~ or ~__Out__~ commonly found on Windows API
documetation, as shown in the code below, is called _SAL - Source Code_
_Annotation language_. In a C code, it is hard to figure out which
parameters are used to return values or are read-only used only as
input. The SAL solves this problem by declaring which function
parameters are input, read-only and which parameters are output.

#+BEGIN_QUOTE
  SAL is the Microsoft source code annotation language.  By using source
  code annotations, you can make the intent behind your code
  explicit. These annotations also enable automated static analysis
  tools to analyze your code more accurately, with significantly fewer
  false positives and false negatives.
#+END_QUOTE

 -- http://msdn.microsoft.com/en-us/library/hh916383.aspx

#+BEGIN_SRC cpp 
   HANDLE CreateRemoteThreadEx(
     __in__ HANDLE                       hProcess,
     __in__ LPSECURITY_ATTRIBUTES        lpThreadAttributes,
     __in__ SIZE_T                       dwStackSize,
     __in__ LPTHREAD_START_ROUTINE       lpStartAddress,
     __in__ LPVOID                       lpParameter,
     __in__ DWORD                        dwCreationFlags,
     __in__ LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
     __out__ LPDWORD                     lpThreadId
   );

   DWORD WINAPI FormatMessage(
      _In_     DWORD dwFlags,
      _In_opt_ LPCVOID lpSource,
      _In_     DWORD dwMessageId,
      _In_     DWORD dwLanguageId,
      _Out_    LPTSTR lpBuffer,
      _In_     DWORD nSize,
      _In_opt_ va_list *Arguments
   );

#+END_SRC

To allow those annotations in the source code, it is necessary to add
the header _#include <sal.h>_. This SAL annotation is not standard among
C++ compilers and is not defined by any C or C++ standard, as a
result, the annotations only works on MSVC - Microsoft Visual C++
Compiler. This feature can be implemented in a portable way with
macros.

SAL Fundamentals: 

| SAL Annotatio | Description                                                                                |
|---------------+--------------------------------------------------------------------------------------------|
| ~_In_~          | Input parameter - read only argument no modified inside the by the function.               |
|               | Generally has the const qualifier such as const char*.                                     |
| ~_In_Out_~      | Optional input parameter, can be ignored by passing a null pointer.                        |
|               |                                                                                            |
| ~_Out_~         | Output paramenter - Argument is written by the called function. It is generally a pointer. |
|               |                                                                                            |
| ~_Out_opt_~     | Optional output parameter. Can be ignored by setting it to null pointer.                   |
|               |                                                                                            |
| ~_Inout_~       | Data is passed to the function and pontentially modified.                                  |
|               |                                                                                            |
| ~_Outptr_~      | Output to caller. The value returned by written to the parameter is pointer.               |
|               |                                                                                            |
| ~_Outptr_opt_~  | Optional output pointer to caller, can be ignored by passing NULL pointer.                 |
|               |                                                                                            |

Note: if the parameter is not annotated with ~_opt_~ the caller is not
supposed to pass a NULL pointer, otherwise the parameter must be
annotated with ~_In_opt_~, ~_Out_opt_~ and etc.

Usage example: 

 - This annotation enhances the readability by telling reader which
   parameters are input and which parameters are output or used for
   returning values.

File: sal1.cpp 

#+BEGIN_SRC cpp
  #include <sal.h>     // Microsft's Source Code Annotation Language 
  #include <iostream>

  // Computes elementwise product of two vectors 
  void vector_element_product(
        _In_ size_t size,
        _In_ const double xs[],
        _In_ const double ys[],
        _Out_      double zs[]
        ){
        for(int i = 0; i < size; i++){
            zs[i] = xs[i] * ys[i];
        }
  }

  void showArray(size_t size, double xs[]){
    std::cout << "(" << size << ")[ ";
    for(int i = 0; i < size; i++){
      std::cout << xs[i] << " ";
    }
    std::cout << "] ";
  }

  int main(){
    double xs [] = {4, 5, 6, 10};
    double ys [] = {4, 10, 5, 25};
    double zs [4];
    vector_element_product(4, xs, ys, zs);
    std::cout << "xs = "; showArray(4, xs); std::cout << "\n";
    std::cout << "ys = "; showArray(4, ys); std::cout << "\n";
    std::cout << "zs = "; showArray(4, zs); std::cout << "\n";
    
  }
#+END_SRC

Compiling: 

 - MSVC (CL.EXE):

#+BEGIN_SRC sh 
   $ cl.exe sal1.cpp /nologo /Fe:sal1-a.exe && sal1-a.exe
   sal1.cpp
   C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.12.25827\include\xlocale(313): warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc
   xs = (4)[ 4 5 6 10 ]
   ys = (4)[ 4 10 5 25 ]
   zs = (4)[ 16 50 30 250 ]
#+END_SRC

 - Mingw/G++

#+BEGIN_SRC sh
   $ g++ sal1.cpp -o sal1-b.exe -std=c++11 && sal1-b.exe
   xs = (4)[ 4 5 6 10 ]
   ys = (4)[ 4 10 5 25 ]
   zs = (4)[ 16 50 30 250 ]
#+END_SRC


Note: It doesn't work on Linux or other OSes. But it can be
implemented with header files.

 *Open Source SAL Implementation:*

 + Source-code annotation language (SAL) compatibility header -
   <https://github.com/nemequ/salieri> 

   + "Salieri is a header which provides definitions for Microsoft's
     source-code annotation language (SAL). Simply drop the header
     into your code and use it instead of including <sal.h> directly,
     and you can use SAL annotations even if you want your program to
     be portable to compilers which don't support it."

   + "SAL provides lots of annotations you can use to describe the
     behavior of your program. There is a Best Practices and Examples
     (SAL) page on MSDN if you want to get a very quick idea of how it
     works, but the basic idea is that you end up with something like
     this:" 

 *References:*

  + [[https://docs.microsoft.com/en-us/visualstudio/code-quality/understanding-sal][Understanding SAL - Visual Studio | Microsoft Docs]]
  + [[https://msdn.microsoft.com/en-us/library/hh916382.aspx][Annotating Function Parameters and Return Values]]
  + [[https://msdn.microsoft.com/en-us/library/ms182032.aspx?f=255&MSPPError=-2147217396][Using SAL Annotations to Reduce C-C++ Code Defects]]
  + [[https://msdn.microsoft.com/en-us/library/jj159525.aspx][Best Practices and Examples (SAL)]]
  + [[https://stackoverflow.com/questions/11457328/what-is-in-in-c][What is _In_ in C++? - Stack Overflow]]
  + [[https://ariccio.com/2015/04/02/preventing-bugs-and-improving-code-quality-with-microsoft-sal-part-2-custom-preconditions-for-structs-objects/][Preventing bugs, and improving code quality with Microsoft SAL (Part 2, custom preconditions for structs & objects) | Alexander Riccio]]
  + SQLite Source Code Annotated with SAL -
    https://github.com/ariccio/SQLite-Test-SAL and [[https://ariccio.com/2015/05/10/using-sal-in-the-sqlite-api/][Using SAL in the SQLite API | Alexander Riccio]]
  + [[https://www.osr.com/blog/2015/02/23/sal-annotations-dont-hate-im-beautiful/][SAL Annotations: Don’t Hate Me Because I’m Beautiful – OSR]]

** Books  

Books: 

  + Mark Russinovitch et al - *Windows Internals* - 5th edition -
    Microsft Press 2000.

  + *Windows Operating System Internals Curriculum*  Development Kit,
    developed by David A. Solomon and  Mark E. Russinovich with
    Andreas Polze.

  + Penny Orwick and Guy Smith. *Developing Drivers with Windows Driver Foundation*. 

  + *Windows Research Kernel* Sources by Microsoft - only allowed to be
    used by licensed academic institutions.

  + Charles Petzold: *Windows Programming* - Microsoft Press.

  + Visual Basic - *Programmer’s Guide to the Win32 API*, The
    Authoritative Solution by Dan Appleman

  + Johnson M. Hart, *Win32 System Programming: A Windows® 2000* -
    *Application Developer's Guide*, 2nd Edition, Addison -
    Wesley, 2000.
    + Note: This book discusses select Windows programming problems
      and addresses  the problem of portable programming by comparing
      Windows and Unixapproaches.

  + Jeffrey Richter, *Programming Applications for Microsoft Windows*,
    4th Edition, Microsoft Press, September 1999.
    + Note: This book provides a comprehensive discussion of the
      Windows API suggested reading. 
