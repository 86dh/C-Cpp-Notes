#+INCLUDE: theme/style.org
#+TITLE: CPP / C++ - Bookmarks 
#+DESCRIPTION: cpp c++ code examples, demonstrations, design pattern and integration.
#+STARTUP: content 

 - [[wiki:index][Index]]

* Bookmarks 
** Code Standards and guidelines 

 *Software Design Guidelines and Ideas*

Design:

 + [[https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_4.html][Taligent's Design Guidelines]]

 + [[http://scottmeyers.blogspot.com/2013/01/effective-c11-content-and-status.html][Scott Meyers - Effective C++11: Contents and Status]]

 + [[http://www.drdobbs.com/cpp/how-non-member-functions-improve-encapsu/184401197][Scott Meyers - How Non-Member Functions Improve Encapsulation]]

 + [[https://www.strchr.com/software_interface][Software Interface Design Tips]]

 + [[https://web.archive.org/web/20050413215843/http://www.oonumerics.org:80/tmpw00/kuehl.html][STL and OO Don't Easily Mix]] 

 + [[http://stepanovpapers.com/notes.pdf][Alexander Stepanov - STL/SGI Notes]]

 + [[https://cppdepend.com/blog/?p=179][Lessons to learn from the old well implemented games: Prince of Persia && Doom3. – CppDepend Blog]]

 + [[http://www.codersnotes.com/notes/a-constructive-look-at-templeos/][A constructive look at temple-OS]]

Exception and Error Handling: 

 + ISO-CPP [[https://isocpp.org/wiki/faq/exceptions][Exceptions and Error Handling, C++ FAQ]]
   + Great coverage about error handling, error recovery, performance
     considerations about exceptions and their benefits and drawbacks
     as well.

 + [[https://cppdepend.com/blog/?p=311][Exceptions is one of the controversy mechanism in C++. Should I use them? – CppDepend Blog]]
   + Provides insights of widely known C++ experts and gurus about
     exceptions and useful considerations.

 + [[http://www.acodersjourney.com/2016/08/top-15-c-exception-handling-mistakes-avoid/][Top 15 C++ Exception handling mistakes and how to avoid them. - A CODER'S JOURNEY]]

Fail-fast approach: 

 + [[https://www.codeproject.com/Articles/1138445/Introduction-to-the-Fail-Fast-Principle-in-Softwar][Introduction to the 'Fail Fast!' Principle in Software Development - CodeProject]]
 + [[https://enterprisecraftsmanship.com/2015/09/15/fail-fast-principle/][Fail Fast principle - Enterprise Craftsmanship]]
 + [[http://ithare.com/unchecked-exceptions-for-c/][Unchecked Exceptions for C++ - IT Hare on Soft.ware]]
 + [[http://joeduffyblog.com/2016/02/07/the-error-model/][Joe Duffy - The Error Model]]
 + [[http://wiki.c2.com/?FailFast][Fail Fast]]


 *Coding format and standard guidelines*

 + [[https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#main][ISO C++ Core Guidelines]] - "This is a set of core guidelines for
   modern C++, C++17, C++14, and C++11, taking likely future
   enhancements and ISO Technical Specifications (TSs) into
   account. The aim is to help C++ programmers to write simpler, more
   efficient, more maintainable code."

   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors-assignments-and-desctructors][C++ Core Guidelines: The Rule of Zero, Five, or Six - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-when-you-can-t-throw-an-exception][C++ Core Guidelines: finally in C++ - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors][C++ Core Guidelines: Constructors - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-more-rules-to-concurrency-and-parallelism][C++ Core Guidelines: More Rules to Concurrency and Parallelism - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-concurrency-and-lock-free-programming][C++ Core Guidelines: Concurrency and lock-free Programming - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-rules-to-error-handling][C++ Core Guidelines: Rules for Error Handling - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-type-erasure][C++ Core Guidelines: Type Erasure - ModernesCpp.com]]

 + [[https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code][Using C++ in Mozilla code - Mozilla | MDN]] 

 + [[https://wiki.openstack.org/wiki/CppCodingStandards#Using_Namespaces_Properly][CppCodingStandards - OpenStack]] - "Note that coding standards and
   guidelines will never be perfect and that not everyone will agree
   with every guideline or naming convention. The purpose of the
   guidelines and standards are to maintain consistency in the source
   code." 

 + [[https://google.github.io/styleguide/cppguide.html][Google C++ Style Guide]]

 + [[http://drake.mit.edu/styleguide/cppguide.html][Google C++ Style Guide for Drake]]

 + [[https://developer.lsst.io/cpp/style.html][DM C++ Style Guide — LSST DM Developer Guide Current documentation]]

 + [[https://users.ece.cmu.edu/~eno/coding/CppCodingStandard.html][C++ Coding Standard]]

 + [[https://juce.com/discover/stories/coding-standards][Coding Standards | JUCE]] - Juce code standard and its rationale and
   motivation.

 + [[https://raw.githubusercontent.com/wiki/bloomberg/bde/CodingStandards.pdf][Bloomberg BDE Code Standard]]
   + <https://web.archive.org/web/20190115163005/https://raw.githubusercontent.com/wiki/bloomberg/bde/CodingStandards.pdf>

 *Embedded Systems Coding Standards* 

 + *MISRA-C:2004 Guidelines for the use of the C language in critical systems*
   + <https://web.archive.org/web/20170517013604/http://caxapa.ru:80/thumbs/468328/misra-c-2004.pdf>

 + *Guidelines for the use of the C++14 language in critical and safety-related systems*
   + <https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf>

 + *Joint Strike Fighter Air Vehicle C++ Coding Standards* - Document Number 2RDU00001 Rev C  - 2005
   + 2004 - <http://www.stroustrup.com/JSF-AV-rules.pdf>
   + 2005 - <https://web.archive.org/web/20070417151407/http://www.research.att.com/~bs/JSF-AV-rules.pdf>
   + <http://www.jsf.mil/downloads/down_documentation.htm>

 + *C++ in Safety-Critical Applications: The JSF++ Coding Standard*
   + <http://micro-os-plus.github.io/develop/coding-style/>
   + <http://www.phaedsys.org/principals/programmingresearch/prdata/SSE-Session-4_Stroustrup-Carroll.pdf>

** Tooling 
*** Online Tools

 *Online Compilers*

   + https://coliru.stacked-crooked.com/
     + The only online compiler which supports C++17 and the experimental
       C++20. 

   + http://rextester.com/
     + The main selling point of this online tool is that it allows to
       save code snippets and run them again. 
     + Online C++ compiler, provides GCC, CLANG and Visual Studio
       Compiler, also known as MSVC (VC++ - Visual C++).

   + https://repl.it/languages/cpp11
     + Oline compiler (GCC / C++11 only) with REPL support.

   + https://wandbox.org/

 *Compiler Explorer*

   + https://godbolt.org/
     * Compiler explorer - allows to explore the assembly generated by a
       wide variety of compilers, including, GNU GCC, Clang, MSVC and so on.
   + https://demangler.com/
     * Symbol demangler for MSVC and GCC.

 *Template expasion visualizer*

   + http://metashell.org/index.html

 *Regex Testers* 

 + https://myregextester.com/index.php

 + [[https://regexr.com/][RegExr: Learn, Build, & Test RegEx]]

 + https://regex101.com/

 *UML Ascii/Text Drawing Tools*
   * [[http://asciiflow.com/][ASCIIFlow Infinity]] (Pick-and place)
     * Allows to draw Ascii UML box diagrams by dragging and dropping
       like in MS-Paint.

   * http://stable.ascii-flow.appspot.com/ (Pick-and place)

   * https://textik.com/ (Pick-and place)

   * https://www.planttext.com/ (Latex-like)

   * https://textart.io/sequence  (Latex-like)
     * UML Sequence Diagram drawing tool. The user writes the commands
       and the tool draws the diagram. It adopts an approach similar
       to Tex/Latex.


 * *MISC*
   + [[https://www.google.ca/search?q=float%20point%20online][float point online - Google Search]]
   + [[https://www.h-schmidt.net/FloatConverter/IEEE754.html][IEEE-754 Floating Point Converter]]
   + [[http://weitz.de/ieee/][IEEE 754 Calculator]]
*** Documentation Generator 

  + [[http://www.doxygen.nl/][Doxygen]] 
    + Doxygen builds documentatiuon in many formats including text and
      html by extracting documentation code from comments.
    + Example of documentation generated with Doxygen:
      + https://docs.wxwidgets.org/stable/
      + http://assimp.sourceforge.net/lib_html/index.html
      + [[http://www.wangafu.net/~nickm/libevent-2.1/doxygen/html/dir_db160b4728e6067cf5f9cc14ec42c79d.html][libEvent]]

*** Windows Development

  + *SysInternals* - A collection of debugging tools which allows to
    introspect processes and get informations such as loaded DLLs,
    files opened by a process, network activity and so on.
    + https://docs.microsoft.com/en-us/sysinternals/
    + http://www.sysinternals.com/
    + https://docs.microsoft.com/en-us/sysinternals/downloads/process-utilities

  + *Sysinternals* / dumpbin
    + Show informations Windows native executables and shared
      libraries, specifically about PE32 object code. For instance, it
      can show symbols exported by a DLL, DLLs used by an executable
      and functions imported by the executable from DLLs.

  + *Sysinternals* / procmon
    + Process mionitor

  + *Sysinternals* / procexp
    + Process explorer

  + *Sysinternals* / Winobj
    + WinObj accesses and display information on the NT Object
      Manager's name space

  + *Dependency Walker* - Tool which scans executable dependencies such
    as imported DLLs.
    + http://www.dependencywalker.com/ 

*** U-nix and Linux Development 

The following tools are not only useful for debugging, diagnosing and
assisting development, they are also useful for reverse engineering. 

Note: 
 + object files: executables and shared libraries (*.so files),
   generally with ELF format.

| Tool / Command            | Description                                                  |
|---------------------------+--------------------------------------------------------------|
| file                      | identify file type by its header bytes                       |
| nm                        | list symbols exported by executables                         |
| c++filt                   | demangles C++ symbols                                        |
| objdump                   | show detailed information about object files                 |
| readlef                   | show information about ELF object files.                     |
| strings                   | show human readable characters in the executable             |
| strip                     | discard symbols                                              |
| ptrace and strace         | trace system calls                                           |
| gdb                       | GNU Debugger                                                 |
| lsof                      | Check which files a process is using                         |
| Directory /etc/proc/<pid> | Allows to check which files and resources a process is using |
|                           |                                                              |
|---------------------------+--------------------------------------------------------------|

*** Assembly for x86 and x64 

 + https://godbolt.org/
   + Compiler explorer - allows to explore the assembly generated by a
     wide variety of compilers, including, GNU GCC, Clang, MSVC and so
     on.

 + [[https://github.com/zerosum0x0/WinREPL][WinREPL]] - Assembly REPL - interactive shell like Python or IPython
   for Windows.
   + Precompile binaries: https://github.com/zerosum0x0/WinREPL/releases/

 + [[https://github.com/yrp604/rappel][Rappel]] - A linux-based assembly REPL for x86, amd64, armv7, and armv8.
   + [[https://news.ycombinator.com/item?id=11214868][Rappel: A REPL for x86, amd64, and armv7 | Hacker News]]

 + [[https://www.radare.org/r/][radare]] Framework - A suite of reversing enegineering tools.
   + Features:
     * Disassemble (and assemble for) many different architectures
     * Debug with local native and remote debuggers (gdb, rap, webui, r2pipe, winedbg, windbg)
     * Run on Linux, *BSD, Windows, OSX, Android, iOS, Solaris and Haiku
     * Perform forensics on filesystems and data carving
     * Be scripted in Python, Javascript, Go and more
     * Support collaborative analysis using the embedded webserver
     * Visualize data structures of several file types
     * Patch programs to uncover new features or fix vulnerabilities
     * Use powerful analysis capabilities to speed up reversing
     * Aid in software exploitation

 + [[http://www.unicorn-engine.org/][Unicorn]] - CPU emulator Framework
   + https://github.com/unicorn-engine/unicorn  

*** Memory Leak Debuggers 

 + [[http://www.valgrind.org/][Valgrind]]
   + Most well known memory leak debugger for *Nix
     systems. Unfortunately, it doesn't work on Windows.
   + [[https://en.wikipedia.org/wiki/Valgrind][Valgrind - Wikipedia]]
   + [[http://doc.qt.io/qtcreator/creator-valgrind-overview.html][Using Valgrind Code Analysis Tools | Qt Creator Manual]]

 + [[http://drmemory.org/][Dr. Memory Memory Debugger for Windows and Linux]]
   + "Dr. Memory is a memory monitoring tool capable of identifying
     memory-related programming errors such as accesses of
     uninitialized memory, accesses to unaddressable memory (including
     outside of allocated heap units and heap underflow and overflow),
     accesses to freed memory, double frees, memory leaks, and (on
     Windows) handle leaks, GDI API usage errors, and accesses to
     un-reserved thread local storage slots." 

See also: 
 + [[https://stackoverflow.com/questions/413477/is-there-a-good-valgrind-substitute-for-windows][c - Is there a good Valgrind substitute for Windows? - Stack Overflow]]

*** Emacs as a C++ IDE 

Misc: 

 + [[https://nilsdeppe.com/posts/emacs-c++-ide2][Using Emacs as a C++ IDE - Take 2]]
 + [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Emacs as a C++ IDE]]
 + [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][Using Emacs as a C++ IDE · (or emacs]]
 + [[https://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]]
 + [[https://www.reddit.com/r/emacs/comments/7wzstc/emacs_as_a_c_ide_martin_sosics_blog/][Emacs as a C++ IDE - Martin Sosic's blog : emacs]]

Using Emacs a GDB Front-end (aka user interface): 

 + [[https://www.cs.bu.edu/teaching/tool/emacs/programming/][Using Emacs for Programming]]
** Standard Proposals  

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1040r0.html#motivation][p1040R0: std::embed]]

   + _Brief_: Accessing program-external resources at compile-time and
     making them available to the developer.

   + _Abstract_: This paper introduces a function std::embed in the
     <embed> header for pulling resources at compile-time into your
     program and optionally guaranteeing that they are stored in the
     resulting program in an implementation-defined manner.

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0707r0.pdf][p0707r0]] Metaclasses

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1028r0.pdf][P1028R0]] status_code and standard error object for P0709
   zero-overhead deterministic exceptions.

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0037r5.html][p0037r5]] - Fixed-point arithmetics using integral types.

** Books 
*** C++ Programming Language 

+ Bruce Eckel. *Thinking in C++*. 1995
  + Notes: Despite being an old book, it has a step-by-step coverage
    of C++ main concepts and some design patterns.

+ Andrew Koenig and Barbara E. Moo. *Accelerated C++: Practical Programming by Example*

+ Andrei Alexandrescu. *Modern C++ Design: Generic Programming and*
  *Design Patterns Applied 1st Edition*. 2001 
  + Notes: Provides a comprehensive and broad coverage of C++
    generic/template metaprogramming.
  + Link: [[https://www.amazon.com/Modern-Design-Generic-Programming-Patterns/dp/0201704315][Amazon]]

+ Scott Meyers. *Effective C++ Third Edition, 55 Specific Ways to Improve Your*
  *Programs and Designs* 

+ Bjarne Stroustrup. *Tour of C++ second edition*

 *More Advanced Books:*

+ Martin Reddy. *API Design for C++* 
  + Table of contents: http://www.apibook.com/blog/contents
  + Amazon: https://www.amazon.com/API-Design-C-Martin-Reddy/dp/0123850037
  + Note: Covers design patters, API Versioning, Plugins, Scripts, ...

*** System Programming - Posix / Linux and U**N-ix

Note: Most of those books use C because operating system services and
low level system libraries are exposed in *C language* and most used
operating systems nowadays were written in C. In addition, C++ still
doesn't have a stable and standardized ABI (Application Binary
Interface like C).

Books about Linux C-APIs are not only useful for this operating
system, but also for other Unix-based OSes such as MacOSx, BSD,
Android (Based on Linux), QNX Rtos and so on.

 * Michael Kerrisk. *The Linux Programming Interface* - 2010 - ISBN
   978-1-59327-220-3
   + Coverage: File I/O, Processes, Memory Allocation, Daemons, Shared
     Libraries, Interprocess communication, System V Message Queues,
     System V Semaphores, Memory Mapping, TCP/IP Sockets,
     Unix-Sockets, Terminals and System Calls.
   + Web site:  http://man7.org/tlpi/
   + Wikipedia: [[https://en.wikipedia.org/wiki/The_Linux_Programming_Interface][The Linux Programming Interface - Wikipedia]]
   + Chapters:  http://man7.org/tlpi/toc-short.html
   + [[https://www.amazon.com/Linux-Programming-Interface-System-Handbook/dp/1593272200][Amazon Link]]

 * Kurt Wall et al. *Linux Programming Unleashed* - 1999
   + Covers low level system calls; process control;
     thread-synchronization primitives; TCP/IP sockets and network;
     shared memory and XWidows system/Xlib user interface.
   + The most used language in the book is C, although there are some
     examples in C++.
   + [[https://www.amazon.com/Linux-Programming-Unleashed-Kurt-Wall/dp/0672320215][Amazon link to second edition]]

*** System Programming - Microsft Windows NT

  + Mark Russinovitch et al - *Windows Internals* - 5th edition -
    Microsft Press 2000. 
    + Coverage: Windows API, Virtual Memory, Kernel Mode X User Mode,
      Terminal, Object and Handles, Registry, Sysinternals Tools,
      Kernel System Components, System Calls, Windows Sockets
      (Winsock), NetBIOS, NTFS file system.
    + [[https://www.amazon.com/Windows-Internals-Part-Developer-Reference/dp/0735648735][Amazon Link]] (6th edition)


  + Charles Petzold - *Windows Programming* - Microsoft Press - 5th
    edition - 1998
    + Coverage: Win32 API, windows graphical stack, GDI (Graphics
      Device Interface), Dynamic Linked Libraries DLLs. 
    + [[https://www.amazon.com/Programming-Windows%25C2%25AE-Fifth-Developer-Reference/dp/157231995X][Amazon Link]]

  + Johnson M. Hart, *Win32 System Programming: A Windows® 2000* -
    *Application Developer's Guide*, 2nd Edition, Addison -
    Wesley, 2000.
    + Note: This book discusses select Windows programming problems
      and addresses  the problem of portable programming by comparing
      Windows and Unixapproaches.
    + [[https://www.amazon.com/Win32-System-Programming-Application-Developers/dp/0201703106][Amazon Link]]

  + Jeffrey Richter, *Programming Applications for Microsoft Windows*,
    4th Edition, Microsoft Press, September 1999.
    + Note: This book provides a comprehensive discussion of the
      Windows API suggested reading.

  + Visual Basic - *Programmer’s Guide to the Win32 API*, The
    Authoritative Solution by Dan Appleman

  + Don Box - *Essential COM* 1st edition - 1998 - Addison-Wesley
    Professional - ISBN 978-0201634464
    + Comprehensive coverage of COM - Component Object Model. 
    + [[https://www.amazon.com/Essential-COM-Don-Box/dp/0201634465][Amazon Link]]
** Libraries 
*** Boost Framework (Boost Libraries)
**** Math 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/index.html][Math Toolkit 2.8.0 - 1.69.0]]
   + Brief: The math toolkit provides the following facilities:
     + Floating Point Utilities
     + Specific Width Floating Point Types
     + *Statistical Distributions* (Gaussian, Poisson, Bernouli...)
     + Mathematical Special Function
     + Root Finding and Function
     + Minimisations, Polynomials and Rational Functions
     + Interpolation
     + Numerical Integration and Differentiation
     + Quaternions and Octonions.   
   + [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/special.html][Chapter 6. Special Functions - 1.69.0]]
   + [[https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/dist.html][Chapter 5. Statistical Distributions and Functions - 1.69.0]]

 + [[https://www.boost.org/doc/libs/1_69_0/libs/numeric/ublas/][uBLAS]] (Linear algebra facilities, linear systems, vector matrices
   and so on.)
   + Brief: "uBLAS provides matrix and vector classes as well as basic
     linear algebra routines. Several dense, packed and sparse storage
     schemes are supported."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/numeric/odeint/doc/html/boost_numeric_odeint/getting_started/overview.html][Boost Odeint]]
   + Library for ordinary differential equations - initial value
     problems.

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/date_time.html][Date Time]]
   + Brief: "A set of date-time libraries based on generic programming concepts."
   + Descr: "The motivation for this library comes from working with
     and helping build several date-time libraries on several
     projects. Date-time libraries provide fundamental infrastructure
     for most development projects. However, most of them have
     limitations in their ability to calculate, format, convert, or
     perform some other functionality. For example, most libraries do
     not correctly handle leap seconds, provide concepts such as
     infinity, or provide the ability to use high resolution or
     network time sources. These libraries also tend to be rigid in
     their representation of dates and times. Thus customized policies
     for a project or subproject are not possible."

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/chrono.html][Chapter 7. Boost.Chrono 2.0.8 - 1.69.0]] (Time interval computation,
   already in C++11, but it is a good documentation for the STL
   library.) 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/accumulators.html][Accumulators]]
   + Summary: Incremental statistics.
   + Descr: "Boost.Accumulators is both a library for incremental statistical
     computation as well as an extensible framework for incremental
     calculation in general. The library deals primarily with the
     concept of an accumulator, which is a primitive computational
     entity that accepts data one sample at a time and maintains some
     internal state. These accumulators may offload some of their
     computations on other accumulators, on which they
     depend. Accumulators are grouped within an accumulator
     set. Boost.Accumulators resolves the inter-dependencies between
     accumulators in a set and ensures that accumulators are processed
     in the proper order."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/multiprecision/doc/html/boost_multiprecision/intro.html][Boost Multiprecisions]]
   + Brief: "The Multiprecision Library provides integer, rational,
     floating-point, and complex types in C++ that have more range and
     precision than C++'s ordinary built-in types. The big number
     types in Multiprecision can be used with a wide selection of
     basic mathematical operations, elementary transcendental
     functions as well as the functions in Boost.Math. The
     Multiprecision types can also interoperate with the built-in
     types in C++ using clearly defined conversion rules. This allows
     Boost.Multiprecision to be used for all kinds of mathematical
     calculations involving integer, rational and floating-point types
     requiring extended range and precision."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/units/][Units]]
   + Brief: "Zero-overhead dimensional analysis and unit/quantity
     manipulation and conversion."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/multi_array/doc/user.html][The Boost Multidimensional Array Library (Boost.MultiArray) - 1.69.0]]
   + Brief: Multidimensional arrays, aka tensors. 

**** Parallel Computing 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/mpi.html][Chapter 26. Boost.MPI - 1.69.0]]
   + Brief: "Boost.MPI is a library for message passing in high-performance
     parallel applications. A Boost.MPI program is one or more
     processes that can communicate either via sending and receiving
     individual messages (point-to-point communication) or by
     coordinating as a group (collective communication). Unlike
     communication in threaded environments or using a shared-memory
     library, Boost.MPI processes can be spread across many different
     machines, possibly with different operating systems and
     underlying architectures."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/compute/doc/html/index.html][Chapter 1. Boost.Compute - 1.69.0]]
   + Brief: "The Boost Compute library provides a C++ interface to
     multi-core CPU and GPGPU computing platforms based on OpenCL." 
 
**** String Utilities 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_lexical_cast.html][Chapter 21. Boost.Lexical_Cast 1.0 - 1.69.0]]

 + [[https://www.boost.org/doc/libs/1_69_0/libs/format/][The Boost Format library - 1.69.0]]
   + The format library provides a class for formatting arguments
     according to a format-string, as does printf, but with two major
     differences : format sends the arguments to an internal stream,
     and so is entirely type-safe and naturally supports all
     user-defined types. The ellipsis (...) can not be used correctly
     in the strongly typed context of format, and thus the function
     call with arbitrary arguments is replaced by successive calls to
     an argument feeding operator%

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/string_algo.html][String algo]]
   + Brief: "The String Algorithm Library provides a generic
     implementation of string-related algorithms which are missing in
     STL. It is an extension to the algorithms library of STL and it
     includes trimming, case conversion, predicates and find/replace
     functions. All of them come in different variants so it is easier
     to choose the best fit for a particular need." 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/spirit/][Boost Spirit]]
   + Brief: Framework for building parsers.

 + [[https://www.boost.org/doc/libs/1_69_0/libs/tokenizer/][Tokenizer]]
   + Brief: "Break of a string or other character sequence into a
     series of tokens."

**** Template Metaprogramming facilities 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/utility/operators.htm][Boost Operators]]

 + [[https://www.boost.org/doc/libs/1_69_0/libs/range/][Range]] [BEST]
   + Descr: "A new infrastructure for generic algorithms that builds
     on top of the new iterator concepts."
   + Note: Maybe the future replacement for C++ classical iterators.

 + [[https://www.boost.org/doc/libs/1_69_0/libs/hof/doc/html/doc/src/index.html][Boost.HigherOrderFunctions]] (aka Boost.Hof)
   + Brief: Provides many higher order functions. 
   + Descr: HigherOrderFunctions is a header-only C++11/C++14 library that
     provides utilities for functions and function objects, which can
     solve many problems with much simpler constructs than whats
     traditionally been done with metaprogramming.

 + [[https://www.boost.org/doc/libs/1_69_0/libs/mp11/doc/html/mp11.html][Boost.Mp11: A C++11 metaprogramming library - 1.69.0]]

 + [[https://www.boost.org/doc/libs/1_69_0/libs/fusion/doc/html/fusion/preface.html][Boost Fusion]]

 + [[https://www.boost.org/doc/libs/1_69_0/libs/hana/doc/html/index.html][Boost.Hana]]
   + Brief: "Hana is a header-only library for C++ metaprogramming
     suited for computations on both types and values."
   + Descr: "The functionality it provides is a superset of what is
     provided by the well established Boost.MPL and Boost.Fusion
     libraries. By leveraging C++11/14 implementation techniques and
     idioms, Hana boasts faster compilation times and runtime
     performance on par or better than previous metaprogramming
     libraries, while noticeably increasing the level of
     expressiveness in the process. Hana is easy to extend in a ad-hoc
     manner and it provides out-of-the-box inter-operation with
     Boost.Fusion, Boost.MPL and the standard library." 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/concept_check/][Concept check]]
   + Descr: "Tools for generic programming."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/proto/][Proto]]
   + Brief: "Expression template library and compiler construction
     toolkit for domain-specific embedded languages."

**** Design Patterns and Object Oriented Design Patterns 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_typeerasure.html][Chapter 40. Boost.TypeErasure - 1.69.0]]
   + Brief: "The Boost.TypeErasure library provides runtime
     polymorphism in C++ that is more flexible than that provided by
     the core language. The Boost.TypeErasure library combines the
     superior abstraction capabilities of templates, with the runtime
     flexibility of virtual functions."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/ptr_container/doc/ptr_container.html][Boost Pointer Container Library - 1.69.0]]
   + Brief: "Boost.Pointer Container provides containers for holding
     heap-allocated objects in an exception-safe manner and with
     minimal overhead. The aim of the library is in particular to make
     OO programming easier in C++ by establishing a standard set of
     classes, methods and designs for dealing with OO specific
     problems." 

 + [[https://www.boost.org/doc/libs/release/libs/flyweight/][Boost Flyweight]]
   + Brief: Descr: "Design pattern to manage large quantities of
     highly redundant objects."

   + Descr: "Flyweights are small-sized handle classes granting
     constant access to shared common data, thus allowing for the
     management of large amounts of entities within reasonable memory
     limits. Boost.Flyweight makes it easy to use this common
     programming idiom by providing the class template flyweight<T>,
     which acts as a drop-in replacement for const T."

   + Additional notes:
     + "Learning to use Boost.Flyweight can be accomplished in a matter
       of minutes. When special needs arise, however, an extensive
       customization interface is provided which allows the user to
       control and extend the following aspects:"
     + Type tagging for separation of domains using the same basic flyweight types.
     + Specification and parameterization of the so-called flyweight factory.
     + Control of the factory instantiation procedure.
     + Specification of the internal synchronization mechanisms.
     + Flyweight tracking, allowing for the disposal of stored values
       when no longer referenced by any flyweight object.

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/property_tree.html][Chapter 32. Boost.PropertyTree - 1.69.0]]
   + "The Property Tree library provides a data structure that stores
     an arbitrarily deeply nested tree of values, indexed at each
     level by some key. Each node of the tree stores its own value,
     plus an ordered list of its subnodes and their keys. The tree
     allows easy access to any of its nodes by means of a path, which
     is a concatenation of multiple keys." 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/functional/factory/doc/html/index.html][Boost.Functional/Factory]]
   + Brief: "The template boost::factory lets you encapsulate a new
     expression as a function object, boost::value_factory
     encapsulates a constructor invocation without new."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/property_map/doc/property_map.html][Property Map Library - 1.69.0]]

**** Command Line Options 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/program_options.html][Chapter 31. Boost.Program_options - 1.69.0]]

**** Debugging, Logging and Assertions 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/log/doc/html/index.html][Chapter 1. Boost.Log v2 - 1.69.0]]
   + Descr: "The application stores all essential information about its
     execution to a log, and when something goes wrong this
     information can be used to analyze the program behavior and make
     the necessary corrections. There are other very useful
     applications of logging, such as gathering statistical
     information and highlighting events (i.e. indicating that some
     situation has occurred or that the application is experiencing
     some problems). These tasks have proved to be vital for many
     real-world industrial applications. This library aims to make
     logging significantly easier for the application developer. It
     provides a wide range of out-of-the-box tools along with public
     interfaces for extending the library. The main goals of the
     library are:"
     + Simplicity. A small example code snippet should be enough to
       get the feel of the library and be ready to use its basic
       features.
     + Extensibility. A user should be able to extend functionality of
       the library for collecting and storing information into logs.
     + Performance. The library should have as little performance
       impact on the user's application as possible.

**** Network - Sockets - TCP/IP

 + [[https://www.boost.org/doc/libs/1_69_0/libs/asio/][Boost Asio]]
   + Descr: "Portable networking and other low-level I/O, including sockets,
     timers, hostname resolution, socket iostreams, serial ports, file
     descriptors and Windows HANDLEs."

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/crc.html][Boost CRC]] - CRC (Cyclick Redundancy Checking)
   + Descr: " CRCs (cyclic redundancy codes) is one common technique
     to confirming data integrity after transmission. The Boost.CRC
     library provides access to two styles of CRC computation, one as
     a function template, the other as a function template and two
     computation object class templates, where the two class templates
     differ in speed."

 + [[https://www.boost.org/doc/libs/1_69_0/libs/statechart/][Statechart]]
   + Brief: "Boost.Statechart - Arbitrarily complex finite state
     machines can be implemented in easily readable and maintainable
     C++ code."
   + Note: Many network protocols, embedded systems applications and
     business processes are well described by state machines such as
      [[https://en.wikipedia.org/wiki/Mealy_machine][Mealy state machine]] or [[https://en.wikipedia.org/wiki/Moore_machine][Moore State machine]].

 + [[https://www.boost.org/doc/libs/1_69_0/libs/uuid/][UUID]] - A universally unique identifier.

**** Shared Libraries and Plugins - DLL, DSO, SO

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_dll.html][Boost DLL]]
   + Brief: "This library was designed to simplify plugin development using C++ in a portable cross-platform manner."
   + Descr: "Adding a specific features to an existing software
     applications at runtime could be useful in many cases. Such
     extensions, or plugins, are usually implemented using Dynamic
     Library Modules (DLL,SO/DSO) loaded at runtime."
   + Library provides a portable across platforms way to:
     + load libraries
     + import any native functions and variables
     + make alias names for C++ mangled functions and symbols
     + query libraries for sections and exported symbols
     + self loading and self querying
     + getting program and module location by exported symbol

**** Subprocess and inter process communication - IPC 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/interprocess.html][Boost.Interprocess]]
   + Brief: "Boost.Interprocess simplifies the use of common
     interprocess communication and synchronization mechanisms and
     offers a wide range of them:"
     + Shared memory.
     + Memory-mapped files.
     + Semaphores, mutexes, condition variables and upgradable mutex
       types to place them in shared memory and memory mapped files.
     + Named versions of those synchronization objects, similar to UNIX/Windows sem_open/CreateSemaphore API.
     + File locking.
     + Relative pointers.
     + Message queues.
   + Additional:
     + Boost.Interprocess also offers higher-level interprocess
       mechanisms to allocate dynamically portions of a shared memory
       or a memory mapped file (in general, to allocate portions of a
       fixed size memory segment). Using these mechanisms,
       Boost.Interprocess offers useful tools to construct C++
       objects, including STL-like containers, in shared memory and
       memory mapped files:

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/process.html#boost_process.introduction][Boost.Process]]
   + Brief: "Boost.Process is a library to manage system processes. It
     can be used to:"
     + create child processes
     + setup streams for child processes
     + communicate with child processes through streams (synchronously
       or asynchronously)
     + wait for processes to exit (synchronously or asynchronously)
     + terminate processes

**** Low level and byte manipulation 

   + [[https://www.boost.org/doc/libs/1_69_0/libs/endian/doc/index.html][Endian Library - 1.69.0]]

*** General Purpose Libraries 
 
 + [[http://www.boost.org/][Boost libraries]] - Peer reviewed libraries that can be regarded as
   STL extensions. Many of them eventually get into the C++ standard,
   for instance, C++17 std::file_system comes from Boost.FileSystem,
   std::variant from C++17 comes from Boost.Variant.

 + [[http://stxxl.org/][STLXX]] - Standard Template Library for Extra Large Data Sets
   + "The core of STXXL is an implementation of the C++ standard
     template library STL for external memory (out-of-core)
     computations, i. e., STXXL implements containers and algorithms
     that can process huge volumes of data that only fit on
     disks. While the closeness to the STL supports ease of use and
     compatibility with existing applications, another design priority
     is high performance."

 + [[http://www.stlsoft.org/][STLSOFT]] - "Robust, Lightweight, Cross-platform, Template
   Software. STLSoft is a collection of STL and standard library
   extensions, and facades over operating-system and 3rd-party APIs."

 + [[https://abseil.io/][Abseil]] (Google) - "Allows using new C++ standard features from
   C++14 and C++17 with compilers that does not support those standards".

 + [[http://pocoproject.org/][Poco Framework]]

 + [[http://loki-lib.sourceforge.net/][Loki]] - Template library developed by Andrei Alexandrescu
   illustrating several generic programming design patterns.

 + [[https://github.com/bloomberg/bde][Bloomberg BDE]] - Basic Development Environment - a set of
   foundational C++ libraries used at Bloomberg.

 + [[https://github.com/facebook/folly][Folly]] - "Folly (acronymed loosely after Facebook Open Source
   Library) is a library of C++14 components designed with
   practicality and efficiency in mind. Folly contains a variety of
   core library components used extensively at Facebook. In
   particular, it's often a dependency of Facebook's other open source
   C++ efforts and place where those projects can share code."

 + [[https://github.com/Microsoft/GSL][GSL - Guidelines SUpport Library]] - "The Guidelines Support Library
   (GSL) contains functions and types that are suggested for use by
   the C++ Core Guidelines maintained by the Standard C++
   Foundation. This repo contains Microsoft's implementation of GSL." 

 + [[https://fcppt.org/][FCppt]] - Freundlich's C++ toolkit - "Freundlich's C++ Toolkit
   (fcppt) is a collection of libraries that aim to improve general
   C++ code through better typing and functional programming."

 + [[http://duneroadrunner.github.io/SaferCPlusPlus/][SaferCPlusPlus]] - "“SaferCPlusPlus” is essentially a collection of
   safe data types intended to facilitate memory and data race safe
   C++ programming. This library is intended to work with and be
   complimentary to the Core Guidelines lifetime checker over its
   various stages of development and availability. (Including
   situations where the lifetime checker is not available at all.)"

*** Language Binding 

 + [[https://pybind11.readthedocs.io/en/stable/][pybind11]] [BEST]
   + Brief: Allows to create Python modules in native code, aka
     libraries, with C++ >= C++11.

 + [[https://www.boost.org/doc/libs/1_69_0/libs/python/doc/html/tutorial/index.html][Boost.Python]]
   + Brief: "The Boost Python Library is a framework for interfacing
     Python and C++. It allows you to quickly and seamlessly expose
     C++ classes functions and objects to Python, and vice-versa,
     using no special tools -- just your C++ compiler. It is designed
     to wrap C++ interfaces non-intrusively, so that you should not
     have to change the C++ code at all in order to wrap it, making
     Boost.Python ideal for exposing 3rd-party libraries to
     Python. The library's use of advanced metaprogramming techniques
     simplifies its syntax for users, so that wrapping code takes on
     the look of a kind of declarative interface definition language
     (IDL)." 

*** Numerical and Scientifc Computing 

General Purpose: 

 + Boost Math toolkit 

Linear Algebra

 + [[https://www.boost.org/doc/libs/1_69_0/libs/numeric/ublas/doc/index.html][Boost.Ublas]] - "uBLAS is a C++ template class library that provides
   BLAS level 1, 2, 3 functionality for dense, packed and sparse
   matrices. The design and implementation unify mathematical notation
   via operator overloading and efficient code generation via
   expression templates." 

 + [[http://eigen.tuxfamily.org/index.php?title=Main_Page#Documentation][Eigen]] - "Eigen is a C++ template library for linear algebra:
   matrices, vectors, numerical solvers, and related algorithms."

 + [[http://arma.sourceforge.net/][Armadillo]] - "C++ library for linear algebra & scientific computing"

 + [[https://sourceforge.net/projects/blitz/][Blitz++]] - "Blitz++ is a C++ class library for scientific computing
   which provides performance on par with Fortran 77/90. It uses
   template techniques to achieve high performance. Blitz++ provides
   dense arrays and vectors, random number generators, and small
   vectors (useful for representing multicomponent or vector fields)."

 + [[https://bitbucket.org/blaze-lib/blaze][Blaze]] - "Blaze is an open-source, high-performance C++ math library
   for dense and sparse arithmetic. With its state-of-the-art Smart
   Expression Template implementation Blaze combines the elegance and
   ease of use of a domain-specific language with HPC-grade
   performance, making it one of the most intuitive and fastest C++
   math libraries available."

 + [[https://github.com/wichtounet/etl][ETL]] - Expression Templates Library (ETL) with GPU support

 + [[https://sleef.org/][SLEEF]] - SLEEF Vectorized Math Library - " SLEEF stands for SIMD
   Library for Evaluating Elementary Functions. It implements
   vectorized versions of all C99 real floating point math
   functions. It can utilize SIMD instructions of modern
   processors. SLEEF is designed to fully utilize SIMD computation by
   reducing the use of conditional branches and scatter/gather memory
   access. Our benchmarks show that the performance of SLEEF is
   comparable to that of the best commercial library. Unlike
   vendor-tuned libraries, SLEEF is portable : it can be easily ported
   to other architectures by writing a helper file, which is a thin
   abstraction layer of SIMD intrinsics. SLEEF is also designed to
   work with various operating systems and compilers." 
   + https://github.com/shibatch/sleef

Optmization:

 + [[https://www.kthohr.com/optimlib.html][Optmlib]] - "OptimLib is a lightweight C++ library of numerical
   optimization methods for nonlinear functions."
   + https://github.com/kthohr/optim

Machine Learning and Image Processing 

 + [[http://dlib.net/][Dlib]] - Open source library for deep learning, numerical algorithms,
   networks and image processing.

 + [[http://www.csie.ntu.edu.tw/~cjlin/liblinear/][liblinear]]

 + [[http://mlpack.org/][Mlpack]] - Machine Learning Package 

 + [[http://shogun-toolbox.org/][Shogun Toolbox]] - "Shogun is and open-source machine learning
   library that offers a wide range of efficient and unified machine
   learning methods." 

 + [[http://leenissen.dk/fann/wp/][Fann]] - "Fast Artificial Neural Network Library is a free open
   source neural network library, which implements multilayer
   artificial neural networks in C with support for both fully
   connected and sparsely connected networks. Cross-platform execution
   in both fixed and floating point are supported. It includes a
   framework for easy handling of training data sets. It is easy to
   use, versatile, well documented, and fast. Bindings to more than 20
   programming languages are available. An easy to read introduction
   article and a reference manual accompanies the library with
   examples and recommendations on how to use the library. Several
   graphical user interfaces are also available for the library."

*** FFI - Foreign Function Interface 

 + [[http://www.dyncall.org/index][dyncall.org - calling C functions dynamically]]
   + "The dyncall library encapsulates architecture-, OS- and
     compiler-specific function call semantics in a virtual bind
     argument parameters from left to right and then call interface
     allowing programmers to call C functions in a completely dynamic
     manner. In other words, instead of calling a function directly,
     the dyncall library provides a mechanism to push the function
     parameters manually and to issue the call afterwards." 

 + [[https://www.gnu.org/software/libffcall/][libffcall - GNU Project - Free Software Foundation]]

*** XML 

 + [[http://rapidxml.sourceforge.net/][RapidXML]]

 + [[http://xmlsoft.org/][Libxml2]]

 + [[http://xerces.apache.org/xerces-c/][Xerces C++]]

 + [[http://pugixml.org/][Pugixml]]

 + [[http://www.grinninglizard.com/tinyxml/][TinyXML]]
*** GUI - Graphical User Interface 

 + [[https://www.qt.io/][QT Toolkit]] (QT Framework) - Not only a GUI toolkit, but also a
   full-fledge C++ framework with cross platform libraries for
   network, sockets, database access ... and so on.

 + [[http://www.wxwidgets.org/][WxWidgets]] 

 + [[http://www.gtkmm.org/][Gtkmm]] - Gtk (Written in C) + C++ interface
   + GTK is a GUI library derived from GIMP toolkit.
   + Drawback: Hard to use on Windows.

 + [[http://cegui.org.uk/][Cegui]] - Crazy Eddie's GUI System.

 + [[http://www.fltk.org/][Fltk]] - lightweight GUI library.

 + [[http://nanapro.org/en-us/][Nana]]

 + [[https://www.gnu.org/software/ncurses/][Ncurses]] - A (TUI) terminal user interface written in C. Provides
   many terminal widgets.

 + [[https://bitbucket.org/chromiumembedded/cef][CEF]] - Chromium Embedded Framework - "The Chromium Embedded
   Framework (CEF) is a simple framework for embedding Chromium-based
   browsers in other applications." 

 + [[https://sourceforge.net/projects/owlnext/][OWLNext C++ GUI]] [WINDOWS ONLY] - "An extensive update of Borland's Object Windows
   Library (OWL) for writing GUI applications in standard C++ on
   Microsoft Windows." 

 + [[https://juce.com/][Juce]]  [COMMERCIAL]

 + [[https://github.com/ocornut/imgui][Imgui]] - GUI Library for games

*** GUI - Plotting Libraries and data visualization 

 + [[https://qwt.sourceforge.io/][Qwt]] (QT Framework Widgets) - Qt Widgets for Technical Applications*
   + License: LGPL

 + [[http://qwtplot3d.sourceforge.net/][Qwtplot3d]] - "QwtPlot3D is not a  program, but a feature-rich
   Qt/OpenGL-based C++ programming library, providing essentially a
   bunch of 3D-widgets for programmers. The library is zlib licensed."

 + [[http://cneben.github.io/QuickQanava/index.html][QuickQanava]] - "QuickQanava is a C++14 library designed to display
   graphs and relational content in a QtQuick application. QuickQanava
   provide QML components and C++ classes to visualize medium-sized
   directed graphs in a C++/QML application. QuickQanava does not
   provide advanced layout algorithms, but rather focus on displaying
   relational content in advanced dynamic user interfaces (with DnD
   support, resizable content, visual connection of nodes)."

 + [[https://www.gnu.org/software/plotutils/][GNU Plotutils]] - " The GNU plotutils package contains software for
   both programmers and technical users. Its centerpiece is libplot, a
   powerful C/C++ function library for exporting 2-D vector graphics
   in many file formats, both vector and bitmap. On the X Window
   System, it can also do 2-D vector graphics animations." 

 + [[http://www.openscenegraph.org/][OpenSceneGraph]] - "The OpenSceneGraph is an open source high
   performance 3D graphics toolkit, used by application developers in
   fields such as visual simulation, games, virtual reality,
   scientific visualization and modelling. Written entirely in
   Standard C++ and OpenGL it runs on all Windows platforms, OSX,
   GNU/Linux, IRIX, Solaris, HP-Ux, AIX and FreeBSD operating
   systems. The OpenSceneGraph is now well established as the world
   leading scene graph technology, used widely in the vis-sim, space,
   scientific, oil-gas, games and virtual reality industries." 

*** GUI RAD - Rapid Application Development 

RAD Frameworks are a combination of library, IDE and GUI builder where
it is possible to build GUI applications by dragging and dropping user
interface elements in the and combining components in the same fashion
as Visual Basic or Delphi.

 + [[https://www.ultimatepp.org/][Ultimate++]] - Ultimate++ is a C++ cross-platform rapid application
   development framework. 
   + License: BSD 

 + [[https://www.embarcadero.com/products/cbuilder][Embarcadero C++ Builder]] (Old Borland C++ Builder) - [Commercial]
*** Windows OS only 

 + MFC - Microsft Foundation Libraries
   + Framework for developing Windows GUI Applications.

 + ATL - Active Template Library
   + Template library for developing COM components.

 + WTL - Windows Template Library

*** Imaging 
 
 + [[https://www.boost.org/doc/libs/1_38_0/libs/gil/doc/index.html][Boost.Gil]] - Generic Image Library

 + [[http://easybmp.sourceforge.net/][EasyBMP]]

 + [[http://cimg.sourceforge.net/][Cimg]]

 + [[https://itk.org/][ITK]] - National Library of Medicine Insight Segmentation and
   Registration Toolkit (ITK)

 + [[http://freeimage.sourceforge.net/][FreeImage]]

 + [[https://vtk.org/][VTK]] - Visualization Toolkit - library for scientific visualization.
   + See more at: https://en.wikipedia.org/wiki/VTK

 + [[https://opencv.org/][OpenCV]] - Computer Vision Framework.

*** Logging 

 + [[http://www.pantheios.org/][Pantheios]]

 + [[http://logging.apache.org/log4cxx/index.html][log4cxx]]

 + [[http://boost-log.sourceforge.net/libs/log/doc/html/index.html][Boost.Log]]

*** Network and socket 
 
General Network Socket Libraries 

 + [[https://www.boost.org/doc/libs/1_69_0/doc/html/boost_asio.html][Boost Asio]] - "Boost.Asio is a cross-platform C++ library for
   network and low-level I/O programming that provides developers with
   a consistent asynchronous model using a modern C++ approach." 

 + [[https://www.boost.org/doc/libs/1_69_0/libs/beast/doc/html/index.html][Boost.Beast]] - "Beast is a C++ header-only library serving as a
   foundation for writing interoperable networking libraries by
   providing low-level HTTP/1, WebSocket, and networking protocol
   vocabulary types and algorithms using the consistent asynchronous
   model of Boost.Asio." 

 + [[http://download.dre.vanderbilt.edu/][ACE]] - Adaptive Communication Environment - "The ADAPTIVE
   Communication Environment (ACE) is a freely available, open-source
   object-oriented (OO) framework that implements many core patterns
   for concurrent communication software. ACE provides a rich set of
   reusable C++ wrapper facades and framework components that perform
   common communication software tasks across a range of OS
   platforms. The communication software tasks provided by ACE include
   event demultiplexing and event handler dispatching, signal
   handling, service initialization, interprocess communication,
   shared memory management, message routing, dynamic
   (re)configuration of distributed services, concurrent execution and
   synchronization. ACE is targeted for developers of
   high-performance and real-time communication services and
   applications. It simplifies the development of OO network
   applications and services that utilize interprocess communication,
   event demultiplexing, explicit dynamic linking, and concurrency. In
   addition, ACE automates system configuration and reconfiguration by
   dynamically linking services into applications at run-time and
   executing these services in one or more processes or threads." 

 + [[http://zeromq.org/][ZeroMQ]] - Framework fro building distributed message systems or
   message brokers.

 + [[http://www.reasoning.biz/index.htm][Reason C++ framework]] - " Reason is a cross platform framework
   designed to bring the ease of use of Java, .Net, or Python to
   developers who require the performance and strength of C++."

 + [[http://sourcey.com/libsourcey/][libsourcey]] - "LibSourcey is a collection of cross platform C++11
   modules and classes that provide developers with an arsenal for
   rapidly developing high performance network based p2p and media
   streaming applications. Think of it as the power of libuv combined
   with the features of FFmpeg, OpenCV and WebRTC, all integrated with
   the ease and readability of the stl (C++ Standard Library)."

 *Http and Clients and Servers*

 + [[https://www.genivia.com/dev.html][gSOAP]] - "Our gSOAP toolkit allows C/C++ developers to focus on
   application logic instead of infrastructure, resulting in reduced
   development time, fewer bugs, and faster time to market." 

 + [[http://www.curlpp.org/][Curlpp]] - "cURLpp is a C++ wrapper for libcURL. libcURL is described
   as: a free and easy-to-use client-side URL transfer library,
   supporting FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE and
   LDAP. libcurl supports HTTPS certificates, HTTP POST, HTTP PUT, FTP
   uploading, kerberos, HTTP form based upload, proxies, cookies,
   user+password authentication, file transfer resume, http proxy
   tunneling and more! "

 + [[https://github.com/daedric/httpp][Httpp]] - "Micro http server and client written in C++"

 + [[http://siliconframework.org/][Silicon C++ Web Framework]] - "Write Fast and Robust Web APIs with C++"

 + [[https://github.com/loentar/ngrest][Ngrest]] - "Fast and easy C++ RESTful WebServices framework"


 *Low level socket manipulation and raw socket*

 + [[https://libtins.github.io/][Libtins]] - "libtins is a high-level, multiplatform C++ network
   packet sniffing and crafting library. Its main purpose is to
   provide the C++ developer an easy, efficient, platform and
   endianness-independent way to create tools which need to send,
   receive and manipulate network packets."

 + [[http://seladb.github.io/PcapPlusPlus-Doc/][PcapPlusPlus]] - "PcapPlusPlus is a multiplatform C++ network
   sniffing and packet parsing and crafting framework. It's meant to
   be lightweight, efficient and easy to use."

 *RPC - Remote Procedure Calls*

 + [[https://zeroc.com/products/ice][ICE]] - "Ice is a comprehensive RPC framework with support for C++,
   C#, Java, JavaScript, Python, and more."
   + License: GPLv2 for open source projects, any commercial project
     requires buying a proper [[https://zeroc.com/licensing][license]].
 
*** Testing 

Unit Testing: 

 + [[http://googletest.googlecode.com/][Google Test]]

 + [[http://www.boost.org/doc/libs/1_38_0/libs/test/doc/html/index.html][Boost.Test]]

 + [[http://unittest-cpp.sourceforge.net/][UnitTest++]]

 + [[https://github.com/onqtam/doctest][Doctest]] 

Mock: 

 + [[https://app.assembla.com/wiki/show/hippomocks][Hippo Mocks]]

 + [[http://turtle.sourceforge.net/][Boost Turtle]] -  A C++ mock object library for Boost.

 + [[https://github.com/google/googlemock][GoogleMock]] (Deprecated -> Absorbed into Google Test)

*** Database 
 
 + [[http://lmdbxx.sourceforge.net/][LMDB++]]

 + [[http://otl.sourceforge.net/][OTL]]

 + [[http://soci.sourceforge.net/][SOCI]]

*** Graphics and Game Engines 

 + [[https://www.ogre3d.org/][Ogre3D]] - Object-Oriented Graphics Rendering Engine
   + API Docs: https://ogrecave.github.io/ogre/api/latest/

 + [[http://www.libsdl.org/][SDL]] - "Simple DirectMedia Layer is a cross-platform development
   library designed to provide low level access to audio, keyboard,
   mouse, joystick, and graphics hardware via OpenGL and Direct3D. It
   is used by video playback software, emulators, and popular games
   including Valve's award winning catalog and many Humble Bundle
   games."

 + [[https://sourceforge.net/projects/alleg/][Allegro]] - "Allegro is a cross-platform library intended for use in
   computer games and other types of multimedia programming."

 + [[https://www.sfml-dev.org/][SFML]] - "SFML provides a simple interface to the various components
   of your PC, to ease the development of games and multimedia
   applications. It is composed of five modules: system, window,
   graphics, audio and network."

 + [[https://magnum.graphics/][Magnum Engine]] - "Lightweight and modular C++11/C++14 graphics
   middleware for games and data visualization." 

 + [[https://libcinder.org/about][Cinder]] - "Cinder is a C++ library for programming with aesthetic
   intent - the sort of development often called creative coding. This
   includes domains like graphics, audio, video, and computational
   geometry. Cinder is cross-platform, with official support for
   macOS, Windows, Linux, iOS, and Windows UWP." 

 + [[https://openframeworks.cc/][Openframeworks]] - "openFrameworks is an open source C++ toolkit for
   creative coding."

 + [[https://github.com/ocornut/imgui][Imgui]] - GUI Library for games

 + [[https://bkaradzic.github.io/bgfx/index.html][Bgfx]] - Cross-platform, graphics API agnostic, “Bring Your Own
   Engine/Framework” style rendering library, licensed under
   permissive BSD-2 clause open source license.

 + [[http://glew.sourceforge.net/][Glew]] - The OpenGL Extension Wrangler Library - " The OpenGL
   Extension Wrangler Library (GLEW) is a cross-platform open-source
   C/C++ extension loading library. GLEW provides efficient run-time
   mechanisms for determining which OpenGL extensions are supported on
   the target platform. OpenGL core and extension functionality is
   exposed in a single header file. GLEW has been tested on a variety
   of operating systems, including Windows, Linux, Mac OS X, FreeBSD,
   Irix, and Solaris."

 + [[http://www.openscenegraph.org/][OpenSceneGraph]] - "The OpenSceneGraph is an open source high
   performance 3D graphics toolkit, used by application developers in
   fields such as visual simulation, games, virtual reality,
   scientific visualization and modelling. Written entirely in
   Standard C++ and OpenGL it runs on all Windows platforms, OSX,
   GNU/Linux, IRIX, Solaris, HP-Ux, AIX and FreeBSD operating
   systems. The OpenSceneGraph is now well established as the world
   leading scene graph technology, used widely in the vis-sim, space,
   scientific, oil-gas, games and virtual reality industries." 

 + [[https://glm.g-truc.net/0.9.9/index.html][OpenGL Mathematics]] - "OpenGL Mathematics (GLM) is a header only C++
   mathematics library for graphics software based on the OpenGL
   Shading Language (GLSL) specifications."

 + [[https://vis.uni-koeln.de/visionaray.html][Visionary]] - Visionaray - A C++ ray tracing template library
   + https://github.com/szellmann/visionaray
*** Dependency Injection

 + [[http://wallaroolib.sourceforge.net/][Wallaroo]] - "Wallaroo is a dependency injection library for C++
   released under the BOOST software license. With wallaroo, you can
   easily separate the object graph from the class implementation. You
   can create objects and wire them using strings so that you can load
   the "object graph" from a configuration file."

 + [[https://github.com/ybainier/Hypodermic][Hypodermic]] - "Hypodermic is an IoC container for C++. It provides
   dependency injection to your existing design. Hypodermic is a
   non-intrusive header only IoC container for C++. It provides
   dependency injection to your existing design by managing the
   creation of your components and their dependencies in the right
   order, sparing you the trouble of writing and maintaining boiler
   plate code."   
*** Crypto 

 + [[https://www.gnutls.org/][GNU TLS]] - The GnuTLS Transport Layer Security Library

 + [[https://www.openssl.org/][OpenSSL]] - "OpenSSL is a robust, commercial-grade, and full-featured
   toolkit for the Transport Layer Security (TLS) and Secure Sockets
   Layer (SSL) protocols. It is also a general-purpose cryptography
   library." 

 + [[https://www.cryptopp.com/][Crypto++]] - "Crypto++ Library is a free C++ class library of cryptographic schemes."

 + [[https://www.libtom.net/][Libtom]] - "LibTomCrypt is a fairly comprehensive, modular and
   portable cryptographic toolkit that provides developers with a vast
   array of well known published block ciphers, one-way hash
   functions, chaining modes, pseudo-random number generators, public
   key cryptography and a plethora of other routines."
   + https://github.com/libtom/libtomcrypt

 + [[https://botan.randombit.net/][Botan]] - "Botan’s goal is to be the best option for cryptography in
   C++ by offering the tools necessary to implement a range of
   practical systems, such as TLS protocol, X.509 certificates, modern
   AEAD ciphers, PKCS#11 and TPM hardware support, password hashing,
   and post quantum crypto schemes."

*** Embedded Systems 
 
 + [[https://www.etlcpp.com/][ETLCPP]] - Embedded Template Library 

 + [[http://sourceforge.net/projects/qpc/files/QP_C%252B%252B/4.5.04/][QP/C++]] -  RTOS kernel - License: dual GPL

 + [[http://distortos.org/][distortos]] - object-oriented C++ RTOS for microcontrollers  
** Community

Places:

 + [[https://www.reddit.com/r/cpp][Reddit /r/cpp]]  

 + [[https://www.reddit.com/r/cpp_questions][Reddit /r/cpp_questions]]

 + [[https://www.google.com/search?ei=aQ5OXLzbF8ui5OUPnZOBgAQ&q=site%253Ahttps%253A%252F%252Fnews.ycombinator.com+"c%252B%252B"&oq=site%253Ahttps%253A%252F%252Fnews.ycombinator.com+"c%252B%252B"&gs_l=psy-ab.3...8445.16108..17177...4.0..0.176.2558.0j17......0....1j2..gws-wiz.......0i71j0.6PNuVmbul4c][Hackernews YCombinator]]  

 + [[https://stackoverflow.com/questions/tagged/c%252b%252b%2520c][Stackoverlow - C and C++ tags]]

 + [[https://codereview.stackexchange.com/questions/tagged/c%252b%252b%2520c][Codereview - stackexchange C and C++ tags]]

 + [[https://www.google.com/search?source=hp&ei=DxBOXOzBK9Wy5OUPqMWtmAU&q=site%253Awww.reddit.com%252Fr%252Fprogramming+"c%252B%252B"&btnK=Google+Search&oq=site%253Awww.reddit.com%252Fr%252Fprogramming+"c%252B%252B"&gs_l=psy-ab.3...1667.10708..10979...0.0..0.222.6239.0j35j4......0....1..gws-wiz.....0..0.J2yoNmHunTc][Reddit /r/programming - search C++]]

 + [[https://www.reddit.com/r/gamedev/][Reddit /r/gamedev]] 

 + [[https://reverseengineering.stackexchange.com/][Reverse Engineering Stack Exchange]]

 + Usenet Newsgroup: *comp.dsp*
   + [[https://groups.google.com/forum/#!forum/comp.dsp][comp.dsp - Google Groups]]

Blogs: 

 + [[https://blogs.msdn.microsoft.com/oldnewthing/][The Old New Thing]] - Raymond Chen - Microsoft Inc. MSFT
   + Provides lots of useful information about Windows internals and
     Windows API.

 + [[https://blogs.msdn.microsoft.com/visualstudio/][The Visual Studio Blog]] 

** Open Source Projects 

 + 
** Debuggers 
*** GDB Front-Ends GUI 

GDB's (GNU Debugger) Front-End GUI for [U]-nix

 + [[https://sourceware.org/gdb/wiki/GDB%20Front%20Ends][GDB Front Ends - GDB Wiki]]

 + http://www.kdbg.org/ - GNU Debugger Front-End with KDE user
   interface.
   + Linux Fedora install: *$ sudo dnf install kdbg.x86_64*
   + Interface Style: KDE/QT
   + Features:
     + Syntax highligh
     + Dissably Line - Just click at a given line to show its assembly code.
     + Watch variables and expressions at any context
     + Can View the current stack of many threads
     + Inspect Stack Variables in a tree-like structure
     + View CPU Register.

 + [[https://wiki.gnome.org/Apps/Nemiver][Neminver]] - Intuitive and easy GNOME User Interface for (GDB) GNU
   Debugger.
   + Linux Fedora install: *$ sudo dnf install neminver.x86_64*
   + Interface Style: GNOME/Gtk 
   + Features:
     + Syntax highligh
     + Set/Clear breakpoints graphically by clicking.
     + Many windows to watch stack variables
     + Watch variables and C++ expressions.
     + View CPU Registers

   + https://gdbgui.com/ - Browser Front-end for GDB Server.
     + Note: requires Python.

 + https://github.com/cyrus-and/gdb-dashboard
   + GUI Style: TUI - Terminal User Interface - Keyboard driver.
   + Modular GDB Interface written in Python.

*** GDB Reference Cards 

 + [[http://visualgdb.com/gdbreference/commands/print][GDB Command Reference - print command]]

 + [[https://darkdust.net/files/GDB%2520Cheat%2520Sheet.pdf][PDF - GDB Cheat Sheet]]

 + [[http://shanekirk.com/2018/02/gdb-tips-and-tricks-6-examining-data-types/][GDB Tips and Tricks #6: Examining Data Types – ShaneKirk.com]]

 + [[http://shanekirk.com/2017/12/gdb-tips-and-tricks-5-the-display-command/][GDB Tips and Tricks #5: The Display Command – ShaneKirk.com]]
** Computer History 

 * *Ancient Mechanical "Computers"*
   + [[https://en.wikipedia.org/wiki/Antikythera_mechanism][Ancient Greek Antikythera gear mechanism]]
   + [[https://en.wikipedia.org/wiki/Abacus][Abacus]]
   + [[https://www.fourmilab.ch/documents/sliderule/][Slide rules]] 

 * [[https://www.npr.org/sections/ed/2014/10/22/356937347/the-slide-rule-a-computing-device-that-put-a-man-on-the-moon][The Slide Rule: A Computing Device That Put A Man On The Moon : NPR Ed : NPR]]
   + "The slide rule is an instrument that was used to design
     virtually everything," says Deborah Douglas, the director of
     collections and curator of science and technology at the MIT
     Museum in Cambridge, Mass. The museum just ended a three-year
     exhibit on slide rules. "The size of a sewer pipe, the
     weight-bearing ability of a cardboard box, even rocket ships and
     cars."

 * [[https://en.wikipedia.org/wiki/E6B][E6B - Circular slide Rule - Flight Computer]]

 * *Human Computers*
   * [[http://beforebefore.net/scima200/media/light.pdf][When Computers Were Women]]
     + In the past, the term "computer" was assigned to any device
       capable of performing some mathematical calculation. So, some
       early "computers" were the [[https://en.wikipedia.org/wiki/Antikythera_mechanism][Antikythera mechanism]] for predicting
       astronomical positions; [[https://en.wikipedia.org/wiki/Abacus][abacus]]; [[https://www.fourmilab.ch/documents/sliderule/][slide rules]] for engineering
       calculations and humans. In fact, the first digital computer,
       ENIAC, was designed for assisting number crunching related to
       physics and engineering. Another role was to automate the tedious
       work carried out by human-computers.
   * [[https://www.nasa.gov/feature/jpl/when-computers-were-human][When Computers Were Human | NASA]]
     + "Computers weren't always made of motherboards and CPUs. At one
       time, they were human! And at NASA's Jet Propulsion Laboratory,
       human computers were a talented team of women who went on to
       become some of the earliest computer programmers."

 * Analog Mechanical computers for firing control systems 
   + Analog mechanical computers were used befored the advent of digital
     computers for solving real time differential equations related to
     motion for the purpose of aiming and stabilizing ship canons.

   + [[http://web.mit.edu/STS.035/www/PDFs/Newell.pdf][The Mechanical Analog Computer of Hannibal Ford and William Newell]]
   + [[https://arstechnica.com/information-technology/2014/03/gears-of-war-when-mechanical-analog-computers-ruled-the-waves/][Gears of war: When mechanical analog computers ruled the waves | Ars Technica]]
   + [[https://www.evilmadscientist.com/2013/analogmech/][Introduction to Analog Mechanical Computers | Evil Mad Scientist Laboratories]]
   + [[https://hackaday.com/2014/10/28/retrotechtacular-fire-control-computers-in-navy-ships/][Retrotechtacular: Fire Control Computers in Navy Ships | Hackaday]]
   + [[https://web.archive.org/web/20190127225800/https://apps.dtic.mil/dtic/tr/fulltext/u2/830809.pdf][Engineering Design Handbook - Fire Control Series - Section 1]]

 * *Analog Electronic Computers*
   + Electronic analog computers were electrical circuits built with
     valves, resistors and capacitors for solving specific
     differential equations. They weren't general purpose and
     programmable as the modern computers digital computers.
   + [[http://chalkdustmagazine.com/features/analogue-computing-fun-differential-equations/][Analogue computing: fun with differential equations - Chalkdust]]
   + [[https://blog.degruyter.com/algorithms-suck-analog-computers-future/][Why Algorithms Suck and Analog Computers are the Future - De Gruyter Conversations]]
   + [[https://spectrum.ieee.org/computing/hardware/not-your-fathers-analog-computer][Not Your Father’s Analog Computer - IEEE Spectrum]]

 * Electrical Analog Computer - [[https://en.wikichip.org/wiki/electronic_associates/pace_231r][PACE231R-EAI]] - "The EAI 231R is
   notable for having been used for simulation in many of the early
   space and aviation projects including the Project Mercury, Project
   Gemini, and the X-15." 
   * "Flight Research Center's first HL-10 simulations was done with
     the PACE 231R. As they described "The real capability of the
     analog computer was its ability to integrate differential
     equations. Because the equations of motion for the lifting bodies
     were differential equations-as are all equations of motion for
     aerospace vehicles-the simulation engineers mechanized them on
     available analog computers.
   * [[https://web.archive.org/web/20190128000550/http://s3data.computerhistory.org/brochures/eai.231r.1961.102646219.pdf][PACE 231R Analog Computer - 1961]] (PDF)

 * *Unix*
   + [[http://www.princeton.edu/~hos/frs122/unixhist/finalhis.htm][Unix An Oral History]]
   + [[http://www.catb.org/esr/writings/taoup/html/][The Art of Unix Programming]] - Eric Raymond 

 * [[https://www.computerhistory.org/atchm/the-deep-history-of-your-apps-steve-jobs-nextstep-and-early-object-oriented-programming/][The Deep History of Your Apps: Steve Jobs, NeXTSTEP, and Early Object-Oriented Programming]]

 * [[http://www.nucalc.com/Story/][Graphing Calculator Story]] - "The Graphing Calculator Story - an
   Apple engineer who refused to leave" 

 * [[http://longnow.org/essays/richard-feynman-connection-machine/][Richard Feynman and The Connection Machine - The Long Now]]

** ABI - Application Binary Inteface
*** Itanium Portable ABI 

  + [[http://itanium-cxx-abi.github.io/cxx-abi/][Itanium C++ ABI]]
    + "The Itanium C++ ABI is an ABI for C++. As an ABI, it gives
      precise rules for implementing the language, ensuring that
      separately-compiled parts of a program can successfully
      interoperate. Although it was initially developed for the Itanium
      architecture, it is not platform-specific and can be layered
      portably on top of an arbitrary C ABI. Accordingly, it is used as
      the standard C++ ABI for many major operating systems on all
      major architectures, and is implemented in many major C++
      compilers, including GCC and Clang." 

  + [[http://refspecs.linuxbase.org/cxxabi-1.83.html][Itanium C++ ABI (Revision: 1.83)]]

  + [[http://charette.no-ip.com:81/programming/doxygen/g++/cxxabi_8h.html][GNU g++: /usr/include/c++/5/cxxabi.h File Reference]]

  + [[https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/][GCC5 and the C++11 ABI - RHD Blog]]

*** Drawbacks and ABI Issues

 *Drawbacks*

  + C++ is unsafe. Bugs like stack overflow, buffer overlow, null
    pointr exceptions may happen.

  + _Operating System Depedent_ - C++ may be portable, but it is not
    cross platform since it is compiled to machine code and for a
    particular operatiing system.

  + Hardware dependent (Processor Architecture) and Operating System
    Depedent. C++ is compied to machine code / binary code for a
    particular operating system and processor architecture with
    different executable formats. The most common processor
    architectures are Intel x86 (32 bits) and AMD64 (64 bits).

    + OS Windows            / Executable Format - PE-32

    + Unix (Linux, BSD ...) / Executable Format - ELF

    + Mac-OSX               / Executable Format - Mac-O

    +

  + _No Standard ABI (Application Binary Interface)_ - C++ shared
    libraries and programs compiled with different compilers or
    different versions of same compiler may be incompatible because
    unlinke C, C++ doesn't have a standard ABI. It makes hard to call
    libraries written in C+++ through an FFI - Foreign Function
    Interface form another programming language such as Python.


 *ABI Issues* - Credits: *Defining a Portable C++ ABI* - https://isocpp.org/files/papers/n4028.pdf

 _A C++ developer cannot compile C++ code and share the object file with_
 _other C++ developers on the same platform and know that the result_
 _will compile and link correctly_. Our status quo is that two source
 files a.cpp and b.cpp can only be linked together if they are compiled
 with both:" -- ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

  - "the same version of the same compiler, or another compiler with a
    compatibility mode" ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

  - "compatible switch settings, since most C++ compilers offer
    incompatible switch settings where even compiling two files with
    the same version of the same compiler will not link successfully."
    ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 Issues:

  - "It makes sharing binary C++ libraries more difficult: _To ship a C++_
    _library in binary form for a given platform requires building it_
    _with possibly dozens of popular combinations of switch settings for_
    the popular compiler(s) on that platform, and then may not cover
    all combinations. Alternatively, one can wrap the library in that
    platform’s stable C ABI, which brings us to…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



  - "_It is a valid reason to use C: This is (the) one area where C is_
    _superior to C++_. Among programs and programmers who would otherwise
    use C++, _the top reason to use C appears to be the inability to_
    _publish an API with a stable binary ABI_, including that it can be
    linked to from C, C++, and other languages’ foreign function
    interfaces (FFIs) such as Java JNI and .NET PInvoke. In
    particular…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



  - "_It therefore creates ongoing security problems: The fact that C is_
    _the only de facto ABI-stable lingua franca continues to encourage_
    _type- and memory-unsafe C APIs that traffick in things like error_
    prone pointer/length pairs instead of more strongly typed and still
    highly efficient abstractions, including but not limited to
    std::string or the new string_view"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])


 *Solutions to ABI compatibility issues*

  1) _Distribute the library in source format_. Approach adopted by QT
     (former Trolltech Inc, now the QT Company) with open source and
     commercial license.

  2) Distribute the library in binary format and only support a
     specific compiler.

  3) _Compile he C++ shared library with all possible compilers_ and
     distribute the binaries for each compiler, compiler version,
     processor architecture and operating system.

  4) _Write the library in C, instead of C++_. This approach is followed
     by most Unix/Linux libraries and OpenGL and Gtk GUI toolkit.

  5) Use some language that can compile/generate C-code (transpiler).

  6) Use Microsoft COM (Component Object Model)/ DCOM or CORBA, DBUS ... 



 Note: C is until now the only language with a standard and public ABI
 and most OS exposes its API through a C interface, programming
 languages runtimes are generally implement in C.    
** Tooling 
*** General

 * Documentation Builder, aka Generator 
   + Doxygen => http://www.doxygen.org/
   
 * IDEs and Quasi-IDEs

   + *Visual Studio Community Edition* (Windows Only)

   + *CLion* / JetBrains 

   + GNome Builder => Not an IDE, but at least the code completion
     "just works" without any configuration. 
     + https://wiki.gnome.org/Apps/Builder/Features
     + https://www.collabora.com/news-and-blog/blog/2018/08/03/cross-compilation-made-easy-for-gnome-builder/

 * Building Systems
   + CMake
     + https://cmake.org/documentation/
   + Meson
     + https://github.com/mesonbuild/meson/wiki
   + SCons
     + https://scons.org/
   + Make (GNU Make, BSD Make or Windows MAKE - NMake)
     + https://en.wikipedia.org/wiki/Makefile
   + Ninja
     + https://ninja-build.org/

 * Package Managers:
   + https://conan.io/
   + [[https://docs.microsoft.com/en-us/cpp/vcpkg?view=vs-2017][vcpkg-- A C++ package manager for Windows, Linux and MacOS | Microsoft Docs]]
   + [[http://www.buckaroo.pm/][Buckaroo - C/C++ Package Manager]]
   + [[https://gist.github.com/Overdrivr/d14e4c7e79234f1fb7b3a5a14f8b6ad9][Why C/C++ package managers fail for now ?]]

 * Source Code Naviagator => Helpers for understanding code. 
   + Source Trail => https://www.sourcetrail.com/
   + CPPDepend

 * *Debuggers* - Essential tools for development, debugging,
   introspecing processes, reversing engineering and security
   research.
   + GDB  - GNU Debugger 
   + LLDB - LLVM/Clang Debugger
   + WinDG -> Windows Debugger 
   + IDA

*** Compiler Metadata Generators

  + [[https://pygccxml.readthedocs.io/en/develop/upgrade_issues.html][GCC-XML 0.7 → 0.9 upgrade issues (Legacy) — pygccxml 1.9.1 documentation]]    
** Mind Map 

Shared Libraries / Software Components 

 - Interoperability

 - Binary Compatibility

 - C-library

   - [[http://www.etalabs.net/compare_libcs.html][Comparison of C/POSIX standard library implementations for Linux]]

 - Linking

   - Static Linking

   - Dynamic Linking

 - [[http://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]

 - API - Application Programming Interface

 - ABI - [[https://en.wikipedia.org/wiki/Application_binary_interface][Application Binary Interface]]

   - Calling Conventions

   - [[https://en.wikipedia.org/wiki/System_call][System Call]]

   - Stable and Standard ABI - C Language

   - [[https://en.wikipedia.org/wiki/Loader_(computing)][Loader (computing)]]

   - [[https://en.wikipedia.org/wiki/Dynamic_linker][Dynamic linker]]

   - [[https://en.wikipedia.org/wiki/Binary-code_compatibility][Binary-code compatibility]]

 - FFI - Foreign Function Interface 

 - Excetuable Formats

   - [[https://en.wikipedia.org/wiki/Portable_Executable][PE]] - Portable Executable / Windows (*.exe files and *.dll files)

   - [[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF]] - Executable and Linkable Format / Unix (Linux, BSD ...)

   - [[https://en.wikipedia.org/wiki/Mach-O][Mach-O]] -  Mach object file format / Mach-OSX and IOS

   - [[https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats][Comparison of executable file formats]]

   - 
** What sucks about C++ 

Outline: 
 + Slow compile-time 
 + Macros and preprocessor
 + No pre-compiled libraries, project dependencies have to be
   compiled from source due to ABI incompatibility. This is why
   header-only libraries are popular. 
 + Lack of module system 
 + Undefined behavior 
 + High Degree of Complexity
 + Complexity of building systems 
 + No standard package manager
 + Binary compatibility among compilers.
 + Lack of ABI makes unfeasible to build C++ components or shared
   libraries without a C API. In C#, the user has just to add a DLL
   and in Java, the user has just to add jar package to include a
   dependency in a project. In C++, it is not possible, all
   dependencies need to compiled from source.
 + Code repetitition, every class' source file .cpp needs a matching
   header file. 

References: 

 + [[https://blog.codinghorror.com/the-problem-with-c/][The Problem With C++]] - Jeff Atwood. 
 + [[https://dorinlazar.ro/why-c-sucks-2016-02-edition/][Why C++ sucks (2016.02 edition) – dorinlazăr.ro]]
 + [[https://flyx.org/2014/04/24/cpp_sucks/][flyx.org - Reasons why C++ sucks]]
 + [[https://whydoesitsuck.com/cpp-sucks-for-a-reason/][The C++ Programming Language Sucks for a Very Good Reason | Why Does It Suck?]]
 + [[https://en.wikipedia.org/wiki/Criticism_of_C%2B%2B][Criticism of C++ - Wikipedia]]
 + [[https://en.wikipedia.org/wiki/Most_vexing_parse][Most vexing parse - Wikipedia]]
** C++ Resources

*C++ General Resources*

 - Ian D. Chivers - *An Introduction to C++*
   <http://www.icsd.aegean.gr/lecturers/kavallieratou/Cplusplus_files/notes.pdf>

 - [[https://www.reddit.com/r/Physics/comments/2w4exo/what_are_the_useful_aspects_of_c_in_physics/][What are the useful aspects of C++ in Physics programming? : Physics]]

 - [[https://anteru.net/blog/2016/05/01/3249/][Designing C APIs in 2016 | Anteru’s blog]]

*C++ Numerical Methods and Scientific Computing*

 - Prof. R. Hiptmair, SAM, ETH Zurich. *Numerical Methods for
   Computational Science and Engineering* -
   <http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf>


 - Norbert Pozar. *Basic C++ for numerical computations: vectors*
   <http://polaris.s.kanazawa-u.ac.jp/~npozar/basic-cpp-for-numerics-vectors.html>


*C++ STL - Standard Template Library*


 - *A modest STL tutorial*
   <http://cs.brown.edu/~jak/proglang/cpp/stltut/tut.html>


 - Carlos Moreno. *C++ Vectors* <https://cal-linux.com/tutorials/vectors.html>


*C++ ABI - Application Binary Interface, Binary Compatibility and FFI*

 - By Agner Fog. *Calling conventions for different C++ compilers and
   operating systems*
   <http://www.agner.org/optimize/calling_conventions.pdf>


 - Armin Ronacher. *Beautiful Native Libraries*
   <http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/>


 - Herb Sutter. *Defining a Portable C++ ABI* <https://isocpp.org/files/papers/n4028.pdf>

 - *Some thoughts on binary compatibility*
   <http://blog.qt.io/blog/2009/08/12/some-thoughts-on-binary-compatibility/>

 - *Interoperability of Libraries Created by Different Compiler
   Brands* <http://www.mingw.org/wiki/Interoperability_of_Libraries_Created_by_Different_Compiler_Brands>

 - Thiago Macieira. *Binary compatibility for library developers*
   <https://events.linuxfoundation.org/sites/events/files/slides/Binary_Compatibility_for_library_devs.pdf>

 - *What Language I Use for… Creating Reusable Libraries: Objective-C*
   <http://www.informit.com/articles/article.aspx?p=2144812>

 - *Compilable modern alternatives to C/C++* -
   <https://softwareengineering.stackexchange.com/questions/162614/compilable-modern-alternatives-to-c-c>

 - [[https://stackoverflow.com/questions/3217513/are-llvm-gcc-and-clang-binary-compatible-with-gcc-particularly-mingw-gcc-on-w][linker - Are llvm-gcc and clang binary compatible with gcc? - particularly mingw gcc on Windows - Stack Overflow]]

 - [[http://rlc.vlinder.ca/blog/2009/08/binary-compatibility/][Binary Compatibility | Making Life Easier]]

 - *System V Application Binary Interface AMD64 Architecture Processor
   Supplement* <https://c9x.me/compile/bib/abi-x64.pdf>

 - *Software optimization resources* - <http://www.agner.org/optimize/>

 - [[https://softwareengineering.stackexchange.com/questions/281882/why-does-c-provide-language-bindings-where-c-falls-short][Why does C provide language 'bindings' where C++ falls short? - Software Engineering Stack Exchange]]

 - [[https://news.ycombinator.com/item?id=2379676][I've written in C++ professionally almost 12 years (17 years counting College), ... | Hacker News]]

 - [[https://www.reddit.com/r/swift/comments/67z7dy/what_is_abi_stability_and_why_does_it_matter/][What is ABI stability and why does it matter? : swift]]

 - [[https://www.reddit.com/r/programming/comments/4r6r8e/abi_vs_api/][ABI vs. API : programming]]

 - [[https://www.reddit.com/r/linux_gaming/comments/5nqaux/confused_about_compatibility/dcdxd19/][heartsofwar comments on Confused about Compatibility]]

 - [[https://www.reddit.com/r/askscience/comments/3ei05n/why_is_that_programs_need_to_be_ported_between/][Why is that programs need to be ported between operating systems in order in to function? What goes on at the programming level to require this? : askscience]]

 - [[https://www.reddit.com/r/AskProgramming/comments/5c74i4/some_thoughts_about_abis/][some thoughts about ABIs : AskProgramming]]

 - [[http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html][Damien Katz: The Unreasonable Effectiveness of C]]

 - [[https://www.reddit.com/r/linux/comments/42vngw/why_is_the_linux_community_ambivalent_about/][Why is the Linux community ambivalent about binary compatibility? : linux]]

 - [[https://www.reddit.com/r/C_Programming/comments/4afu69/implementing_cross_platform_library_in_c_proscons/][Implementing cross platform library in C pros/cons C_Programming]]

 - 

 - 

*C-Interface* 

 - *CppCon 2014: Stefanus DuToit "Hourglass Interfaces for C++ APIs* -
   <https://www.youtube.com/watch?v=PVYdHDm0q6Y>


*FFI - Foreign Function Interface*

 - https://en.wikipedia.org/wiki/Foreign_function_interface

 - [[http://www.mono-project.com/docs/advanced/pinvoke/][Interop with Native Libraries | Mono]]

 - [[https://en.wikipedia.org/wiki/SWIG][SWIG - Wikipedia]] -  Simplified Wrapper and Interface Generator

 - [[https://sourceware.org/libffi/][libffi]] - A Portable Foreign Function Interface Library

 - [[https://en.wikipedia.org/wiki/Libffi][libffi - Wikipedia]]

 - [[https://docs.python.org/3/extending/extending.html][1. Extending Python with C or C++ — Python 3.6.1 documentation]]

 - [[https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx][Platform Invoke Tutorial (C#)]]

 - [[https://www.reddit.com/r/explainlikeimfive/comments/5c2yfq/eli5_how_can_a_single_software_project_use/][Eli5: How can a single software project use multiple languages? Wouldn't the compiler have difficulty understanding what's what? : explainlikeimfive]]

 - [[https://www.reddit.com/r/learnprogramming/comments/3dzif8/how_do_you_communicate_between_different_computer/][How do you communicate between different computer languages? : learnprogramming]]


*Courses and Online Books*

 - [[https://en.wikibooks.org/wiki/C%2B%2B_Programming][C++ Programming - Wikibooks, open books for an open world]]


 - Francois Fleuret. *C++ lecture notes*
   <https://www.idiap.ch/~fleuret/files/Francois_Fleuret_-_C++_Lecture_Notes.pdf>


 - Course:  https://www3.ntu.edu.sg/home/ehchua/programming/

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp0_Introduction.html][An Introduction to C++ Programming for First-time Programmers - C++ Programming Tutorial]] - https://archive.is/MRDZI

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_STL.html][C++ Libraries, String and Standard Template Library]] - https://archive.is/lrIDk

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp2_MoreBasics.html][C++ More Basics]] - https://archive.is/pr7pn

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html][Object-oriented Programming (OOP) in C++]] - https://archive.is/lpXae

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html][C++ Pointers and References]] - https://archive.is/Ja1xJ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp5_OOPExamples.html][Examples on Classes and Objects]] - https://archive.is/eZJPl

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp8_Template.html][Object-oriented Programming (OOP) in C++ - Template and Generic Programming]] - https://archive.is/eG0KZ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp10_IO.html][C++ IO Streams and File Input/Output]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp11_TipsTraps.html][Examples on Classes and Objects]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/DataStructureAlgorithm.html][Data Structure and Algorithm]]

*Unix - API / LibC*

 - *User space and the libc interface* - <https://www.win.tue.nl/~aeb/linux/lk/lk-3.html>


*Embedded Systems*

 - [[http://bitbashing.io/embedded-cpp.html][C++ On Embedded Systems]]

 - [[http://git.eti.pg.gda.pl/intel-grant/pliki/esp/ESP_Toolchain_ENG.pdf][Embedded Systems Programming OS Linux - Toolchain]]

 - 

*Alternatives to C++*

The C++ language is suitable for system programming, writing native
applications and writing high performance software components or
libraries. However the lack of standard ABI - Application Binary
interface makes calling C++ calling a C++ library through FFI -
Foreign Function Interface in another language harder.

Due to the C++ ABI issues, many portable libraries that are easier to
invoked through a FFI are written in C, for instance, GTK GUI toolkit,
... 

Selection Requirements: 

 - Compile to native code.

 - Have an stable and standard ABI - Application Binary Interface like C.

 - Be able to build shared libraries *.so or *.dll and easily invoked
   through FFI - Foreign Function Intefaces of high level languages
   such as Python, Ruby, Java, C# and so on.

 - Be memory safe in order to avoid buffer overflow. 


_D language_


   - [[http://bitbashing.io/2015/01/26/d-is-like-native-python.html][D is like native Python]]

   - [[http://code.dlang.org/packages/pyd][Package pyd version 0.9.9 - DUB - The D package registry]]

   - [[http://dlang.org/spec/abi.html][Application Binary Interface - D Programming Language]] 

   - [[https://dlang.org/dll-linux.html][Writing Shared Libraries With D On Linux - D Programming Language]]

   - [[http://blog.tenstral.net/2016/05/adventures-in-d-programming.html][Adventures in D programming | Ximions Blog]]

_Gambit Scheme_ 

A Scheme implementation that is interactive with a REPL and that can
generate C-code and invoke C-libraries. It can be compiled to
shared libraries *.so or *.dlls and be called from scheme REPL.

_Rust_

** C => to C++ Guidelines

+ Malloc - Avoid malloc and manual memory management. Instead of that
  use _new_ and _vector_ instead of realloc.
+ Pointer - Avoid pointers.
+ Arrays - Use C++ STL vector classes instead of arrays.
+ Strings. Don't use array of characters to represent a string,
  instead of that use c++ strings by inclunding '#include <string>'
  header at the top of file.
+ Separate the operating system depedent code from the
  operating system agnostic code.
** Cross Language Interoperability / Language Bindings - C-API and FFI 
  
 *Stack Overflow Questions* 

  + [[https://stackoverflow.com/questions/2045774/developing-c-wrapper-api-for-object-oriented-c-code][Developing C wrapper API for Object-Oriented C++ code]]
    + Manual solution: Disadvantage - requires maintaining the C-API and the C++ code.
      + Every object is passed about in C an opaque handle (void* voidpointers).
      + Constructors and destructors are wrapped in pure functions
      + Member functions are pure functions.
      + Other builtins are mapped to C equivalents where possible.
    + Automatic Solution: *SWIG* Wrapper generator.
      + Disadvantage: SWIG cannot parse all C++ code.
 
 *Botan library C-API and language bindings*
  + https://github.com/randombit/botan/wiki/Language-Bindings
    + Extracted: "C89 - Available out of the box in the header
      ffi.h. _This C interface_ is also intended to be the preferred way
      of binding Botan to other languages, as it communicates
      _exclusively through function calls operating on opaque structs,_
      _and without transferring ownership of memory_. This makes it easy
      to call using ctypes-style FFI libraries."

  + [[https://github.com/randombit/botan/blob/master/src/python/botan2.py][Botan - Python wrapper]]

  + Ruby FFI: https://github.com/riboseinc/ruby-botan/tree/master/lib/botan

  + [[https://github.com/randombit/botan-rs][Botan-RS]] - Ruby wrapper of Botan library.

  + [[https://github.com/randombit/botan-ocaml/blob/master/botan.ml][Botan-OCAML]]

  + FFI - C-API Code:
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi.h][ffi.h]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi.cpp][ffi.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_block.cpp][ffi_block.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_cipher.cpp][ffi_cipher.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_fpe.cpp][ffi_fpe.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_util.h][ffi_util.h]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_mp.cpp][ffi_mp.cpp]]

 *CXXI: Bridge the C++ and C# Worlds* (Non Portable based on GCCXML)
 
 + https://tirania.org/blog/archive/2011/Dec-19.html

 *Swig - Wrapper Generator* 

  + *Shogun* toolbox Library:
    + [[https://github.com/shogun-toolbox/shogun/tree/develop/src/interfaces][Interfaces]]  - SWIG Interface files.
    + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/swig/Machine.i][interfaces/swig/Machine.i]]
    + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/swig/Mathematics.i][interfaces/swig/Mathematics.i]]
    + Python SWIG Files:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/CMakeLists.txt][interfaces/python/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/CustomKernel_protocols.i][python/CustomKernel_protocols.i]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/swig_typemaps.i][python/swig_typemaps.i]]
      + 
    + CSharp C#
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/csharp/CMakeLists.txt][csharp/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/csharp/swig_typemaps.i][csharp/swig_typemaps.i]]
    + OCtave:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/octave/CMakeLists.txt][octave/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/octave/swig_typemaps.i][octave/swig_typemaps.i]]
    + Java:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/java/swig_typemaps.i][java/swig_typemaps.i]]
    + RLang:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/r/swig_typemaps.i][r/swig_typemaps.i]]

  + *GNU Cash*
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/CMakeLists.txt][CMAkeLists.txt]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/common/base-typemaps.i][base-typemaps.i]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/CMakeLists.txt][bindigns/CMakeLists.txt]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/gnucash_core.i][python/gnucash_core.i]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/time64.i][python/time64.i]]

  + *Casadi*
    + [[https://github.com/casadi/casadi/blob/master/CMakeLists.txt][CMakeLists.txt]]
    + [[https://github.com/casadi/casadi/blob/master/swig/CMakeLists.txt][swig/CMakeLists.txt]] 
    + [[https://github.com/casadi/casadi/blob/master/swig/casadi.i][swig/casadi.i]]
    + [[https://github.com/casadi/casadi/blob/master/swig/internal.i][swig/internal.i]]
    + https://github.com/casadi/casadi/tree/master/swig/matlab
    + https://github.com/casadi/casadi/tree/master/swig/octave
    + https://github.com/casadi/casadi/tree/master/swig/python

  + *Fenics*
    + [[https://github.com/FEniCS/dolfin/blob/master/CMakeLists.txt][CMakeLists.txt]]
    + [[https://github.com/FEniCS/dolfin/blob/master/python/CMakeLists.txt][/python/CMakeLists.txt]] (Pybind11 FFI)
    + [[https://github.com/FEniCS/dolfin/tree/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig][/dolfin/swig]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/shared_ptr_classes.i][/swig/shared_ptr_classes.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/version.i][/swig/version.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/exceptions.i][/swig/exceptions.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/array.i][/swig/typemaps/array.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/numpy.i][/swig/typemaps/numpy.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/std_map.i][/dolfin/swig/typemaps/std_map.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/std_vector.i][/typemaps/std_vector.i]]
      + 
      + 

** Interesting Source Codes 

 + *Libfuse* (C, not C++)
   * https://github.com/libfuse/libfuse
   * The reference implementation of the Linux FUSE (Filesystem in
     Userspace) interface.  

 + *CERN-Reflex* => SEAL Reflection System 
   + https://github.com/snoopspy/reflex/tree/master/src
   + What it can do:
     + Return type by name, by type info, invoke constructor of
       registered type.
     + Return type unique identifier.
   + Techniques Used:
     + Type erasure using C++ template technique and void* pointer.
   + Some Codes:
     + Reflection types database
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Type.h
       + https://github.com/snoopspy/reflex/blob/master/src/Kernel.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/Typedef.h
       + https://github.com/snoopspy/reflex/blob/master/src/Class.h
       + https://github.com/snoopspy/reflex/blob/master/src/Function.h
     + Property List => Properties get/set can be added to an object
       at runtime.
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/PropertyList.h
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyList.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyListImpl.cxx
     + Object Interface
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Object.h
     + Any Container for type erasure derived from Boost.Variant 
       + https://github.com/snoopspy/reflex/blob/master/src/Any.cxx
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Any.h
     + Shared library and Plugins - wrapper
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/SharedLibrary.h
       + https://github.com/snoopspy/reflex/blob/master/src/PluginService.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PluginFactoryMap.cxx
     + Python Code Generator => Parses GCCXML to generate a C++ code
       with reflection dictionary metadata. 
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/genreflex.py
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/gendict.py
       + 

 + *GNU Scientific Library* (C-lib)
   + https://github.com/ampl/gsl 

   + Most Used C-features:
     + *static* keyword used for make functions private to the
       compilation unit they are defined, so they are not visible in
       the executable, static or shared library. It is important to
       avoid name clashing because C doesn't have namespaces and it
       also needs all names to be unique as this language doesn't have
       overloading like C++.  

     + *const double array[], size_t size* => For passing C-arrays
       allocated by the caller code.

     + _void* vstate_ - Void pointer (opaque pointer) for passing state
       around functions and hiding data representation. TL;DR. Emulate
       orientation.

     + _const void* vstate_  => The "object" cannot be modified by the
       function.

     + malloc, free => Heap memory allocation.

   + Some Codes:
     + Polynomial Evaluation 
       + https://github.com/ampl/gsl/blob/master/poly/gsl_poly.h
     + Root Solvers 
       + https://github.com/ampl/gsl/blob/master/roots/bisection.c
       + https://github.com/ampl/gsl/blob/master/roots/newton.c
       + https://github.com/ampl/gsl/blob/master/roots/gsl_roots.h
       + https://github.com/ampl/gsl/blob/master/roots/steffenson.c
       + https://github.com/ampl/gsl/blob/master/gsl_math.h
     + Interpolation
       + https://github.com/ampl/gsl/blob/master/interpolation/linear.c
       + https://github.com/ampl/gsl/blob/master/interpolation/spline.c
       + https://github.com/ampl/gsl/blob/master/interpolation/poly.c
     + Derivate:
       + https://github.com/ampl/gsl/blob/master/deriv/deriv.c
     + Probability Distributions:
       + Normal - https://github.com/ampl/gsl/blob/master/cdf/gauss.c
       + Normal Inverse - https://github.com/ampl/gsl/blob/master/cdf/gaussinv.c
       + LogNormal https://github.com/ampl/gsl/blob/master/cdf/lognormal.c
       + T-student - https://github.com/ampl/gsl/blob/master/cdf/tdist.c
       + 

 + *CERN-Root* (CERN's Interactive C++ Framework)
   + https://github.com/root-project/root
   + Features Used:
     + std:: math functions, std::log, std::exp, std::max, std::min, std::fabs
   + Some Codes:
     + https://github.com/root-project/root/blob/master/.clang-format
     + https://github.com/root-project/root/blob/master/math/mathcore/src/RichardsonDerivator.cxx
     + https://github.com/root-project/root/blob/master/math/mathcore/src/BrentMethods.cxx

 + *libspng* (C-lib)
   + https://gitlab.com/randy408/libspng
   + A simpler, modern libpng alternative
   + Some Codes:
     + [[https://gitlab.com/randy408/libspng/blob/master/CMakeLists.txt][CMakeLists.txt · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/common.c][common.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/decode.c][decode.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/spng.h][spng.h · master · Randy / libspng · GitLab]]

 + *go-ole* (GO Language)
   + https://github.com/go-ole/go-ole
   + win32 ole implementation for golang
   + Some Codes:
     + https://github.com/go-ole/go-ole/blob/master/com.go
     + https://github.com/go-ole/go-ole/blob/master/guid.go
     + https://github.com/go-ole/go-ole/blob/master/idispatch.go
     + https://github.com/go-ole/go-ole/blob/master/variant.go

 + *Busybox* (C Code) - Embedded Linux Swiss Army Knife
   + https://git.busybox.net/busybox/tree/
   + Some Codes:
     + https://git.busybox.net/busybox/tree/console-tools/reset.c
     + https://git.busybox.net/busybox/tree/coreutils
     + https://git.busybox.net/busybox/tree/coreutils/nohup.c
     + https://git.busybox.net/busybox/tree/coreutils/ls.c
     + https://git.busybox.net/busybox/tree/coreutils/shred.c (Secure deleting)
     + https://git.busybox.net/busybox/tree/coreutils/tail.c
     + https://git.busybox.net/busybox/tree/networking/arp.c
     + https://git.busybox.net/busybox/tree/networking/ifconfig.c

 + *Android C-APIs* (C Code)
   + https://android.googlesource.com/platform/hardware/
   + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware
   + Some Codes:
     + [[https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/gps.h][include/hardware/gps.h - platform/hardware/libhardware - Git at Google]]
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/camera.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/nfc.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/sensors.h

 + *Terminion* - (Rust) Library for low level ANSI/vt100 terminal control.
   + https://github.com/redox-os/termion
   + Some Codes:
     + https://github.com/redox-os/termion/blob/master/src/color.rs
     + https://github.com/redox-os/termion/blob/master/examples/is_tty.rs
     + https://github.com/redox-os/termion/blob/master/src/clear.rs
     + https://github.com/redox-os/termion/blob/master/src/screen.rs
