#+INCLUDE: theme/style.org
#+TITLE: CPP / C++ - Bookmarks 
#+DESCRIPTION: cpp c++ code examples, demonstrations, design pattern and integration.
#+STARTUP: content 

* Bookmarks 
** Places 

 *Places:*

 + https://isocpp.org/blog  

 + [[https://groups.google.com/forum/#!forum/comp.lang.C][Usenet News Group - comp.lang.c]]

 + [[https://groups.google.com/forum/#!forum/comp.lang.c++][Usenet News Group - comp.lang.c++]]

 + [[https://groups.google.com/forum/#!forum/comp.lang.c++.moderated][Usenet News Group - comp.lang.c++.moderated]]

 + [[https://groups.google.com/forum/#!forum/comp.lang.ada][Usenet News Group - comp.lang.ada]]

 + [[https://groups.google.com/forum/#!topic/comp.lang.forth][Usenet News Group - comp.lang.forth]] 

 + [[https://www.reddit.com/r/cpp][Reddit /r/cpp]]

 + [[https://www.reddit.com/r/cpp_questions][Reddit /r/cpp_questions]]

 + [[https://www.reddit.com/r/Qt5][Reddit /r/Qt5]]

 + [[https://www.reddit.com/r/gamedev/][Reddit /r/gamedev]]

 + [[https://www.reddit.com/r/beaglebone][Reddit /r/beaglebone]]

 + [[https://www.reddit.com/r/RTLSDR/][Reddit RTLSDR]] - Low-cost software defined radio.

 + [[https://www.google.com/search?source=hp&ei=DxBOXOzBK9Wy5OUPqMWtmAU&q=site%253Awww.reddit.com%252Fr%252Fprogramming+"c%252B%252B"&btnK=Google+Search&oq=site%253Awww.reddit.com%252Fr%252Fprogramming+"c%252B%252B"&gs_l=psy-ab.3...1667.10708..10979...0.0..0.222.6239.0j35j4......0....1..gws-wiz.....0..0.J2yoNmHunTc][Reddit /r/programming - search C++]]

 + [[https://www.google.com/search?ei=aQ5OXLzbF8ui5OUPnZOBgAQ&q=site%253Ahttps%253A%252F%252Fnews.ycombinator.com+"c%252B%252B"&oq=site%253Ahttps%253A%252F%252Fnews.ycombinator.com+"c%252B%252B"&gs_l=psy-ab.3...8445.16108..17177...4.0..0.176.2558.0j17......0....1j2..gws-wiz.......0i71j0.6PNuVmbul4c][Hackernews YCombinator]] [1]

 + [[https://hn.algolia.com/?sort=byPopularity&prefix&page=0&dateRange=all&type=story&query=c%252B%252B][Hackernews YCombinator]] [2]

 + [[https://stackoverflow.com/questions/tagged/c%252b%252b%2520c][Stackoverlow - C and C++ tags]]

 + [[https://codereview.stackexchange.com/questions/tagged/c%252b%252b%2520c][Codereview - stackexchange C and C++ tags]]

 + [[https://reverseengineering.stackexchange.com/][Reverse Engineering Stack Exchange]]

 + Magazines and publications 

   + [[https://www.google.ca/search?ei=Xk9TXL78H-6x5OUP0_iaCA&q=site%253Ahttps%253A%252F%252Fwww.embedded.com+%2522c%252B%252B%2522&oq=site%253Ahttps%253A%252F%252Fwww.embedded.com+%2522c%252B%252B%2522&gs_l=psy-ab.3...14903.24244..24483...0.0..0.207.2263.0j13j1......1....1j2..gws-wiz.....0..0i71j0j0i67.wamS_REatZE][embedded.com]]

   + [[https://www.bing.com/search?q=site%253Amil-embedded.com+c%252B%252B+c+ada+python&qs=n&form=QBRE&sp=-1&pq=site%253Amil-embedded.com+c%252B%252B+c+ada+python&sc=0-38&sk=&cvid=08717FFF7A4C4C8DA82FD47BC133B819][mil-embedded.com]]

   + [[https://www.google.ca/search?source=hp&ei=I9CUXI-dKOOz5OUP3o2mMA&q=site%253Ahttps%253A%252F%252Fbarrgroup.com+C%252B%252B+embedded&btnK=Google+Search&oq=site%253Ahttps%253A%252F%252Fbarrgroup.com+C%252B%252B+embedded&gs_l=psy-ab.3...245.7310..7434...0.0..0.186.2748.0j19......0....1j2..gws-wiz.....0..0.8u1UmD_gkCQ][Embedded Systems - Barr Group]]

 + Usenet Newsgroup: *comp.dsp*
   + [[https://groups.google.com/forum/#!forum/comp.dsp][comp.dsp - Google Groups]]

 + https://dsp.stackexchange.com/ (Signal Processing)

 + https://developers.google.com/edu/c++/ - Google's C++ classes.

 + [[https://www.google.com/search?source=hp&ei=JxRrXLPXGJfW5OUP6KSSUA&q=site%253Ahttps%253A%252F%252Fvisualstudiomagazine.com+"c%252B%252B"&btnK=Google+Search&oq=site%253Ahttps%253A%252F%252Fvisualstudiomagazine.com+"c%252B%252B"&gs_l=psy-ab.3...1131.6101..6499...0.0..2.759.3615.0j8j0j1j0j2j1......0....1j2..gws-wiz.....0..0.vFl1hmiUQEY][Visual Studio Magazine - Google Seach Filter]]

 + [[https://visualstudiomagazine.com/articles/list/new-age-c.aspx][Modern C++ -- Visual Studio Magazine]] (MSDN)

 + Alternatives Languages:

   + [[https://www.reddit.com/r/rust][Reddit /r/rust]]

   + [[https://www.reddit.com/r/ada][Reddit /r/ada]]

   + [[https://www.reddit.com/r/fortran][Reddit /r/fortran]]

   + https://forum.dlang.org/

   + https://dlang.org/

   + [[https://www.reddit.com/r/d_language][Reddit r/d_language]]

 *Companies and Organizations*

 + ISO C++ Committee
   + https://isocpp.org/blog  

 + [[https://developers.redhat.com/blog/category/c-plus-plus/][Redhat Blogs - C++]]

 + [[https://blogs.msdn.microsoft.com/visualstudio/][The Visual Studio Blog]]

 *Blogs and homepages:*

 + Bjarne Stroustrup (Creator of C++ Language)
   * http://www.stroustrup.com/
   * [[http://www.stroustrup.com/arm.html][The Annotated C++ Reference Manual]]
   * [[http://www.stroustrup.com/C++11FAQ.html][C++11 - the new ISO C++ standard]] 

 + Alexander A. Stepanov Papers (Creator of STL and generic/template programming)
   + http://stepanovpapers.com/

 + [[https://blogs.msdn.microsoft.com/oldnewthing/][The Old New Thing]] - Raymond Chen - Microsoft Inc. MSFT
   + Provides lots of useful information about Windows internals and
     Windows API.

 + [[http://scottmeyers.blogspot.com][Scott Meyers's Blog]]

 + [[https://arne-mertz.de/category/cpp/][Arne Mertz - Simplify C++]]

 + [[https://www.fluentcpp.com][Jonhattan Boccara's => Fluentcpp.com]]

 + [[https://mariusbancila.ro/blog/category/it/software/c/page/3/][Marius Bancila's blog]]

 + [[https://www.bfilipek.com][Bartek's coding blog]] - bflipek

 + [[https://herbsutter.com/][Sutter's Mill]] - Herb Sutter

 + [[https://yosefk.com/blog/?s=c%252B%252B][Yosefk.com]] and  https://yosefk.com/c++fqa/

 + https://vector-of-bool.github.io/

 + http://fastcompression.blogspot.com/

 + https://blog.vorbrodt.me/

 + https://atadiat.com/en/ - (Embedded Systems)

 + https://www.codeweavers.com/about/blogs/aeikum (Wine - WinAPI emulation)

 + https://blog.fuzzing-project.org/ (Security)
** Software Design 

 *Software Design*

 + [[https://eklitzke.org/in-defense-of-c++][In Defense of C++]]

 + [[https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_4.html][Taligent's Design Guidelines]]

 + [[http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/][Beautiful Native Libraries - Armin Ronacher]]

 + [[https://doc.qt.io/archives/qq/qq13-apis.html][Designing Qt-Style C++ APIs]]

 + [[http://www.stroustrup.com/ETAPS-corrected-draft.pdf][Foundations of C++ ETAPS 2012 Draft]] Stroustrup

 + [[https://mixmastamyk.bitbucket.io/pro_soft_dev/][Contents — Professional Software Development 2019.01]] (Online Book)

 + [[https://abseil.io/tips/][Google's Abseil library - C++ Tips of the Week]]

 + [[http://scottmeyers.blogspot.com/2013/01/effective-c11-content-and-status.html][Scott Meyers - Effective C++11: Contents and Status]]

 + [[http://www.drdobbs.com/cpp/how-non-member-functions-improve-encapsu/184401197][Scott Meyers - How Non-Member Functions Improve Encapsulation]]

 + [[https://www.strchr.com/software_interface][Software Interface Design Tips]]

 + [[https://web.archive.org/web/20050413215843/http://www.oonumerics.org:80/tmpw00/kuehl.html][STL and OO Don't Easily Mix]] 

 + [[https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765][Stupid C++ namespace tricks – The Old New Thing]] - (Namespace Composition)

 + [[http://stepanovpapers.com/notes.pdf][Alexander Stepanov - STL/SGI Notes]]

 + [[http://www.tutok.sk/fastgl/callback.html][CALLBACKS IN C++ USING TEMPLATE FUNCTORS]] - Rich Hickey 1994

 + [[https://deepxtracover.blogspot.com/2019/01/object-oriented-sdk-development.html][Object oriented SDK development]]

 + [[http://www.two-sdg.demon.co.uk/curbralan/papers/SixOfTheBest.pdf][C++ Workshop - Six of the best]]

 + [[http://progtutorials.tripod.com/cpp1.htm][C++ Advanced part I]]

 + [[http://progtutorials.tripod.com/cpp2.htm][C++ Advanced part II]]

 + [[https://www.maizure.org/projects/decoded-gnu-coreutils/][Maizure's Project - Decode GNU Coreutils]]
   + "This resource is for novice programmers exploring the design of
     command-line utilities. It is best used as an accompaniment
     providing useful background while reading the source code of the
     utility you may be interested in. This is not a user guide --
     Please see applicable man pages for instructions on using these
     utilities."

 + Online Book: [[http://aosabook.org/en/index.html][The Architecture of Open Source Applications]]
   + "Architects look at thousands of buildings during their training,
     and study critiques of those buildings written by masters. In
     contrast, most software developers only ever get to know a
     handful of large programs well—usually programs they wrote
     themselves—and never study the great programs of history. As a
     result, they repeat one another's mistakes rather than building
     on one another's successes. Our goal is to change that. In these
     two books, the authors of four dozen open source applications
     explain how their software is structured, and why. What are each
     program's major components? How do they interact? And what did
     their builders learn during their development? In answering these
     questions, the contributors to these books provide unique
     insights into how they think. " 

 + Software optimization resources
   + <https://www.agner.org/optimize/>

 + C++ Containers Benchmark - Perfomance measurement of containers
   vector, list, deque and pfl::colony.
   + <https://baptiste-wicht.com/posts/2017/05/cpp-containers-benchmark-vector-list-deque-plf-colony.html>

 *Lessons and Techniques Extracted from Other Projects and Codes*

   + [[http://cppdepend.com/blog/?p=359][The hidden cost of a high coupling with a C++ framework. – CppDepend Blog]]
     + Summary: Presents the costs of C++ frameworks such as QT and
       MFC. Intrusiviness; reusing the project requires mastering the
       framework and hard to reuse the code in other projects.

   + [[http://cppdepend.com/blog/?p=324][Some C++ good practices from the OpenCV source code – CppDepend Blog]]

   + [[https://cppdepend.com/blog/?p=179][Lessons to learn from the old well implemented games: Prince of Persia && Doom3. – CppDepend Blog]]

   + [[https://cppdepend.com/blog/?p=418][Try to understand the Linus Torvalds C++ opinion. – CppDepend Blog]]

   + [[http://www.codersnotes.com/notes/a-constructive-look-at-templeos/][A constructive look at temple-OS]]

 *Memory Management* 
 
 + [[https://buckaroo.pm/posts/value-ptr-the-missing-smart-ptr/][Buckaroo - The C++ Package Manager value_ptr — The Missing C++ Smart-pointer]]

 + [[https://www.memorymanagement.org/mmref/index.html][Introduction to memory management — Memory Management Reference 4.0 documentation]]

 + [[https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/][Microsoft: 70 percent of all security bugs are memory safety issues | ZDNet]]

 + [[https://msrc-blog.microsoft.com/2019/07/18/we-need-a-safer-systems-programming-language/][MSRC/Microsft - We Need a Safer Systems Programming Language]]

 *Defensive Programming* 

   + http://kayari.org/cxx/antipatterns.html

   + [[http://cppdepend.com/blog/?p=859][Defensive programming with new C++ standards – CppDepend Blog]]
     + Summary: Defensive programming is a design approach to ensure
       that a software can work under unexpected
       situations. Techniques:
       + assertions (runtime checking of assumptions) => Pre-conditions
         and Post-conditions.
       + static assertions (C++11) (compile-time checking)
       + C++20 design-by contracts 
       + assumming worst case scenario for user input
       + testing

 *Creating C-APIs, interfacing C++ with other languages and C-programming*

 + [[https://hackernoon.com/6-reasons-why-we-distribute-c-libraries-as-source-code-2dc614d5ef1e][6 Reasons Why We Distribute C++ Libraries as Source-Code]]

 + [[https://hsivonen.fi/modern-cpp-in-rust/][How I Wrote a Modern C++ Library in Rust]] (C-API design, FFI)
   + Note: Describes the design decisions of a C-API (C-interface) for
     a Firefox Character encoding library written in Rust
     language. The C-API is used for calling the library from C++.

 + [[https://www.fast.ai/2019/01/13/swift-random/][C++11, random distribution, and Swift]] (C-API design, FFI)
   + Note: Presents how to call C++11 STL random distribution API from
     Swift language by designing a C-API.

 + [[https://spin.atomicobject.com/2013/02/15/ffi-foreign-function-interfaces/][When & How to Use an FFI (Foreign Function Interface)]]

 + [[https://stackoverflow.com/questions/4448677/can-a-c-program-handle-c-exceptions][Can a C program handle C++ exceptions? - Stack Overflow]]
   + Discussion about C++ component DLL and C++ exceptions handling in
     C and C++.
   + Solution: As C Language lacks exceptions and the C++ exception
     implementation is not standard among different compilers due to
     lack of a default ABI, the best way to deal with exceptions in
     C++ shared libraries with C-APIs is to catch all exceptions and
     return an error code as function return value or a function
     parameter. The C++ functions std::set_unexpected and
     std::set_terminate can be used for disabling or redirecting
     exceptions.

 + [[http://samanbarghi.com/blog/2016/12/06/generate-c-interface-from-c-source-code-using-clang-libtooling/][Generate C interface from C++ source code using Clang libtooling · Saman Barghi]]

 + [[http://cwoodall.com/blog/2018/02/24/using-clang-and-python-to-generate-cpp-struct-serde-fns.html][Reflection in C++ to Generate Serializable Structs Using libclang and Python]]

 + Platypus Perl 6 FFI built on top of LibFFI:
   + https://metacpan.org/pod/FFI::Platypus
   + https://metacpan.org/pod/FFI::Platypus::API
   + [[https://metacpan.org/pod/FFI::Platypus::Lang::CPP][FFI::Platypus::Lang::CPP]] => Module that can call C++ classes
     directly from code compiled with GCC. It uses the GCC (Itanium
     ABI) demangling schema for calling constructors, destructors and
     symbols directly.
   + [[https://metacpan.org/pod/FFI::Platypus::Lang::Fortran][FFI::Platypus::Lang::Fortran]]
   + [[https://metacpan.org/pod/FFI::Platypus::Lang::Pascal][FFI::Platypus::Lang::Pascal]]

 *Low-Level, Kernel and System Programming* 

  + [[http://blog.reverberate.org/2013/05/deep-wizardry-stack-unwinding.html][Deep Wizardry: Stack Unwinding]]

  + [[https://bitbashing.io/embedded-cpp.html][C++ On Embedded Systems]] - Build a toolchain

  + [[http://david.tribble.com/text/cdiffs.htm][Incompatibilities Between ISO C and ISO C++]]

  + [[https://legacy.gitbook.com/download/pdf/book/nanxiao/strace-little-book][Nan Xiao - strace little Book]]
    + Notes about using the strace tool for tracing Linux system calls
      performed by applications.

  + [[https://wiki.osdev.org/C%2B%2B][C++ - OSDev Wiki]]

  + [[https://elinux.org/Main_Page][Embedded Linux Wiki]]

  + [[https://lwn.net/Articles/444910/][Object-oriented design patterns in the kernel, part 1 LWN.net]] 

  + [[https://linux-kernel-labs.github.io/master/index.html][Linux Kernel Teaching — The Linux Kernel documentation]]

  + [[https://www.tldp.org/LDP/lkmpg/2.6/html/][The Linux Kernel Module Programming Guide]]

  + Book: Zhao Jiong. [[http://www.oldlinux.org/download/ECLK-5.0-WithCover.pdf][A Heavily Commented Linux Kernel Source Code]] - Version 0.12
    + Detailed annotations about Linux Kernel

  + [[https://emertxe.com/embedded-course-materials/embedded-systems-courses-linux-internals-and-networking.pdf][Course Booklet for LINUX Internals Programming]]

  + [[http://www.ee.nmt.edu/~rison/ee352_fall08/Getting_Started_with_RTLinux.pdf][Getting Started with RTLinux (Real Time Linux)]]

  + Video: [[https://www.reddit.com/r/linux/comments/ajztr3/making_c_less_dangerous_in_the_linux_kernel_by/][Making C Less Dangerous in the Linux kernel by Kees Cook at lca2019 : linux]]

  + [[http://www.bitsnbites.eu/benchmarking-os-primitives/][Benchmarking OS primitives – Bits'n'Bites]]

  + [[http://web.archive.org/web/20100213131352/https://www.microsoft.com/whdc/driver/kernel/KMcode.mspx][C++ for Kernel Mode Drivers: Pros and Cons]] (Windows NT)
    + Microsft MSFT considerations about building Windows Kernel
      Device drivers with C++.
    + Description: "C++ with its object features appears to be a
      natural match for the semantics of Microsoft Windows Driver
      Model (WDM) and Windows Driver Foundation (WDF)
      drivers. However, some C++ language features can cause problems
      for kernel-mode drivers that can be difficult to find and
      solve. To help you make an informed choice, this paper shares
      current insights and recommendations from Microsoft’s ongoing
      investigation of using C++ to write kernel-mode drivers for the
      Windows family of operating systems."

  + [[https://developer.apple.com/library/archive/documentation/DeviceDrivers/Conceptual/WritingDeviceDriver/CPluPlusRuntime/CPlusPlusRuntime.html][APPLE's => The libkern C++ Runtime]]

 *Deployment*

 + [[https://casualhacking.io/blog/2018/12/25/create-highly-portable-elf-binaries-using-the-build-anywhere-toolchain][Create highly portable ELF binaries using the build-anywhere toolchain — casualHacking]]

 + [[https://www.arangodb.com/2018/04/static-binaries-c-plus-plus-application/][Static binaries for a C++ application - ArangoDB database]]
   + Summary: "This describes how to generate a completely static
     binary for a complex C++ application which runs on all variants
     of Linux without any library dependency."

 + [[https://radupopescu.net/2016/06/static-linking-for-c---with-docker-and-alpine-linux/][Static linking for C++ with Docker and Alpine Linux - Programming with Jetlag]]

 *Exception and Error Handling*

 + ISO-CPP [[https://isocpp.org/wiki/faq/exceptions][Exceptions and Error Handling, C++ FAQ]]
   + Great coverage about error handling, error recovery, performance
     considerations about exceptions and their benefits and drawbacks
     as well.

 + [[https://cppdepend.com/blog/?p=311][Exceptions is one of the controversy mechanism in C++. Should I use them? – CppDepend Blog]]
   + Provides insights of widely known C++ experts and gurus about
     exceptions and useful considerations.

 + [[http://www.acodersjourney.com/2016/08/top-15-c-exception-handling-mistakes-avoid/][Top 15 C++ Exception handling mistakes and how to avoid them. - A CODER'S JOURNEY]]

 *Fail-fast approach*

 + [[https://www.codeproject.com/Articles/1138445/Introduction-to-the-Fail-Fast-Principle-in-Softwar][Introduction to the 'Fail Fast!' Principle in Software Development - CodeProject]]
 + [[https://enterprisecraftsmanship.com/2015/09/15/fail-fast-principle/][Fail Fast principle - Enterprise Craftsmanship]]
 + [[http://ithare.com/unchecked-exceptions-for-c/][Unchecked Exceptions for C++ - IT Hare on Soft.ware]]
 + [[http://joeduffyblog.com/2016/02/07/the-error-model/][Joe Duffy - The Error Model]]
 + [[http://wiki.c2.com/?FailFast][Fail Fast]]

 *Header-only libraries examples*
 
 + [[http://mariobadr.com/creating-a-header-only-library-with-cmake.html][Mario Badr | Creating a Header-Only Library with CMake]]

 + [[https://gist.github.com/sivachandran/3a0de157dccef822a230][bin2h.cmake]] - Pure CMake function to convert any file into C/C++
   header, implemented with only CMake commands. 

 + [[https://github.com/pybind/pybind11][pybind11]] [BEST EXAMPLE] - C++ header-only library for creating
   Python native modules (native libraries) in C++ >= C++11. Pybind11
   can also be used to create Python modules or bindings to already
   existing C++ code without any intrusion.

 + [[https://github.com/martinmoene/gsl-lite][gsl-lite]] - GSL Lite: Guidelines Support Library for C++98, C++11 up

 + [[https://github.com/badaix/popl][badaix/popl]]
   + Header-only program options parser library.

 + [[https://github.com/badaix/aixlog][badaix/aixlog]]
   + Header-only C++ logging library.

 + [[https://github.com/mateidavid/zstr][mateidavid/zstr]]
   + A C++ header-only ZLib wrapper (Note: Zlib is a C-library or
     C-API). - http://www.zlib.net/manual.html

 + https://github.com/coatless/rcppensmallen
   + Rcpp integration for the Ensmallen templated C++ mathematical
     optimization library

 + [[https://github.com/tbs1980/NumericalIntegration][tbs1980/NumericalIntegration]]
   + A C++ header-only, precision-independent library for performing
     numerical integration.

 + [[https://github.com/aaron-michaux/ieee754-packing][ieee754-packing: Packing and unpacking <float> and <double> using std c++ only]]

 *Cryptography*

 + https://www.cryptopp.com/wiki/Main_Page - This wiki contains
   explanations about lots of crypto concepts.

 + [[https://www.brandonstaggs.com/2007/07/26/implementing-a-partial-serial-number-verification-system-in-delphi/][Implementing a Partial Serial Number Verification System in Delphi – Brandon Staggs .Com]]

** Code Standards and guidelines 

 + [[https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#main][ISO C++ Core Guidelines]] - "This is a set of core guidelines for
   modern C++, C++17, C++14, and C++11, taking likely future
   enhancements and ISO Technical Specifications (TSs) into
   account. The aim is to help C++ programmers to write simpler, more
   efficient, more maintainable code."

   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors-assignments-and-desctructors][C++ Core Guidelines: The Rule of Zero, Five, or Six - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-when-you-can-t-throw-an-exception][C++ Core Guidelines: finally in C++ - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors][C++ Core Guidelines: Constructors - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-more-rules-to-concurrency-and-parallelism][C++ Core Guidelines: More Rules to Concurrency and Parallelism - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-concurrency-and-lock-free-programming][C++ Core Guidelines: Concurrency and lock-free Programming - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-rules-to-error-handling][C++ Core Guidelines: Rules for Error Handling - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-type-erasure][C++ Core Guidelines: Type Erasure - ModernesCpp.com]]

 + [[https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code][Using C++ in Mozilla code - Mozilla | MDN]] 

 + [[https://wiki.openstack.org/wiki/CppCodingStandards#Using_Namespaces_Properly][CppCodingStandards - OpenStack]] - "Note that coding standards and
   guidelines will never be perfect and that not everyone will agree
   with every guideline or naming convention. The purpose of the
   guidelines and standards are to maintain consistency in the source
   code." 

 + [[https://google.github.io/styleguide/cppguide.html][Google C++ Style Guide]]

 + [[http://drake.mit.edu/styleguide/cppguide.html][Google C++ Style Guide for Drake]]

 + [[https://developer.lsst.io/cpp/style.html][DM C++ Style Guide — LSST DM Developer Guide Current documentation]]

 + [[https://users.ece.cmu.edu/~eno/coding/CppCodingStandard.html][C++ Coding Standard]]

 + [[https://juce.com/discover/stories/coding-standards][Coding Standards | JUCE]] - Juce code standard and its rationale and
   motivation.

 + [[https://raw.githubusercontent.com/wiki/bloomberg/bde/CodingStandards.pdf][Bloomberg BDE Code Standard]]
   + <https://web.archive.org/web/20190115163005/https://raw.githubusercontent.com/wiki/bloomberg/bde/CodingStandards.pdf>

 *Embedded Systems Coding Standards* 

 * *MISRA-C:2004 Guidelines for the use of the C language in critical systems*
   + <https://web.archive.org/web/20170517013604/http://caxapa.ru:80/thumbs/468328/misra-c-2004.pdf>

 * *Guidelines for the use of the C++14 language in critical and safety-related systems*
   + <https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf>

 * *Autosar Guideline for the use of C++14 language in critical safety-related systems*
   + [[https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-10/AUTOSAR_RS_CPP14Guidelines.pdf][AUTOSAR_RS_CPP14Guidelines.pdf]]
   + Web archive: [[https://web.archive.org/web/20190302192508/https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-10/AUTOSAR_RS_CPP14Guidelines.pdf][AUTOSAR_RS_CPP14Guidelines.pdf]]

 * *Joint Strike Fighter Air Vehicle C++ Coding Standards* - Document Number 2RDU00001 Rev C  - 2005
   + 2004 - <http://www.stroustrup.com/JSF-AV-rules.pdf>
   + 2005 - <https://web.archive.org/web/20070417151407/http://www.research.att.com/~bs/JSF-AV-rules.pdf>
   + <http://www.jsf.mil/downloads/down_documentation.htm>

 * *C++ in Safety-Critical Applications: The JSF++ Coding Standard*
   + <http://micro-os-plus.github.io/develop/coding-style/>
   + <http://www.phaedsys.org/principals/programmingresearch/prdata/SSE-Session-4_Stroustrup-Carroll.pdf>

** Standard Proposals  

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1040r0.html#motivation][p1040R0: std::embed]]
   + _Brief_: Accessing program-external resources at compile-time and
     making them available to the developer. It aims to make easier to
     embed files, pictures, binary files and documents in executables
     or shared library C++ binaries.

   + _Abstract_: This paper introduces a function std::embed in the
     <embed> header for pulling resources at compile-time into your
     program and optionally guaranteeing that they are stored in the
     resulting program in an implementation-defined manner.

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1105r0.html][P1105R0: Leaving no room for a lower-level language: A C++ Subset]]
   * Abstract: Making core language features (like exceptions)
     optional in freestanding mode if they have an OS dependency or
     incur space overhead.
   * Targeted Domains: Embedded Systems and OS Kernel Development
     where there is no operating system support.

 * [[http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0194r0.pdf][P0194R0]] - Static Reflection Revision 4.
   * Abstract This paper is the follow-up to N3996, N4111 and N4451
     and it is the fourth revision of the proposal to add static
     reflection to the C++ standard. It also introduces and briefly
     describes a partial, experimental implementation of this proposal.

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0707r0.pdf][p0707r0]] Metaclasses

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1028r0.pdf][P1028R0]] status_code and standard error object for P0709
   zero-overhead deterministic exceptions.

 * [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0037r5.html][p0037r5]] - Fixed-point arithmetics using integral types.

** Books 
*** C++ Programming Language 

+ Bjarne Strustrup. *The C++ Programming Language, 4th Edition*
  + Coverage:
    + Structures unions and enumerations.
    + C++11, Classes - construction, copy, cleanup and move.
    + Standard library (STL Contaienrs, STL Algorithms, STL Iterators,
      Memory and Resources, I/O Streams, Numeric, Concurrency),.
    + Templates: Insntatiation, generic programming, specialization.
  + [[https://www.amazon.com/C-Programming-Language-4th/dp/0321563840][Amazon Link]]

+ Bruce Eckel. *Thinking in C++*. 1995
  + Notes: Despite being an old book, it has a step-by-step coverage
    of C++ main concepts and some design patterns.

+ Bjarne Stroustrup. *Tour of C++ second edition*


+ Andrew Koenig and Barbara E. Moo. *Accelerated C++: Practical Programming by Example*

+ Andrei Alexandrescu. *Modern C++ Design: Generic Programming and*
  *Design Patterns Applied 1st Edition*. 2001 
  + Notes: Provides a comprehensive and broad coverage of C++
    generic/template metaprogramming.
  + Link: [[https://www.amazon.com/Modern-Design-Generic-Programming-Patterns/dp/0201704315][Amazon]]

+ Scott Meyers. *Effective C++ Third Edition, 55 Specific Ways to Improve Your*
  *Programs and Designs* 

 *More Advanced Books:*

+ Martin Reddy. *API Design for C++* 
  + Table of contents: http://www.apibook.com/blog/contents
  + Amazon: https://www.amazon.com/API-Design-C-Martin-Reddy/dp/0123850037
  + Note: Covers design patters, API Versioning, Plugins, Scripts, ...

*** C++17 
 
 + Professional C++, 4th edition - Marc Gregoire.
   + [[https://www.amazon.com/Professional-C-Marc-Gregoire/dp/1119421306][amazon link]]

 + The Modern C++ Challange: Become an expert programmer by solving
   real-world problems. - Marius Bancila. 
   + [[https://www.amazon.com/Modern-Challenge-programmer-real-world-problems/dp/1788993861][amazon link]]

 + C++17 in Detail - Bartolomiej Filipek
   + https://leanpub.com/cpp17indetail
   + http://www.nuonsoft.com/blog/2018/08/23/c17-in-detail-by-bartlomiej-filipek/
   + https://www.cppindetail.com/data/cpp17indetail-sample.pdf

*** System Programming - Posix / Linux and U**N-ix

Note: Most of those books use C because operating system services and
low level system libraries are exposed in *C language* and most used
operating systems nowadays were written in C. In addition, C++ still
doesn't have a stable and standardized ABI (Application Binary
Interface like C).

Books about Linux C-APIs are not only useful for this operating
system, but also for other Unix-based OSes such as MacOSx, BSD,
Android (Based on Linux), QNX Rtos and so on.

 * Michael Kerrisk. *The Linux Programming Interface* - 2010 - ISBN
   978-1-59327-220-3
   + Coverage: File I/O, Processes, Memory Allocation, Daemons, Shared
     Libraries, Interprocess communication, System V Message Queues,
     System V Semaphores, Memory Mapping, TCP/IP Sockets,
     Unix-Sockets, Terminals and System Calls.
   + Web site:  http://man7.org/tlpi/
   + Wikipedia: [[https://en.wikipedia.org/wiki/The_Linux_Programming_Interface][The Linux Programming Interface - Wikipedia]]
   + Chapters:  http://man7.org/tlpi/toc-short.html
   + [[https://www.amazon.com/Linux-Programming-Interface-System-Handbook/dp/1593272200][Amazon Link]]

 * Kurt Wall et al. *Linux Programming Unleashed* - 1999
   + Covers low level system calls; process control;
     thread-synchronization primitives; TCP/IP sockets and network;
     shared memory and XWidows system/Xlib user interface.
   + The most used language in the book is C, although there are some
     examples in C++.
   + [[https://www.amazon.com/Linux-Programming-Unleashed-Kurt-Wall/dp/0672320215][Amazon link to second edition]]

*** System Programming - Microsft Windows NT

  + Mark Russinovitch et al - *Windows Internals* - 5th edition -
    Microsft Press 2000. 
    + Coverage: Windows API, Virtual Memory, Kernel Mode X User Mode,
      Terminal, Object and Handles, Registry, Sysinternals Tools,
      Kernel System Components, System Calls, Windows Sockets
      (Winsock), NetBIOS, NTFS file system.
    + [[https://www.amazon.com/Windows-Internals-Part-Developer-Reference/dp/0735648735][Amazon Link]] (6th edition)


  + Charles Petzold - *Windows Programming* - Microsoft Press - 5th
    edition - 1998
    + Coverage: Win32 API, windows graphical stack, GDI (Graphics
      Device Interface), Dynamic Linked Libraries DLLs. 
    + [[https://www.amazon.com/Programming-Windows%25C2%25AE-Fifth-Developer-Reference/dp/157231995X][Amazon Link]]

  + Johnson M. Hart, *Win32 System Programming: A Windows® 2000* -
    *Application Developer's Guide*, 2nd Edition, Addison -
    Wesley, 2000.
    + Note: This book discusses select Windows programming problems
      and addresses  the problem of portable programming by comparing
      Windows and Unixapproaches.
    + [[https://www.amazon.com/Win32-System-Programming-Application-Developers/dp/0201703106][Amazon Link]]

  + Jeffrey Richter, *Programming Applications for Microsoft Windows*,
    4th Edition, Microsoft Press, September 1999.
    + Note: This book provides a comprehensive discussion of the
      Windows API suggested reading.

  + Visual Basic - *Programmer’s Guide to the Win32 API*, The
    Authoritative Solution by Dan Appleman

  + Don Box - *Essential COM* 1st edition - 1998 - Addison-Wesley
    Professional - ISBN 978-0201634464
    + Comprehensive coverage of COM - Component Object Model. 
    + [[https://www.amazon.com/Essential-COM-Don-Box/dp/0201634465][Amazon Link]]
*** Scientific and Technical Computing 

  + *Discovering Modern C++: An Intensive Course for Scientists,*
    *Engineers, and Programmers (C++ In-Depth Series) 1st Edition*
    + Peter Gottschling
    + [[http://ptgmedia.pearsoncmg.com/images/9780134383583/samplepages/9780134383583.pdf][Sample Chapters]]
    + [[https://www.amazon.com/Discovering-Modern-Scientists-Programmers-Depth/dp/0134383583][Amazon]]
*** Embedded Systems 

 + [[https://www.amazon.com/Programming-Embedded-Systems-C/dp/1565923545][Programming Embedded Systems in C and C++ 1st Edition]]

 + [[https://www.amazon.com/Real-Time-Efficient-Object-Oriented-Microcontroller-Programming/dp/3662567172][Real-Time C++: Efficient Object-Oriented and Template Microcontroller Programming 3rd ed]]
 
** ABI - Application Binary Inteface
*** Itanium Portable ABI 

  + [[http://itanium-cxx-abi.github.io/cxx-abi/][Itanium C++ ABI]]
    + "The Itanium C++ ABI is an ABI for C++. As an ABI, it gives
      precise rules for implementing the language, ensuring that
      separately-compiled parts of a program can successfully
      interoperate. Although it was initially developed for the Itanium
      architecture, it is not platform-specific and can be layered
      portably on top of an arbitrary C ABI. Accordingly, it is used as
      the standard C++ ABI for many major operating systems on all
      major architectures, and is implemented in many major C++
      compilers, including GCC and Clang." 

  + [[http://refspecs.linuxbase.org/cxxabi-1.83.html][Itanium C++ ABI (Revision: 1.83)]]

  + [[http://charette.no-ip.com:81/programming/doxygen/g++/cxxabi_8h.html][GNU g++: /usr/include/c++/5/cxxabi.h File Reference]]

  + [[https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/][GCC5 and the C++11 ABI - RHD Blog]]

*** Drawbacks and ABI Issues

 *Drawbacks*

  + C++ is unsafe. Bugs like stack overflow, buffer overlow, null
    pointr exceptions may happen.

  + _Operating System Depedent_ - C++ may be portable, but it is not
    cross platform since it is compiled to machine code and for a
    particular operatiing system.

  + Hardware dependent (Processor Architecture) and Operating System
    Depedent. C++ is compied to machine code / binary code for a
    particular operating system and processor architecture with
    different executable formats. The most common processor
    architectures are Intel x86 (32 bits) and AMD64 (64 bits).

    + OS Windows            / Executable Format - PE-32

    + Unix (Linux, BSD ...) / Executable Format - ELF

    + Mac-OSX               / Executable Format - Mac-O

    +

  + _No Standard ABI (Application Binary Interface)_ - C++ shared
    libraries and programs compiled with different compilers or
    different versions of same compiler may be incompatible because
    unlinke C, C++ doesn't have a standard ABI. It makes hard to call
    libraries written in C+++ through an FFI - Foreign Function
    Interface form another programming language such as Python.


 *ABI Issues* - Credits: *Defining a Portable C++ ABI* - https://isocpp.org/files/papers/n4028.pdf

 _A C++ developer cannot compile C++ code and share the object file with_
 _other C++ developers on the same platform and know that the result_
 _will compile and link correctly_. Our status quo is that two source
 files a.cpp and b.cpp can only be linked together if they are compiled
 with both:" -- ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

  - "the same version of the same compiler, or another compiler with a
    compatibility mode" ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

  - "compatible switch settings, since most C++ compilers offer
    incompatible switch settings where even compiling two files with
    the same version of the same compiler will not link successfully."
    ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 Issues:

  - "It makes sharing binary C++ libraries more difficult: _To ship a C++_
    _library in binary form for a given platform requires building it_
    _with possibly dozens of popular combinations of switch settings for_
    the popular compiler(s) on that platform, and then may not cover
    all combinations. Alternatively, one can wrap the library in that
    platform’s stable C ABI, which brings us to…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



  - "_It is a valid reason to use C: This is (the) one area where C is_
    _superior to C++_. Among programs and programmers who would otherwise
    use C++, _the top reason to use C appears to be the inability to_
    _publish an API with a stable binary ABI_, including that it can be
    linked to from C, C++, and other languages’ foreign function
    interfaces (FFIs) such as Java JNI and .NET PInvoke. In
    particular…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



  - "_It therefore creates ongoing security problems: The fact that C is_
    _the only de facto ABI-stable lingua franca continues to encourage_
    _type- and memory-unsafe C APIs that traffick in things like error_
    prone pointer/length pairs instead of more strongly typed and still
    highly efficient abstractions, including but not limited to
    std::string or the new string_view"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])


 *Solutions to ABI compatibility issues*

  1) _Distribute the library in source format_. Approach adopted by QT
     (former Trolltech Inc, now the QT Company) with open source and
     commercial license.

  2) Distribute the library in binary format and only support a
     specific compiler.

  3) _Compile he C++ shared library with all possible compilers_ and
     distribute the binaries for each compiler, compiler version,
     processor architecture and operating system.

  4) _Write the library in C, instead of C++_. This approach is followed
     by most Unix/Linux libraries and OpenGL and Gtk GUI toolkit.

  5) Use some language that can compile/generate C-code (transpiler).

  6) Use Microsoft COM (Component Object Model)/ DCOM or CORBA, DBUS ... 



 Note: C is until now the only language with a standard and public ABI
 and most OS exposes its API through a C interface, programming
 languages runtimes are generally implement in C.    
** Mind Map 

Shared Libraries / Software Components 

 - Interoperability

 - Binary Compatibility

 - C-library

   - [[http://www.etalabs.net/compare_libcs.html][Comparison of C/POSIX standard library implementations for Linux]]

 - Linking

   - Static Linking

   - Dynamic Linking

 - [[http://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]

 - API - Application Programming Interface

 - ABI - [[https://en.wikipedia.org/wiki/Application_binary_interface][Application Binary Interface]]

   - Calling Conventions

   - [[https://en.wikipedia.org/wiki/System_call][System Call]]

   - Stable and Standard ABI - C Language

   - [[https://en.wikipedia.org/wiki/Loader_(computing)][Loader (computing)]]

   - [[https://en.wikipedia.org/wiki/Dynamic_linker][Dynamic linker]]

   - [[https://en.wikipedia.org/wiki/Binary-code_compatibility][Binary-code compatibility]]

 - FFI - Foreign Function Interface 

 - Excetuable Formats

   - [[https://en.wikipedia.org/wiki/Portable_Executable][PE]] - Portable Executable / Windows (*.exe files and *.dll files)

   - [[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF]] - Executable and Linkable Format / Unix (Linux, BSD ...)

   - [[https://en.wikipedia.org/wiki/Mach-O][Mach-O]] -  Mach object file format / Mach-OSX and IOS

   - [[https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats][Comparison of executable file formats]]

   - 
** Major Problems of C++ 

Outline: 

 + Slow compile-time 

 + No pre-compiled libraries, project dependencies have to be
   compiled from source due to ABI incompatibility. This is why
   header-only libraries are popular. 

 + Lack of module system 

 + Macros and preprocessor

 + Code repetitition, every class' source file .cpp needs a matching
   header file. 

 + Undefined behavior
   + Undefined behavior may cause bad surprises as it can cause bugs
     that are hard to detect and may go under the radar for a long
     time allowing a program to run with unpredictable and/or invalid
     state. 

 + High Degree of Complexity

 + Binary compatibility among compilers.

 + Lack of ABI makes unfeasible to build C++ components or shared
   libraries without a C API. In C#, the user has just to add a DLL
   and in Java, the user has just to add jar package to include a
   dependency in a project. In C++, it is not possible, all
   dependencies need to compiled from source.

 + Complexity of building systems 

 + No Standard Tooling - Despite that there are some widely used
   tools such as CMake "building system", they are still no
   standard. So, as result there are no:
   + NO standard package manager 
   + NO standard building system

References: 

 + [[https://blog.codinghorror.com/the-problem-with-c/][The Problem With C++]] - Jeff Atwood. 
 + [[https://dorinlazar.ro/why-c-sucks-2016-02-edition/][Why C++ sucks (2016.02 edition) – dorinlazăr.ro]]
 + [[https://flyx.org/2014/04/24/cpp_sucks/][flyx.org - Reasons why C++ sucks]]
 + [[https://whydoesitsuck.com/cpp-sucks-for-a-reason/][The C++ Programming Language Sucks for a Very Good Reason | Why Does It Suck?]]
 + [[https://en.wikipedia.org/wiki/Criticism_of_C%2B%2B][Criticism of C++ - Wikipedia]]
 + [[https://en.wikipedia.org/wiki/Most_vexing_parse][Most vexing parse - Wikipedia]]
** Reference Cards for shell scripting languages and command line tools

 *Unix Shell Script* 

Bash shell script: 
 + https://devhints.io/bash

ZSH shell script: 
 + https://devhints.io/zsh

Power Shell (Windows-Only)
 + https://stackify.com/powershell-commands-every-developer-should-know/
 + https://auth0.com/blog/powershell-commands-for-web-developers/
 + https://developer.rackspace.com/blog/powershell-101-from-a-linux-guy/
 + https://simpleprogrammer.com/powershell-tutorial/

 *Command Line Tools* 

Curl - command line http ftp and other clients. 
 + https://devhints.io/curl
 + https://cheatsheet.dennyzhang.com/cheatsheet-curl-a4
 + http://blog.mixu.net/2013/01/29/curl-cheatsheet/

Httpie - http command line client 
 + https://httpie.org/
 + https://devhints.io/httpie
 + https://github.com/jakubroztocil/httpie

Unix Find Command - tool for finding files in disk: 
 + https://devhints.io/find

Rsync - tool for fast file transfer and incremental backup 
 + https://devhints.io/rsync
 + https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/
 + https://www.cheatography.com/richardjh/cheat-sheets/rsync/
 + https://neverendingsecurity.wordpress.com/2015/04/13/rsync-commands-cheatsheet/

Rename - cli app for bulk file renaming: 
 + https://devhints.io/rename
 + https://www.tecmint.com/rename-multiple-files-in-linux/
 + https://www.putorius.net/rename-command-linux.html

Watchexec - executes commands whenever a file changes. 
 + https://devhints.io/watchexec
 + https://github.com/watchexec/watchexec

Hexdump: 
 + https://linoxide.com/linux-how-to/linux-hexdump-command-examples/
 + https://www.geeksforgeeks.org/hexdump-command-in-linux-with-examples/
 + https://brendanzagaeski.appspot.com/0006.html

Mac OSX Brew command line package manager: (Note: Brew can also be
used in Linux for installing applications without root Access.)
 + https://devhints.io/homebrew

Android ADB (Android Debug Bridge)
 + https://devhints.io/adb
 + https://onecompiler.com/cheatsheets/adb
 + https://gist.github.com/HugoMatilla/f92682b06068b06a6f2a
 + https://á.se/adb-android-debugger-cheatsheet/
 + https://www.codexpedia.com/android/android-adb-command-line-cheatsheet/

Linux troubleshooting tools: 
 + https://sysdig.com/blog/linux-troubleshooting-cheatsheet/
 + [[https://repo.zenk-security.com/Techniques%2520d.attaques%2520%2520.%2520%2520Failles/The%2520CTF%2520Toolbox-%2520CTF%2520Tools%2520of%2520the%2520Trade.pdf][CTF Tools of the Trade]]

Radare2 tools 
 + https://radare.gitbooks.io/radare2book/refcard/intro.html

** C++ Resources

 *Operating System* 

 + [[http://pages.cs.wisc.edu/~remzi/OSTEP/][Operating Systems: Three Easy Pieces]]
   + free online operating systems book! The book is centered around
     three conceptual pieces that are fundamental to operating
     systems: virtualization, concurrency, and persistence. In
     understanding the conceptual, you will also learn the practical,
     including how an operating system does things like schedule the
     CPU, manage memory, and store files persistently. Lots of fun
     stuff!

 + https://manybutfinite.com/
   + Provides lots of information about useful operating systems
     concepts necessary for better understanding of system
     programming.

*C++ General Resources*

 - Ian D. Chivers - *An Introduction to C++*
   <http://www.icsd.aegean.gr/lecturers/kavallieratou/Cplusplus_files/notes.pdf>

 - [[https://www.reddit.com/r/Physics/comments/2w4exo/what_are_the_useful_aspects_of_c_in_physics/][What are the useful aspects of C++ in Physics programming? : Physics]]

 - [[https://anteru.net/blog/2016/05/01/3249/][Designing C APIs in 2016 | Anteru’s blog]]

*C++ Numerical Methods and Scientific Computing*

 - Prof. R. Hiptmair, SAM, ETH Zurich. *Numerical Methods for
   Computational Science and Engineering* -
   <http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf>


 - Norbert Pozar. *Basic C++ for numerical computations: vectors*
   <http://polaris.s.kanazawa-u.ac.jp/~npozar/basic-cpp-for-numerics-vectors.html>


*C++ STL - Standard Template Library*


 - *A modest STL tutorial*
   <http://cs.brown.edu/~jak/proglang/cpp/stltut/tut.html>


 - Carlos Moreno. *C++ Vectors* <https://cal-linux.com/tutorials/vectors.html>


*C++ ABI - Application Binary Interface, Binary Compatibility and FFI*

 - By Agner Fog. *Calling conventions for different C++ compilers and
   operating systems*
   <http://www.agner.org/optimize/calling_conventions.pdf>


 - Armin Ronacher. *Beautiful Native Libraries*
   <http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/>


 - Herb Sutter. *Defining a Portable C++ ABI* <https://isocpp.org/files/papers/n4028.pdf>

 - *Some thoughts on binary compatibility*
   <http://blog.qt.io/blog/2009/08/12/some-thoughts-on-binary-compatibility/>

 - *Interoperability of Libraries Created by Different Compiler
   Brands* <http://www.mingw.org/wiki/Interoperability_of_Libraries_Created_by_Different_Compiler_Brands>

 - Thiago Macieira. *Binary compatibility for library developers*
   <https://events.linuxfoundation.org/sites/events/files/slides/Binary_Compatibility_for_library_devs.pdf>

 - *What Language I Use for… Creating Reusable Libraries: Objective-C*
   <http://www.informit.com/articles/article.aspx?p=2144812>

 - *Compilable modern alternatives to C/C++* -
   <https://softwareengineering.stackexchange.com/questions/162614/compilable-modern-alternatives-to-c-c>

 - [[https://stackoverflow.com/questions/3217513/are-llvm-gcc-and-clang-binary-compatible-with-gcc-particularly-mingw-gcc-on-w][linker - Are llvm-gcc and clang binary compatible with gcc? - particularly mingw gcc on Windows - Stack Overflow]]

 - [[http://rlc.vlinder.ca/blog/2009/08/binary-compatibility/][Binary Compatibility | Making Life Easier]]

 - *System V Application Binary Interface AMD64 Architecture Processor
   Supplement* <https://c9x.me/compile/bib/abi-x64.pdf>

 - *Software optimization resources* - <http://www.agner.org/optimize/>

 - [[https://softwareengineering.stackexchange.com/questions/281882/why-does-c-provide-language-bindings-where-c-falls-short][Why does C provide language 'bindings' where C++ falls short? - Software Engineering Stack Exchange]]

 - [[https://news.ycombinator.com/item?id=2379676][I've written in C++ professionally almost 12 years (17 years counting College), ... | Hacker News]]

 - [[https://www.reddit.com/r/swift/comments/67z7dy/what_is_abi_stability_and_why_does_it_matter/][What is ABI stability and why does it matter? : swift]]

 - [[https://www.reddit.com/r/programming/comments/4r6r8e/abi_vs_api/][ABI vs. API : programming]]

 - [[https://www.reddit.com/r/linux_gaming/comments/5nqaux/confused_about_compatibility/dcdxd19/][heartsofwar comments on Confused about Compatibility]]

 - [[https://www.reddit.com/r/askscience/comments/3ei05n/why_is_that_programs_need_to_be_ported_between/][Why is that programs need to be ported between operating systems in order in to function? What goes on at the programming level to require this? : askscience]]

 - [[https://www.reddit.com/r/AskProgramming/comments/5c74i4/some_thoughts_about_abis/][some thoughts about ABIs : AskProgramming]]

 - [[http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html][Damien Katz: The Unreasonable Effectiveness of C]]

 - [[https://www.reddit.com/r/linux/comments/42vngw/why_is_the_linux_community_ambivalent_about/][Why is the Linux community ambivalent about binary compatibility? : linux]]

 - [[https://www.reddit.com/r/C_Programming/comments/4afu69/implementing_cross_platform_library_in_c_proscons/][Implementing cross platform library in C pros/cons C_Programming]]

 - 

 - 

*C-Interface* 

 - *CppCon 2014: Stefanus DuToit "Hourglass Interfaces for C++ APIs* -
   <https://www.youtube.com/watch?v=PVYdHDm0q6Y>


*FFI - Foreign Function Interface*

 - https://en.wikipedia.org/wiki/Foreign_function_interface

 - [[http://www.mono-project.com/docs/advanced/pinvoke/][Interop with Native Libraries | Mono]]

 - [[https://en.wikipedia.org/wiki/SWIG][SWIG - Wikipedia]] -  Simplified Wrapper and Interface Generator

 - [[https://sourceware.org/libffi/][libffi]] - A Portable Foreign Function Interface Library

 - [[https://en.wikipedia.org/wiki/Libffi][libffi - Wikipedia]]

 - [[https://docs.python.org/3/extending/extending.html][1. Extending Python with C or C++ — Python 3.6.1 documentation]]

 - [[https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx][Platform Invoke Tutorial (C#)]]

 - [[https://www.reddit.com/r/explainlikeimfive/comments/5c2yfq/eli5_how_can_a_single_software_project_use/][Eli5: How can a single software project use multiple languages? Wouldn't the compiler have difficulty understanding what's what? : explainlikeimfive]]

 - [[https://www.reddit.com/r/learnprogramming/comments/3dzif8/how_do_you_communicate_between_different_computer/][How do you communicate between different computer languages? : learnprogramming]]


*Courses and Online Books*

 - [[https://en.wikibooks.org/wiki/C%2B%2B_Programming][C++ Programming - Wikibooks, open books for an open world]]


 - Francois Fleuret. *C++ lecture notes*
   <https://www.idiap.ch/~fleuret/files/Francois_Fleuret_-_C++_Lecture_Notes.pdf>


 - Course:  https://www3.ntu.edu.sg/home/ehchua/programming/

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp0_Introduction.html][An Introduction to C++ Programming for First-time Programmers - C++ Programming Tutorial]] - https://archive.is/MRDZI

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_STL.html][C++ Libraries, String and Standard Template Library]] - https://archive.is/lrIDk

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp2_MoreBasics.html][C++ More Basics]] - https://archive.is/pr7pn

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html][Object-oriented Programming (OOP) in C++]] - https://archive.is/lpXae

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html][C++ Pointers and References]] - https://archive.is/Ja1xJ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp5_OOPExamples.html][Examples on Classes and Objects]] - https://archive.is/eZJPl

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp8_Template.html][Object-oriented Programming (OOP) in C++ - Template and Generic Programming]] - https://archive.is/eG0KZ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp10_IO.html][C++ IO Streams and File Input/Output]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp11_TipsTraps.html][Examples on Classes and Objects]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/DataStructureAlgorithm.html][Data Structure and Algorithm]]

*Unix - API / LibC*

 - *User space and the libc interface* - <https://www.win.tue.nl/~aeb/linux/lk/lk-3.html>


*Embedded Systems*

 - [[http://bitbashing.io/embedded-cpp.html][C++ On Embedded Systems]]

 - [[http://git.eti.pg.gda.pl/intel-grant/pliki/esp/ESP_Toolchain_ENG.pdf][Embedded Systems Programming OS Linux - Toolchain]]

 - 

*Alternatives to C++*

The C++ language is suitable for system programming, writing native
applications and writing high performance software components or
libraries. However the lack of standard ABI - Application Binary
interface makes calling C++ calling a C++ library through FFI -
Foreign Function Interface in another language harder.

Due to the C++ ABI issues, many portable libraries that are easier to
invoked through a FFI are written in C, for instance, GTK GUI toolkit,
... 

Selection Requirements: 

 - Compile to native code.

 - Have an stable and standard ABI - Application Binary Interface like C.

 - Be able to build shared libraries *.so or *.dll and easily invoked
   through FFI - Foreign Function Intefaces of high level languages
   such as Python, Ruby, Java, C# and so on.

 - Be memory safe in order to avoid buffer overflow. 


_D language_


   - [[http://bitbashing.io/2015/01/26/d-is-like-native-python.html][D is like native Python]]

   - [[http://code.dlang.org/packages/pyd][Package pyd version 0.9.9 - DUB - The D package registry]]

   - [[http://dlang.org/spec/abi.html][Application Binary Interface - D Programming Language]] 

   - [[https://dlang.org/dll-linux.html][Writing Shared Libraries With D On Linux - D Programming Language]]

   - [[http://blog.tenstral.net/2016/05/adventures-in-d-programming.html][Adventures in D programming | Ximions Blog]]

_Gambit Scheme_ 

A Scheme implementation that is interactive with a REPL and that can
generate C-code and invoke C-libraries. It can be compiled to
shared libraries *.so or *.dlls and be called from scheme REPL.

_Rust_

** C => to C++ Guidelines

+ Malloc - Avoid malloc and manual memory management. Instead of that
  use _new_ and _vector_ instead of realloc.
+ Pointer - Avoid pointers.
+ Arrays - Use C++ STL vector classes instead of arrays.
+ Strings. Don't use array of characters to represent a string,
  instead of that use c++ strings by inclunding '#include <string>'
  header at the top of file.
+ Separate the operating system depedent code from the
  operating system agnostic code.
** Cross Language Interoperability / Language Bindings - C-API and FFI 
  
 *Stack Overflow Questions* 

  + [[https://stackoverflow.com/questions/2045774/developing-c-wrapper-api-for-object-oriented-c-code][Developing C wrapper API for Object-Oriented C++ code]]
    + Manual solution: Disadvantage - requires maintaining the C-API and the C++ code.
      + Every object is passed about in C an opaque handle (void* voidpointers).
      + Constructors and destructors are wrapped in pure functions
      + Member functions are pure functions.
      + Other builtins are mapped to C equivalents where possible.
    + Automatic Solution: *SWIG* Wrapper generator.
      + Disadvantage: SWIG cannot parse all C++ code.
 
 *Botan library C-API and language bindings*
  + https://github.com/randombit/botan/wiki/Language-Bindings
    + Extracted: "C89 - Available out of the box in the header
      ffi.h. _This C interface_ is also intended to be the preferred way
      of binding Botan to other languages, as it communicates
      _exclusively through function calls operating on opaque structs,_
      _and without transferring ownership of memory_. This makes it easy
      to call using ctypes-style FFI libraries."

  + [[https://github.com/randombit/botan/blob/master/src/python/botan2.py][Botan - Python wrapper]]

  + Ruby FFI: https://github.com/riboseinc/ruby-botan/tree/master/lib/botan

  + [[https://github.com/randombit/botan-rs][Botan-RS]] - Ruby wrapper of Botan library.

  + [[https://github.com/randombit/botan-ocaml/blob/master/botan.ml][Botan-OCAML]]

  + FFI - C-API Code:
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi.h][ffi.h]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi.cpp][ffi.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_block.cpp][ffi_block.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_cipher.cpp][ffi_cipher.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_fpe.cpp][ffi_fpe.cpp]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_util.h][ffi_util.h]]
    + [[https://github.com/randombit/botan/blob/master/src/lib/ffi/ffi_mp.cpp][ffi_mp.cpp]]

 *CXXI: Bridge the C++ and C# Worlds* (Non Portable based on GCCXML)
 
 + https://tirania.org/blog/archive/2011/Dec-19.html

 *Swig - Wrapper Generator* 

  + *Shogun* toolbox Library:
    + [[https://github.com/shogun-toolbox/shogun/tree/develop/src/interfaces][Interfaces]]  - SWIG Interface files.
    + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/swig/Machine.i][interfaces/swig/Machine.i]]
    + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/swig/Mathematics.i][interfaces/swig/Mathematics.i]]
    + Python SWIG Files:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/CMakeLists.txt][interfaces/python/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/CustomKernel_protocols.i][python/CustomKernel_protocols.i]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/python/swig_typemaps.i][python/swig_typemaps.i]]
      + 
    + CSharp C#
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/csharp/CMakeLists.txt][csharp/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/csharp/swig_typemaps.i][csharp/swig_typemaps.i]]
    + OCtave:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/octave/CMakeLists.txt][octave/CMakeLists.txt]]
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/octave/swig_typemaps.i][octave/swig_typemaps.i]]
    + Java:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/java/swig_typemaps.i][java/swig_typemaps.i]]
    + RLang:
      + [[https://github.com/shogun-toolbox/shogun/blob/develop/src/interfaces/r/swig_typemaps.i][r/swig_typemaps.i]]

  + *GNU Cash*
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/CMakeLists.txt][CMAkeLists.txt]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/common/base-typemaps.i][base-typemaps.i]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/CMakeLists.txt][bindigns/CMakeLists.txt]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/gnucash_core.i][python/gnucash_core.i]]
    + [[https://github.com/Gnucash/gnucash/blob/59a6ebc33a289de9f35a975feacfc91e09bb54e1/bindings/python/time64.i][python/time64.i]]

  + *Casadi*
    + [[https://github.com/casadi/casadi/blob/master/CMakeLists.txt][CMakeLists.txt]]
    + [[https://github.com/casadi/casadi/blob/master/swig/CMakeLists.txt][swig/CMakeLists.txt]] 
    + [[https://github.com/casadi/casadi/blob/master/swig/casadi.i][swig/casadi.i]]
    + [[https://github.com/casadi/casadi/blob/master/swig/internal.i][swig/internal.i]]
    + https://github.com/casadi/casadi/tree/master/swig/matlab
    + https://github.com/casadi/casadi/tree/master/swig/octave
    + https://github.com/casadi/casadi/tree/master/swig/python

  + *Fenics*
    + [[https://github.com/FEniCS/dolfin/blob/master/CMakeLists.txt][CMakeLists.txt]]
    + [[https://github.com/FEniCS/dolfin/blob/master/python/CMakeLists.txt][/python/CMakeLists.txt]] (Pybind11 FFI)
    + [[https://github.com/FEniCS/dolfin/tree/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig][/dolfin/swig]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/shared_ptr_classes.i][/swig/shared_ptr_classes.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/version.i][/swig/version.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/exceptions.i][/swig/exceptions.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/array.i][/swig/typemaps/array.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/numpy.i][/swig/typemaps/numpy.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/std_map.i][/dolfin/swig/typemaps/std_map.i]]
      + [[https://github.com/FEniCS/dolfin/blob/df4eea209a85c461e3dcb7c21d4b4c015c46ecdf/dolfin/swig/typemaps/std_vector.i][/typemaps/std_vector.i]]
      + 
      + 

** Interesting Source Codes 

 + *Libfuse* (C, not C++)
   * https://github.com/libfuse/libfuse
   * The reference implementation of the Linux FUSE (Filesystem in
     Userspace) interface.  

 + *CERN-Reflex* => SEAL Reflection System 
   + https://github.com/snoopspy/reflex/tree/master/src
   + What it can do:
     + Return type by name, by type info, invoke constructor of
       registered type.
     + Return type unique identifier.
   + Techniques Used:
     + Type erasure using C++ template technique and void* pointer.
   + Some Codes:
     + Reflection types database
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Type.h
       + https://github.com/snoopspy/reflex/blob/master/src/Kernel.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/Typedef.h
       + https://github.com/snoopspy/reflex/blob/master/src/Class.h
       + https://github.com/snoopspy/reflex/blob/master/src/Function.h
     + Property List => Properties get/set can be added to an object
       at runtime.
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/PropertyList.h
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyList.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyListImpl.cxx
     + Object Interface
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Object.h
     + Any Container for type erasure derived from Boost.Variant 
       + https://github.com/snoopspy/reflex/blob/master/src/Any.cxx
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Any.h
     + Shared library and Plugins - wrapper
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/SharedLibrary.h
       + https://github.com/snoopspy/reflex/blob/master/src/PluginService.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PluginFactoryMap.cxx
     + Python Code Generator => Parses GCCXML to generate a C++ code
       with reflection dictionary metadata. 
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/genreflex.py
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/gendict.py
       + 

 + *GNU Scientific Library* (C-lib)
   + https://github.com/ampl/gsl 

   + Most Used C-features:
     + *static* keyword used for make functions private to the
       compilation unit they are defined, so they are not visible in
       the executable, static or shared library. It is important to
       avoid name clashing because C doesn't have namespaces and it
       also needs all names to be unique as this language doesn't have
       overloading like C++.  

     + *const double array[], size_t size* => For passing C-arrays
       allocated by the caller code.

     + _void* vstate_ - Void pointer (opaque pointer) for passing state
       around functions and hiding data representation. TL;DR. Emulate
       orientation.

     + _const void* vstate_  => The "object" cannot be modified by the
       function.

     + malloc, free => Heap memory allocation.

   + Some Codes:
     + Polynomial Evaluation 
       + https://github.com/ampl/gsl/blob/master/poly/gsl_poly.h
     + Root Solvers 
       + https://github.com/ampl/gsl/blob/master/roots/bisection.c
       + https://github.com/ampl/gsl/blob/master/roots/newton.c
       + https://github.com/ampl/gsl/blob/master/roots/gsl_roots.h
       + https://github.com/ampl/gsl/blob/master/roots/steffenson.c
       + https://github.com/ampl/gsl/blob/master/gsl_math.h
     + Interpolation
       + https://github.com/ampl/gsl/blob/master/interpolation/linear.c
       + https://github.com/ampl/gsl/blob/master/interpolation/spline.c
       + https://github.com/ampl/gsl/blob/master/interpolation/poly.c
     + Derivate:
       + https://github.com/ampl/gsl/blob/master/deriv/deriv.c
     + Probability Distributions:
       + Normal - https://github.com/ampl/gsl/blob/master/cdf/gauss.c
       + Normal Inverse - https://github.com/ampl/gsl/blob/master/cdf/gaussinv.c
       + LogNormal https://github.com/ampl/gsl/blob/master/cdf/lognormal.c
       + T-student - https://github.com/ampl/gsl/blob/master/cdf/tdist.c
       + 

 + *CERN-Root* (CERN's Interactive C++ Framework)
   + https://github.com/root-project/root
   + Features Used:
     + std:: math functions, std::log, std::exp, std::max, std::min, std::fabs
   + Some Codes:
     + https://github.com/root-project/root/blob/master/.clang-format
     + https://github.com/root-project/root/blob/master/math/mathcore/src/RichardsonDerivator.cxx
     + https://github.com/root-project/root/blob/master/math/mathcore/src/BrentMethods.cxx

 + *libspng* (C-lib)
   + https://gitlab.com/randy408/libspng
   + A simpler, modern libpng alternative
   + Some Codes:
     + [[https://gitlab.com/randy408/libspng/blob/master/CMakeLists.txt][CMakeLists.txt · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/common.c][common.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/decode.c][decode.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/spng.h][spng.h · master · Randy / libspng · GitLab]]

 + *go-ole* (GO Language)
   + https://github.com/go-ole/go-ole
   + win32 ole implementation for golang
   + Some Codes:
     + https://github.com/go-ole/go-ole/blob/master/com.go
     + https://github.com/go-ole/go-ole/blob/master/guid.go
     + https://github.com/go-ole/go-ole/blob/master/idispatch.go
     + https://github.com/go-ole/go-ole/blob/master/variant.go

 + *Busybox* (C Code) - Embedded Linux Swiss Army Knife
   + https://git.busybox.net/busybox/tree/
   + Some Codes:
     + https://git.busybox.net/busybox/tree/console-tools/reset.c
     + https://git.busybox.net/busybox/tree/coreutils
     + https://git.busybox.net/busybox/tree/coreutils/nohup.c
     + https://git.busybox.net/busybox/tree/coreutils/ls.c
     + https://git.busybox.net/busybox/tree/coreutils/shred.c (Secure deleting)
     + https://git.busybox.net/busybox/tree/coreutils/tail.c
     + https://git.busybox.net/busybox/tree/networking/arp.c
     + https://git.busybox.net/busybox/tree/networking/ifconfig.c

 + *Android C-APIs* (C Code)
   + https://android.googlesource.com/platform/hardware/
   + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware
   + Some Codes:
     + [[https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/gps.h][include/hardware/gps.h - platform/hardware/libhardware - Git at Google]]
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/camera.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/nfc.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/sensors.h

 + *Terminion* - (Rust) Library for low level ANSI/vt100 terminal control.
   + https://github.com/redox-os/termion
   + Some Codes:
     + https://github.com/redox-os/termion/blob/master/src/color.rs
     + https://github.com/redox-os/termion/blob/master/examples/is_tty.rs
     + https://github.com/redox-os/termion/blob/master/src/clear.rs
     + https://github.com/redox-os/termion/blob/master/src/screen.rs
** Computer Archeology and computer History

 * *Ancient Mechanical "Computers"*
   + [[https://en.wikipedia.org/wiki/Antikythera_mechanism][Ancient Greek Antikythera gear mechanism]]
   + [[https://en.wikipedia.org/wiki/Abacus][Abacus]]
   + [[https://www.fourmilab.ch/documents/sliderule/][Slide rules]] 

 * [[https://www.npr.org/sections/ed/2014/10/22/356937347/the-slide-rule-a-computing-device-that-put-a-man-on-the-moon][The Slide Rule: A Computing Device That Put A Man On The Moon : NPR Ed : NPR]]
   + "The slide rule is an instrument that was used to design
     virtually everything," says Deborah Douglas, the director of
     collections and curator of science and technology at the MIT
     Museum in Cambridge, Mass. The museum just ended a three-year
     exhibit on slide rules. "The size of a sewer pipe, the
     weight-bearing ability of a cardboard box, even rocket ships and
     cars."

 * [[https://en.wikipedia.org/wiki/E6B][E6B - Circular slide Rule - Flight Computer]]


 * *Human Computers*
   * [[http://beforebefore.net/scima200/media/light.pdf][When Computers Were Women]]
     + In the past, the term "computer" was assigned to any device
       capable of performing some mathematical calculation. So, some
       early "computers" were the [[https://en.wikipedia.org/wiki/Antikythera_mechanism][Antikythera mechanism]] for predicting
       astronomical positions; [[https://en.wikipedia.org/wiki/Abacus][abacus]]; [[https://www.fourmilab.ch/documents/sliderule/][slide rules]] for engineering
       calculations and humans. In fact, the first digital computer,
       ENIAC, was designed for assisting number crunching related to
       physics and engineering. Another role was to automate the tedious
       work carried out by human-computers.
   * [[https://www.nasa.gov/feature/jpl/when-computers-were-human][When Computers Were Human | NASA]]
     + "Computers weren't always made of motherboards and CPUs. At one
       time, they were human! And at NASA's Jet Propulsion Laboratory,
       human computers were a talented team of women who went on to
       become some of the earliest computer programmers."


 * Analog Mechanical computers for firing control systems 
   + Analog mechanical computers were used befored the advent of digital
     computers for solving real time differential equations related to
     motion for the purpose of aiming and stabilizing ship canons.

   + [[http://web.mit.edu/STS.035/www/PDFs/Newell.pdf][The Mechanical Analog Computer of Hannibal Ford and William Newell]]
   + [[https://arstechnica.com/information-technology/2014/03/gears-of-war-when-mechanical-analog-computers-ruled-the-waves/][Gears of war: When mechanical analog computers ruled the waves | Ars Technica]]
   + [[https://www.evilmadscientist.com/2013/analogmech/][Introduction to Analog Mechanical Computers | Evil Mad Scientist Laboratories]]
   + [[https://hackaday.com/2014/10/28/retrotechtacular-fire-control-computers-in-navy-ships/][Retrotechtacular: Fire Control Computers in Navy Ships | Hackaday]]
   + [[https://web.archive.org/web/20190127225800/https://apps.dtic.mil/dtic/tr/fulltext/u2/830809.pdf][Engineering Design Handbook - Fire Control Series - Section 1]]


 * *Analog Electrical Computers*
   + Electronic analog computers were electrical circuits built with
     valves, resistors and capacitors for solving specific
     differential equations. They weren't general purpose and
     programmable as the modern computers digital computers.
   + [[http://chalkdustmagazine.com/features/analogue-computing-fun-differential-equations/][Analogue computing: fun with differential equations - Chalkdust]]
   + [[https://blog.degruyter.com/algorithms-suck-analog-computers-future/][Why Algorithms Suck and Analog Computers are the Future - De Gruyter Conversations]]
   + [[https://spectrum.ieee.org/computing/hardware/not-your-fathers-analog-computer][Not Your Father’s Analog Computer - IEEE Spectrum]]


 * Electrical Analog Computer - [[https://en.wikichip.org/wiki/electronic_associates/pace_231r][PACE231R-EAI]] - "The EAI 231R is
   notable for having been used for simulation in many of the early
   space and aviation projects including the Project Mercury, Project
   Gemini, and the X-15." 
   * "Flight Research Center's first HL-10 simulations was done with
     the PACE 231R. As they described "The real capability of the
     analog computer was its ability to integrate differential
     equations. Because the equations of motion for the lifting bodies
     were differential equations-as are all equations of motion for
     aerospace vehicles-the simulation engineers mechanized them on
     available analog computers.
   * [[https://web.archive.org/web/20190128000550/http://s3data.computerhistory.org/brochures/eai.231r.1961.102646219.pdf][PACE 231R Analog Computer - 1961]] (PDF)

 * *ENIAC - Electronic Numerical Integrator Computer and the Monte-Carlo Methods*
   + Note: ENIAC, ideliazed by John Von Neumann, is the first modern
     digital computer from which all modern computers are based on.
   + [[https://www.atomicheritage.org/history/computing-and-manhattan-project][Computing and the Manhattan Project | Atomic Heritage Foundation]]
   + [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.366.4917&rep=rep1&type=pdf][Monte Carlo Methods: Early History and the Basics]]
   + [[https://finneganswake943697706.wordpress.com/2018/02/21/john-von-neumann-the-father-of-the-modern-computer/][John von Neumann: The Father of the Modern Computer – FINNEGANS WAKE]]
   + [[https://andrebartholomeufernandes.com/how-the-computers-exploded/][How the Computers Exploded | André Bartholomeu Fernandes]]

 * [[https://technicshistory.wordpress.com/2018/12/13/discovering-interactivity/][Discovering Interactivity – Creatures of Thought]]

 * *Unix*
   + [[http://www.princeton.edu/~hos/frs122/unixhist/finalhis.htm][Unix An Oral History]]
   + [[http://www.catb.org/esr/writings/taoup/html/][The Art of Unix Programming]] - Eric Raymond 


 * [[https://www.computerhistory.org/atchm/the-deep-history-of-your-apps-steve-jobs-nextstep-and-early-object-oriented-programming/][The Deep History of Your Apps: Steve Jobs, NeXTSTEP, and Early Object-Oriented Programming]]


 * [[http://www.nucalc.com/Story/][Graphing Calculator Story]] - "The Graphing Calculator Story - an
   Apple engineer who refused to leave" 


 * [[http://longnow.org/essays/richard-feynman-connection-machine/][Richard Feynman and The Connection Machine - The Long Now]]
