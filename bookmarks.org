#+INCLUDE: theme/style.org
#+TITLE: CPP / C++ Review
#+DESCRIPTION: cpp c++ code examples, demonstrations, design pattern and integration.
#+STARTUP: content 

 - [[wiki:index][Index]]

* Bookmarks 
** Online Tools

 + Online Compilers 

   + http://rextester.com/
     + The main selling point of this online tool is that it allows to
       save code snippets and run them again. 
     + Online C++ compiler, provides GCC, CLANG and Visual Studio
       Compiler, also known as MSVC (VC++ - Visual C++).

   + https://wandbox.org/
     * Online C++ compiler.

 + Compiler Explorer 
   + https://godbolt.org/
     * Compiler explorer - allows to explore the assembly generated by a
       wide variety of compilers, including, GNU GCC, Clang, MSVC and so on.
   + https://demangler.com/
     * Symbol demangler for MSVC and GCC.

 + MISC
   + [[https://www.google.ca/search?q=float%20point%20online][float point online - Google Search]]
   + [[https://www.h-schmidt.net/FloatConverter/IEEE754.html][IEEE-754 Floating Point Converter]]
   + [[http://weitz.de/ieee/][IEEE 754 Calculator]]

** Code Standards and guidelines 

 + [[https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#main][ISO C++ Core Guidelines]] - "This is a set of core guidelines for
   modern C++, C++17, C++14, and C++11, taking likely future
   enhancements and ISO Technical Specifications (TSs) into
   account. The aim is to help C++ programmers to write simpler, more
   efficient, more maintainable code."

   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors-assignments-and-desctructors][C++ Core Guidelines: The Rule of Zero, Five, or Six - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-when-you-can-t-throw-an-exception][C++ Core Guidelines: finally in C++ - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors][C++ Core Guidelines: Constructors - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-more-rules-to-concurrency-and-parallelism][C++ Core Guidelines: More Rules to Concurrency and Parallelism - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-concurrency-and-lock-free-programming][C++ Core Guidelines: Concurrency and lock-free Programming - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-rules-to-error-handling][C++ Core Guidelines: Rules for Error Handling - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-type-erasure][C++ Core Guidelines: Type Erasure - ModernesCpp.com]]

 + [[https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code][Using C++ in Mozilla code - Mozilla | MDN]] 

 + [[https://wiki.openstack.org/wiki/CppCodingStandards#Using_Namespaces_Properly][CppCodingStandards - OpenStack]] - "Note that coding standards and
   guidelines will never be perfect and that not everyone will agree
   with every guideline or naming convention. The purpose of the
   guidelines and standards are to maintain consistency in the source
   code." 

 + [[https://google.github.io/styleguide/cppguide.html][Google C++ Style Guide]]

 + [[http://drake.mit.edu/styleguide/cppguide.html][Google C++ Style Guide for Drake]]

 + [[https://developer.lsst.io/cpp/style.html][DM C++ Style Guide — LSST DM Developer Guide Current documentation]]

 + [[https://users.ece.cmu.edu/~eno/coding/CppCodingStandard.html][C++ Coding Standard]] 

** Selected Conference Videos 
*** Bjarne Stroustrup - The Essence of C++

- [[https://www.youtube.com/watch?v=86xWVb4XIyE][Bjarne Stroustrup - The Essence of C++]]
  - "Bjarne Stroustrup, creator and developer of C++, delivers his
    talk entitled, The Essence of C++. Stroustrup has held
    distinguished posts at Texas A&M University and spent significant
    time in the Computer Science Departments of Cambridge, Columbia
    and Princeton. C++ is the one of the world's most widely used
    technology languages and it has influenced newer languages such
    as C# and Java as well as older languages."
    + Applications on System Programming Domains:
      - Device drivers
      - Network drivers
      - Embedded Systems
      - Suitable for hard and soft real time systems.
    + C++ Origin: C + Simula (First Object Oriented language)
    + Main Ideas:
      - Direct map to hardware
      - Zero-overhead abstraction
      - Much of inspiration comes from operating systems.
      - Backward compatibility: Avoid breaking old code.
    + Key strengths:
      + A language for building lightweight abstractions.
      + Software infrastructure.
      + Resource-constrained application. (May be embedded systems)
      + Resource Management

*** CPPCON-2017: Klaus Iglberger - Free Your Functions

+ [[https://www.youtube.com/watch?v=WLDT1lDOsb4][CppCon 2017: Klaus Iglberger "Free Your Functions!"]]
  * Description: "You are devoted to minimize coupling and
    duplication? You are taking care to maximize cohesion,
    flexibility, extensibility, encapsulation, testability, and even
    performance in order to achieve the high goals of
    (object-oriented) programming? Awesome!  But wait: You still
    favor member functions? Seriously? You have been deceived! You
    have been praying at the altar of false promises! Shed the
    shackles of Java philosophy! Free your functions!. In this talk I
    will demonstrate why in C++ free functions should generally be
    preferred to member functions, and why free functions — not
    member functions! — provide you with all the aforementioned
    advantages you expect from object-oriented programming. Note,
    though, that this talk might fundamentally change your perception
    of C++ and object-oriented programming in general!"

  * _Summary and notes_:
    * _Free functions_ (ordinary functions or non-virtual functions)
      abides to object oriented principles such as OCP (Open-Close
      Principle) as they can extend a class without requiring
      modification or recompilation of the class source code.
    * _Static polymorphism_ which is a combination of free functions
      and _template metaprogramming_ can make the code more loosely
      coupled and more perfomant.
      * Becomes more loosely coupled because it doesn't require that
        arguments have any common base class or class hierarchy.
      * Becomes more performant as template generates overloaded code
        for each different type parameters combination what
        eliminates virtual function calls and dynamic
        polymorphism. The disadvantage of templates are the higher
        complexity and larger code size.
    * Benefits of Free Functions:
      - Encapsulation
      - Cohesion (SRP - Single Responsibility Principle)
      - Reuse (DRY - DO NOT REPEAT YOURSELF)
      - Overloading (Polymorphism )
      - Generic Programming (Aka template metaprogramming)
      - Abstraction
      - Testability
      - _Performance_ (Raison d'être of C++).

    * Free Functions on standard library:
      - std::begin, std::cbegin ...

    * Use free functions in order to:
      * ... wrap virtual function calls
      * ... get an homogeneous interface.
      * ... get more performant code.
      * ... more flexible and loosely-coupled code.

    * Free functions aren't are multi-paradigm, they can work with
      any paradigm. It is not necessarly functional programming. 

    * Potential Problems
      * C++ doens't have a convenient syntax for function application
        as ML-based languages like Haskell and OCaml. So, multiple
        function applications would be written as f1(f2(f3(f5 ... fn(x))))

      * _Discoverability_: according to the presentation, IDE's may not
        help to find them easily as they help to find methods (aka
        member functions). However it can mitigated with careful
        selection of namespaces which would improve code complexion
        and discoverability.
*** CPPCON 2016: Klaus Iglberger "The Blaze High Performance Math Library"

 - [[https://www.youtube.com/watch?v=w-Y22KrMgFE][CppCon 2016: Klaus Iglberger “The Blaze High Performance Math Library" - YouTube]]
   - "In this presentation we introduce the Blaze C++ math library, a
     hot contender for the linear algebra performance throne. Blaze
     is an open-source, high-performance library for dense and sparse
     arithmetic. It combines elegance and ease of use with HPC-grade
     performance, making it one of the most intuitive and at the same
     time fastest C++ math libraries available. We demonstrate its
     basic linear algebra functionality by means of several BLAS
     level 1 to 3 operations and explain why Blaze outperforms even
     well established linear algebra libraries. Additionally, we
     present some advanced features that enable users to adapt Blaze
     to special circumstances: custom data structures, custom
     operations, and the customizable error reporting mechanism."

     - Note: Blaze library uses _Express Template_ technique for
       compile-time generation of high-performance linear algebra
       code. 
*** CppCon 2017: Mathieu Ropert "API & ABI Versioning"

- [[https://www.youtube.com/watch?v=Ia3IDPjA-d0][CppCon 2017: Mathieu Ropert “API & ABI Versioning...” - YouTube]]
  - "Software keeps changing, but not always as fast as its
    clients. A key to maintaining a library in the long run is to
    ensure a proper versioning of the API and ABI. Not only does this
    gives a clear picture of both source and binary compatibility
    between the versions, but it also helps design by making breaking
    changes explicit to the developer.  In this talk I will define
    API and ABI in terms of impacts on compatibility, explain the
    difference between breaking and non-breaking changes and present
    a few techniques to handle them.  We will quickly explain what
    APIs are, with an emphasis on the notion of contracts. Then the
    usually lesser known notion of ABI will be explained, going over
    the concepts of call syntax, mangling and most importantly sizes,
    alignment and offsets in data structures. We will see how to use
    semantic versioning (semver) in C++ by considering not only
    changes to the API but also to the ABI and offer some advice on
    how to change API and ABI over time and how to minimize the
    impacts."

*** LVM Euro Conference 2013 - The Clang AST - a Tutorial

+ [[https://www.youtube.com/watch?v=VqCkCDFLSsc][The Clang AST - a Tutorial - YouTube]]
  + "If you always wanted to know more about about Clang's AST [1],
    for example because you want to implement an awesome tool [2, 3]
    based on Clang, or simply because you want to start contributing,
    this talk is for you."
  + Note: Clang + LLVM suite provides many services that can be used
    to build code automation tools for C++ such as code generators
    and reflection metadata code generator.
*** C++Now 2018: Louis Dionne "Runtime Polymorphism: Back to the Basics"

- [[https://www.youtube.com/watch?v=OtU51Ytfe04][C++Now 2018: Louis Dionne “Runtime Polymorphism: Back to the Basics” - YouTube]]
  + Description: "C++ solves the problem of runtime polymorphism in a very
    specific way. It does so through inheritance, by having all
    classes that will be used polymorphically inherit from the same
    base class, and then using a table of function pointers (the
    virtual table) to perform dynamic dispatch when a method is
    called. Polymorphic objects are then accessed through pointers to
    their base class, which encourages storing objects on the heap
    and accessing them via pointers. This is both inconvenient and
    inefficient when compared to traditional value semantics. As Sean
    Parent said: Inheritance is the base class of evil. It turns out
    that this is only one of many possible designs, each of which has
    different tradeoffs and characteristics. This talk will explore
    the design space for runtime polymorphism in C++, and in
    particular will introduce a policy-based approach to solving the
    problem. We will see how this approach enables runtime
    polymorphism with stack-allocated storage, heap-allocated
    storage, shared storage, no storage at all (reference semantics),
    and more. We will also see how we can get fine-grained control
    over the dispatch mechanism to beat the performance of classic
    virtual tables in some cases. The examples will be based on a
    real implementation in the Dyno library [1], but the principles
    are independent from the library."

    + Problem: C++ sub-typing polymorphism inevitably requires
      pointers to objects allocated on the heap. However by using
      pointers, the advantages of value semantics, which C++ is built
      on top, are lost. For instance, pointers doesn't play well with
      C++ algorithms and functions expecting value or reference
      parameters. Another issue is that pointers to objects allocated
      on the heap raises questions about memory ownership such as who
      should delete the pointer.

      + Ideas => some possible approaches:
        + Use static polymorphism: _template functions._
        + Use a _proxy object allocated on the stack._ The object
          inherits the base class and takes a pointer to base class
          as argument. Then the proxy object can forward any method
          call or message to the wrapped heap object.
        + Deal with it and accept as it is for performance reasons.
*** CppCon 2017: Michael Spencer "My Little Object File: How Linkers Implement C++"

 - [[https://www.youtube.com/watch?v=a5L66zguFe4][CppCon 2017: Michael Spencer “My Little Object File: How Linkers Implement C++” - YouTube]]
   - "Ever wonder how the linker turns your compiled C++ code into an
     executable file? Why the One Definition Rule exists? Or why your
     debug builds are so large? In this talk we'll take a deep dive
     and follow the story of our three adventurers, ELF, MachO, and
     COFF as they make their way out of Objectville carrying C++
     translation units on their backs as they venture to become
     executables. We'll see as they make their way through the tangled
     forests of name mangling, climb the cliffs of thread local
     storage, and wade through the bogs of debug info. We'll see how
     they mostly follow the same path, but each approach the journey
     in their own way.  We'll also see that becoming an executable is
     not quite the end of their journey, as the dynamic linker awaits
     to bring them to yet a higher plane of existence as complete C++
     programs running on a machine."

*** Statistical scientific programming OO patterns: accumulators - Olivia Quinet - Lightning Talks :math:science:
 
 + [[https://www.youtube.com/watch?v=IwvA7oExmSo][Statistical scientific programming OO patterns: accumulators - Olivia Quinet - Lightning Talks - YouTube]]
   + "Statistical scientific programming OO patterns: accumulators -
     Olivia Quinet - Lightning Talks Meeting C++ 2017"
     + Summary: Accumulators like Boost.Accumulators allows to compute
       several statistical properties of a set of values such as a
       time series avoiding errors such as _float pointing_
       _castastrophic cancellation_ and loss of precision. The Welford
       statistical formula is shown as a way to implement accumulators
       and how it can be used to compute standard deviation and other
       statistical properties. 
*** Algorithms and Iterators for Multidimensional Arrays - Cem Bassoy - Lightning Talks Meeting C++ 2017 :math:science:

  + [[https://www.youtube.com/watch?v=8P-sDH9XJAc][Algorithms and Iterators for Multidimensional Arrays - Cem Bassoy - Lightning Talks Meeting C++ 2017 - YouTube]]

Paper at:  [[https://arxiv.org/abs/1711.10912][1711.10912 - TLib: A Flexible C++ Tensor Framework for Numerical Tensor Calculus]]

Abstract:

#+BEGIN_QUOTE
Numerical tensor calculus comprise basic tensor operations such as the
entrywise addition and contraction of higher-order tensors. We
present, TLib, flexible tensor framework with generic tensor functions
and tensor classes that assists users to implement generic and
flexible tensor algorithms in C++. The number of dimensions, the
extents of the dimensions of the tensors and the contraction modes of
the tensor operations can be runtime variable. Our framework provides
tensor classes that simplify the management of multidimensional data
and utilization of tensor operations using object-oriented and generic
programming techniques. Additional stream classes help the user to
verify and compare of numerical results with MATLAB. Tensor operations
are implemented with generic tensor functions and in terms of
multidimensional iterator types only, decoupling data storage
representation and computation. The user can combine tensor functions
with different tensor types and extend the framework without further
modification of the classes or functions. We discuss the design and
implementation of the framework and demonstrate its usage with
examples that have been discussed in the literature.

#+END_QUOTE
*** Rapid Prototyping in C++ - Dmitri Nesteruk - Meeting C++ 2015

 - [[https://www.youtube.com/watch?v=Ncy4Y-k-vLA][Rapid Prototyping in C++ - Dmitri Nesteruk - Meeting C++ 2015 - YouTube]]
   * Description: Show several techniques for fast prototyping in C++.
   * Summary:
     + CERN's ROOT Framework or CLING C++ interpreter. Allows to play
       and evaluate C++ code in the same fashion Python interpreter does.
     + Wrap the C++ library with SWIG wrapper generator to generate a Python binding and
       then prototype in the Python REPL.
     + Use a more suitable tool with fast feedback for prototyping
       such as spreadsheet, R language, Python, Matlab, Octave and so
       on.
     + Runtime compiled C++.
*** CPPCON 2016 - C++14 Reflections Without Macros, Markup nor External Tooling :reflection:metaprogramming:templates:

 + [[https://www.youtube.com/watch?v=abdeAew3gmQ][CppCon 2016: "C++14 Reflections Without Macros, Markup nor External Tooling.." - YouTube]]
   + "C++ was lacking the reflections feature for a long time. But a
     new metaprogramming trick was discovered recently: we can get
     some information about POD structure by probing it's braced
     initializes. Combining that trick with variadic templates,
     constexpr functions, implicit conversion operators, SFINAE,
     decltype and integral constants we can count structure's fields
     and even deduce type of each field.  Now the best part:
     everything works without any additional markup nor macros
     typically needed to implement reflections in C++.  In this talk
     I'll explain most of the tricks in detail, starting from a very
     basic implementation that is only capable of detecting fields
     count and ending up with a fully functional prototype capable of
     dealing with nested PODs, const/volatile qualified pointers,
     pointers-to-pointers and enum members. Highly useful use-cases
     will be shown a the end of the talk. You may start experimenting
     right now using the implementation at".
     
*** NDC Conference - Introduction to C++ Template Metaprogramming - Sasha Goldshtein :tmp:templates:

 + [[https://www.youtube.com/watch?v=lrziylOWBT4][Introduction to C++ Template Metaprogramming - Sasha Goldshtein]]
   + "technique in modern C++. First, TMP can be used as a precursor
     to C++17 Concepts, in order to check constraints and produce
     clear error messages when a template parameter doesn't adhere to
     its specified constraints. Second, TMP can be used to pick an
     algorithm implementation based on the template type provided --
     thus enabling optimizations for specific types. Finally, TMP can
     be used to introspect C++ types at compile-time and generate
     compile-time constructs that save time or enable
     fully-compile-time computation. In this talk, we will review a
     collection of techniques and examples for using TMP in your
     libraries and application code. You are expected to understand
     basic template syntax and template specialisation, and we will
     build the rest as we go along." 
