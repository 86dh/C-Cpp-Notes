#+INCLUDE: theme/style.org
#+TITLE: CPP / C++ - Bookmarks 
#+DESCRIPTION: cpp c++ code examples, demonstrations, design pattern and integration.
#+STARTUP: content 

 - [[wiki:index][Index]]

* Bookmarks 
** Code Standards and guidelines 

 *Design guidelines*

Design:

 + [[https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_4.html][Taligent's Design Guidelines]]

 + [[https://cppdepend.com/blog/?p=179][Lessons to learn from the old well implemented games: Prince of Persia && Doom3. – CppDepend Blog]]

Exception and Error Handling: 

 + ISO-CPP [[https://isocpp.org/wiki/faq/exceptions][Exceptions and Error Handling, C++ FAQ]]
   + Great coverage about error handling, error recovery, performance
     considerations about exceptions and their benefits and drawbacks
     as well.

 + [[https://cppdepend.com/blog/?p=311][Exceptions is one of the controversy mechanism in C++. Should I use them? – CppDepend Blog]]
   + Provides insights of widely known C++ experts and gurus about
     exceptions and useful considerations.

 + [[http://www.acodersjourney.com/2016/08/top-15-c-exception-handling-mistakes-avoid/][Top 15 C++ Exception handling mistakes and how to avoid them. - A CODER'S JOURNEY]]

Fail-fast approach: 

 + [[https://www.codeproject.com/Articles/1138445/Introduction-to-the-Fail-Fast-Principle-in-Softwar][Introduction to the 'Fail Fast!' Principle in Software Development - CodeProject]]
 + [[https://enterprisecraftsmanship.com/2015/09/15/fail-fast-principle/][Fail Fast principle - Enterprise Craftsmanship]]
 + [[http://ithare.com/unchecked-exceptions-for-c/][Unchecked Exceptions for C++ - IT Hare on Soft.ware]]
 + [[http://joeduffyblog.com/2016/02/07/the-error-model/][Joe Duffy - The Error Model]]
 + [[http://wiki.c2.com/?FailFast][Fail Fast]]


 *Coding format and standard guidelines*

 + [[https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#main][ISO C++ Core Guidelines]] - "This is a set of core guidelines for
   modern C++, C++17, C++14, and C++11, taking likely future
   enhancements and ISO Technical Specifications (TSs) into
   account. The aim is to help C++ programmers to write simpler, more
   efficient, more maintainable code."

   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors-assignments-and-desctructors][C++ Core Guidelines: The Rule of Zero, Five, or Six - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-when-you-can-t-throw-an-exception][C++ Core Guidelines: finally in C++ - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-constructors][C++ Core Guidelines: Constructors - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-more-rules-to-concurrency-and-parallelism][C++ Core Guidelines: More Rules to Concurrency and Parallelism - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-concurrency-and-lock-free-programming][C++ Core Guidelines: Concurrency and lock-free Programming - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-rules-to-error-handling][C++ Core Guidelines: Rules for Error Handling - ModernesCpp.com]]
   + [[http://www.modernescpp.com/index.php/c-core-guidelines-type-erasure][C++ Core Guidelines: Type Erasure - ModernesCpp.com]]

 + [[https://developer.mozilla.org/en-US/docs/Mozilla/Using_CXX_in_Mozilla_code][Using C++ in Mozilla code - Mozilla | MDN]] 

 + [[https://wiki.openstack.org/wiki/CppCodingStandards#Using_Namespaces_Properly][CppCodingStandards - OpenStack]] - "Note that coding standards and
   guidelines will never be perfect and that not everyone will agree
   with every guideline or naming convention. The purpose of the
   guidelines and standards are to maintain consistency in the source
   code." 

 + [[https://google.github.io/styleguide/cppguide.html][Google C++ Style Guide]]

 + [[http://drake.mit.edu/styleguide/cppguide.html][Google C++ Style Guide for Drake]]

 + [[https://developer.lsst.io/cpp/style.html][DM C++ Style Guide — LSST DM Developer Guide Current documentation]]

 + [[https://users.ece.cmu.edu/~eno/coding/CppCodingStandard.html][C++ Coding Standard]]

 + [[https://juce.com/discover/stories/coding-standards][Coding Standards | JUCE]] - Juce code standard and its rationale and
   motivation.  
** Tooling 
*** Online Tools

 * *Online Compilers*

   + https://coliru.stacked-crooked.com/
     + The only online compiler which supports C++17 and the experimental
       C++20. 

   + http://rextester.com/
     + The main selling point of this online tool is that it allows to
       save code snippets and run them again. 
     + Online C++ compiler, provides GCC, CLANG and Visual Studio
       Compiler, also known as MSVC (VC++ - Visual C++).

   + https://repl.it/languages/cpp11
     + Oline compiler (GCC / C++11 only) with REPL support.

   + https://wandbox.org/

 * *Compiler Explorer*
   + https://godbolt.org/
     * Compiler explorer - allows to explore the assembly generated by a
       wide variety of compilers, including, GNU GCC, Clang, MSVC and so on.
   + https://demangler.com/
     * Symbol demangler for MSVC and GCC.

 * *Template expasion visualizer*
   + http://metashell.org/index.html

 * *UML Ascii/Text Drawing Tools*
   * [[http://asciiflow.com/][ASCIIFlow Infinity]] (Pick-and place)
     * Allows to draw Ascii UML box diagrams by dragging and dropping
       like in MS-Paint.

   * http://stable.ascii-flow.appspot.com/ (Pick-and place)

   * https://textik.com/ (Pick-and place)

   * https://www.planttext.com/ (Latex-like)

   * https://textart.io/sequence  (Latex-like)
     * UML Sequence Diagram drawing tool. The user writes the commands
       and the tool draws the diagram. It adopts an approach similar
       to Tex/Latex.


 * *MISC*
   + [[https://www.google.ca/search?q=float%20point%20online][float point online - Google Search]]
   + [[https://www.h-schmidt.net/FloatConverter/IEEE754.html][IEEE-754 Floating Point Converter]]
   + [[http://weitz.de/ieee/][IEEE 754 Calculator]]
*** Building Systems

 + [[https://cmake.org/][CMake]] - Meta building system which can generate building scripts
   for platform-preferred building systems. For instance, it can
   generate Makefile for U*nix-like system, Ninja build scripts,
   Visual Studio solutions and so on.
   + Note: CMake is being used by many projects and supported by many
     IDEs. Now, it is supported by Microsft's Visual Studio and
     JetBrains' Clion IDE and others. 

 + [[https://build2.org/][build2]] - "build2 is an open source (MIT), cross-platform build
   toolchain for developing and packaging C++ code. It is a hierarchy
   of tools that includes the build system, package dependency manager
   (for package consumption), and project dependency manager (for
   project development)."
   + See: [[https://news.ycombinator.com/item?id=17188851][Build2, a Cargo-like dependency and build manager for C/C++ | Hacker News]]

 + *Make* (GNU Make, BSD Make and NMake) - Simple and quick building
   system more used on U*nix-like operating systems.

*** Documentation Generator 

  + [[http://www.doxygen.nl/][Doxygen]] 
    + Doxygen builds documentatiuon in many formats including text and
      html by extracting documentation code from comments.
    + Example of documentation generated with Doxygen:
      + https://docs.wxwidgets.org/stable/
      + http://assimp.sourceforge.net/lib_html/index.html
      + [[http://www.wangafu.net/~nickm/libevent-2.1/doxygen/html/dir_db160b4728e6067cf5f9cc14ec42c79d.html][libEvent]]

*** Windows Development

  + *SysInternals* - A collection of debugging tools which allows to
    introspect processes and get informations such as loaded DLLs,
    files opened by a process, network activity and so on.
    + https://docs.microsoft.com/en-us/sysinternals/
    + http://www.sysinternals.com/
    + https://docs.microsoft.com/en-us/sysinternals/downloads/process-utilities

  + *Sysinternals* / dumpbin
    + Show informations Windows native executables and shared
      libraries, specifically about PE32 object code. For instance, it
      can show symbols exported by a DLL, DLLs used by an executable
      and functions imported by the executable from DLLs.

  + *Sysinternals* / procmon
    + Process mionitor

  + *Sysinternals* / procexp
    + Process explorer

  + *Sysinternals* / Winobj
    + WinObj accesses and display information on the NT Object
      Manager's name space

  + *Dependency Walker* - Tool which scans executable dependencies such
    as imported DLLs.
    + http://www.dependencywalker.com/ 

*** U-nix and Linux Development 

The following tools are not only useful for debugging, diagnosing and
assisting development, they are also useful for reverse engineering. 

Note: 
 + object files: executables and shared libraries (*.so files),
   generally with ELF format.

| Tool / Command            | Description                                                  |
|---------------------------+--------------------------------------------------------------|
| file                      | identify file type by its header bytes                       |
| nm                        | list symbols exported by executables                         |
| c++filt                   | demangles C++ symbols                                        |
| objdump                   | show detailed information about object files                 |
| readlef                   | show information about ELF object files.                     |
| strings                   | show human readable characters in the executable             |
| strip                     | discard symbols                                              |
| ptrace and strace         | trace system calls                                           |
| gdb                       | GNU Debugger                                                 |
| lsof                      | Check which files a process is using                         |
| Directory /etc/proc/<pid> | Allows to check which files and resources a process is using |
|                           |                                                              |
|---------------------------+--------------------------------------------------------------|

*** Assembly for x86 and x64 

 + https://godbolt.org/
   + Compiler explorer - allows to explore the assembly generated by a
     wide variety of compilers, including, GNU GCC, Clang, MSVC and so
     on.

 + [[https://github.com/zerosum0x0/WinREPL][WinREPL]] - Assembly REPL - interactive shell like Python or IPython
   for Windows.
   + Precompile binaries: https://github.com/zerosum0x0/WinREPL/releases/

 + [[https://github.com/yrp604/rappel][Rappel]] - A linux-based assembly REPL for x86, amd64, armv7, and armv8.
   + [[https://news.ycombinator.com/item?id=11214868][Rappel: A REPL for x86, amd64, and armv7 | Hacker News]]

 + [[https://www.radare.org/r/][radare]] Framework - A suite of reversing enegineering tools.
   + Features:
     * Disassemble (and assemble for) many different architectures
     * Debug with local native and remote debuggers (gdb, rap, webui, r2pipe, winedbg, windbg)
     * Run on Linux, *BSD, Windows, OSX, Android, iOS, Solaris and Haiku
     * Perform forensics on filesystems and data carving
     * Be scripted in Python, Javascript, Go and more
     * Support collaborative analysis using the embedded webserver
     * Visualize data structures of several file types
     * Patch programs to uncover new features or fix vulnerabilities
     * Use powerful analysis capabilities to speed up reversing
     * Aid in software exploitation

 + [[http://www.unicorn-engine.org/][Unicorn]] - CPU emulator Framework
   + https://github.com/unicorn-engine/unicorn  

*** Memory Leak Debuggers 

 + [[http://www.valgrind.org/][Valgrind]]
   + Most well known memory leak debugger for *Nix
     systems. Unfortunately, it doesn't work on Windows.
   + [[https://en.wikipedia.org/wiki/Valgrind][Valgrind - Wikipedia]]
   + [[http://doc.qt.io/qtcreator/creator-valgrind-overview.html][Using Valgrind Code Analysis Tools | Qt Creator Manual]]

 + [[http://drmemory.org/][Dr. Memory Memory Debugger for Windows and Linux]]
   + "Dr. Memory is a memory monitoring tool capable of identifying
     memory-related programming errors such as accesses of
     uninitialized memory, accesses to unaddressable memory (including
     outside of allocated heap units and heap underflow and overflow),
     accesses to freed memory, double frees, memory leaks, and (on
     Windows) handle leaks, GDI API usage errors, and accesses to
     un-reserved thread local storage slots." 

See also: 
 + [[https://stackoverflow.com/questions/413477/is-there-a-good-valgrind-substitute-for-windows][c - Is there a good Valgrind substitute for Windows? - Stack Overflow]]

*** Emacs as a C++ IDE 

Misc: 

 + [[https://nilsdeppe.com/posts/emacs-c++-ide2][Using Emacs as a C++ IDE - Take 2]]
 + [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Emacs as a C++ IDE]]
 + [[https://oremacs.com/2017/03/28/emacs-cpp-ide/][Using Emacs as a C++ IDE · (or emacs]]
 + [[https://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]]
 + [[https://www.reddit.com/r/emacs/comments/7wzstc/emacs_as_a_c_ide_martin_sosics_blog/][Emacs as a C++ IDE - Martin Sosic's blog : emacs]]

Using Emacs a GDB Front-end (aka user interface): 

 + [[https://www.cs.bu.edu/teaching/tool/emacs/programming/][Using Emacs for Programming]]
** Libraries 
*** FFI - Foreign Function Interface 

 + [[http://www.dyncall.org/index][dyncall.org - calling C functions dynamically]]
   + "The dyncall library encapsulates architecture-, OS- and
     compiler-specific function call semantics in a virtual bind
     argument parameters from left to right and then call interface
     allowing programmers to call C functions in a completely dynamic
     manner. In other words, instead of calling a function directly,
     the dyncall library provides a mechanism to push the function
     parameters manually and to issue the call afterwards." 

 + [[https://www.gnu.org/software/libffcall/][libffcall - GNU Project - Free Software Foundation]]

** Debugger 
*** GDB Front-Ends GUI 

GDB's (GNU Debugger) Front-End GUI for [U]-nix

 + [[https://sourceware.org/gdb/wiki/GDB%20Front%20Ends][GDB Front Ends - GDB Wiki]]

 + http://www.kdbg.org/ - GNU Debugger Front-End with KDE user
   interface.
   + Linux Fedora install: *$ sudo dnf install kdbg.x86_64*
   + Interface Style: KDE/QT
   + Features:
     + Syntax highligh
     + Dissably Line - Just click at a given line to show its assembly code.
     + Watch variables and expressions at any context
     + Can View the current stack of many threads
     + Inspect Stack Variables in a tree-like structure
     + View CPU Register.

 + [[https://wiki.gnome.org/Apps/Nemiver][Neminver]] - Intuitive and easy GNOME User Interface for (GDB) GNU
   Debugger.
   + Linux Fedora install: *$ sudo dnf install neminver.x86_64*
   + Interface Style: GNOME/Gtk 
   + Features:
     + Syntax highligh
     + Set/Clear breakpoints graphically by clicking.
     + Many windows to watch stack variables
     + Watch variables and C++ expressions.
     + View CPU Registers

   + https://gdbgui.com/ - Browser Front-end for GDB Server.
     + Note: requires Python.

 + https://github.com/cyrus-and/gdb-dashboard
   + GUI Style: TUI - Terminal User Interface - Keyboard driver.
   + Modular GDB Interface written in Python.

*** GDB Reference Cards 

 + [[http://visualgdb.com/gdbreference/commands/print][GDB Command Reference - print command]]

 + [[https://darkdust.net/files/GDB%2520Cheat%2520Sheet.pdf][PDF - GDB Cheat Sheet]]

 + [[http://shanekirk.com/2018/02/gdb-tips-and-tricks-6-examining-data-types/][GDB Tips and Tricks #6: Examining Data Types – ShaneKirk.com]]

 + [[http://shanekirk.com/2017/12/gdb-tips-and-tricks-5-the-display-command/][GDB Tips and Tricks #5: The Display Command – ShaneKirk.com]]
** Mind Map 

Shared Libraries / Software Components 

 - Interoperability

 - Binary Compatibility

 - C-library

   - [[http://www.etalabs.net/compare_libcs.html][Comparison of C/POSIX standard library implementations for Linux]]

 - Linking

   - Static Linking

   - Dynamic Linking

 - [[http://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]

 - API - Application Programming Interface

 - ABI - [[https://en.wikipedia.org/wiki/Application_binary_interface][Application Binary Interface]]

   - Calling Conventions

   - [[https://en.wikipedia.org/wiki/System_call][System Call]]

   - Stable and Standard ABI - C Language

   - [[https://en.wikipedia.org/wiki/Loader_(computing)][Loader (computing)]]

   - [[https://en.wikipedia.org/wiki/Dynamic_linker][Dynamic linker]]

   - [[https://en.wikipedia.org/wiki/Binary-code_compatibility][Binary-code compatibility]]

 - FFI - Foreign Function Interface 

 - Excetuable Formats

   - [[https://en.wikipedia.org/wiki/Portable_Executable][PE]] - Portable Executable / Windows (*.exe files and *.dll files)

   - [[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF]] - Executable and Linkable Format / Unix (Linux, BSD ...)

   - [[https://en.wikipedia.org/wiki/Mach-O][Mach-O]] -  Mach object file format / Mach-OSX and IOS

   - [[https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats][Comparison of executable file formats]]

   - 

** Drawbacks and ABI Issues

*Drawbacks*

 + C++ is unsafe. Bugs like stack overflow, buffer overlow, null
   pointr exceptions may happen.

 + _Operating System Depedent_ - C++ may be portable, but it is not
   cross platform since it is compiled to machine code and for a
   particular operatiing system.

 + Hardware dependent (Processor Architecture) and Operating System
   Depedent. C++ is compied to machine code / binary code for a
   particular operating system and processor architecture with
   different executable formats. The most common processor
   architectures are Intel x86 (32 bits) and AMD64 (64 bits).

   + OS Windows            / Executable Format - PE-32

   + Unix (Linux, BSD ...) / Executable Format - ELF

   + Mac-OSX               / Executable Format - Mac-O

   +

 + _No Standard ABI (Application Binary Interface)_ - C++ shared
   libraries and programs compiled with different compilers or
   different versions of same compiler may be incompatible because
   unlinke C, C++ doesn't have a standard ABI. It makes hard to call
   libraries written in C+++ through an FFI - Foreign Function
   Interface form another programming language such as Python.


*ABI Issues* - Credits: *Defining a Portable C++ ABI* - https://isocpp.org/files/papers/n4028.pdf

_A C++ developer cannot compile C++ code and share the object file with_
_other C++ developers on the same platform and know that the result_
_will compile and link correctly_. Our status quo is that two source
files a.cpp and b.cpp can only be linked together if they are compiled
with both:" -- ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

 - "the same version of the same compiler, or another compiler with a
   compatibility mode" ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

 - "compatible switch settings, since most C++ compilers offer
   incompatible switch settings where even compiling two files with
   the same version of the same compiler will not link successfully."
   ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



Issues:

 - "It makes sharing binary C++ libraries more difficult: _To ship a C++_
   _library in binary form for a given platform requires building it_
   _with possibly dozens of popular combinations of switch settings for_
   the popular compiler(s) on that platform, and then may not cover
   all combinations. Alternatively, one can wrap the library in that
   platform’s stable C ABI, which brings us to…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 - "_It is a valid reason to use C: This is (the) one area where C is_
   _superior to C++_. Among programs and programmers who would otherwise
   use C++, _the top reason to use C appears to be the inability to_
   _publish an API with a stable binary ABI_, including that it can be
   linked to from C, C++, and other languages’ foreign function
   interfaces (FFIs) such as Java JNI and .NET PInvoke. In
   particular…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 - "_It therefore creates ongoing security problems: The fact that C is_
   _the only de facto ABI-stable lingua franca continues to encourage_
   _type- and memory-unsafe C APIs that traffick in things like error_
   prone pointer/length pairs instead of more strongly typed and still
   highly efficient abstractions, including but not limited to
   std::string or the new string_view"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])


*Solutions to ABI compatibility issues*

 1) _Distribute the library in source format_. Approach adopted by QT
    (former Trolltech Inc, now the QT Company) with open source and
    commercial license.

 2) Distribute the library in binary format and only support a
    specific compiler.

 3) _Compile he C++ shared library with all possible compilers_ and
    distribute the binaries for each compiler, compiler version,
    processor architecture and operating system.

 4) _Write the library in C, instead of C++_. This approach is followed
    by most Unix/Linux libraries and OpenGL and Gtk GUI toolkit.

 5) Use some language that can compile/generate C-code (transpiler).

 6) Use Microsoft COM (Component Object Model)/ DCOM or CORBA, DBUS ... 



Note: C is until now the only language with a standard and public ABI
and most OS exposes its API through a C interface, programming
languages runtimes are generally implement in C.

** Compiler Metadata Generators

 + [[https://pygccxml.readthedocs.io/en/develop/upgrade_issues.html][GCC-XML 0.7 → 0.9 upgrade issues (Legacy) — pygccxml 1.9.1 documentation]]
      
** Tooling 

 * Documentation Builder, aka Generator 
   + Doxygen => http://www.doxygen.org/
   
 * IDEs and Quasi-IDEs

   + *Visual Studio Community Edition* (Windows Only)

   + *CLion* / JetBrains 

   + GNome Builder => Not an IDE, but at least the code completion
     "just works" without any configuration. 
     + https://wiki.gnome.org/Apps/Builder/Features
     + https://www.collabora.com/news-and-blog/blog/2018/08/03/cross-compilation-made-easy-for-gnome-builder/

 * Building Systems
   + CMake
     + https://cmake.org/documentation/
   + Meson
     + https://github.com/mesonbuild/meson/wiki
   + SCons
     + https://scons.org/
   + Make (GNU Make, BSD Make or Windows MAKE - NMake)
     + https://en.wikipedia.org/wiki/Makefile
   + Ninja
     + https://ninja-build.org/

 * Package Managers:
   + https://conan.io/
   + [[https://docs.microsoft.com/en-us/cpp/vcpkg?view=vs-2017][vcpkg-- A C++ package manager for Windows, Linux and MacOS | Microsoft Docs]]
   + [[http://www.buckaroo.pm/][Buckaroo - C/C++ Package Manager]]
   + [[https://gist.github.com/Overdrivr/d14e4c7e79234f1fb7b3a5a14f8b6ad9][Why C/C++ package managers fail for now ?]]

 * Source Code Naviagator => Helpers for understanding code. 
   + Source Trail => https://www.sourcetrail.com/
   + CPPDepend

 * *Debuggers* - Essential tools for development, debugging,
   introspecing processes, reversing engineering and security
   research.
   + GDB  - GNU Debugger 
   + LLDB - LLVM/Clang Debugger
   + WinDG -> Windows Debugger 
   + IDA

** What sucks about C++ 

Outline: 
 + Slow compile-time 
 + Macros and preprocessor
 + No pre-compiled libraries, project dependencies have to be
   compiled from source due to ABI incompatibility. This is why
   header-only libraries are popular. 
 + Lack of module system 
 + Undefined behavior 
 + High Degree of Complexity
 + Complexity of building systems 
 + No standard package manager
 + Binary compatibility among compilers.
 + Lack of ABI makes unfeasible to build C++ components or shared
   libraries without a C API. In C#, the user has just to add a DLL
   and in Java, the user has just to add jar package to include a
   dependency in a project. In C++, it is not possible, all
   dependencies need to compiled from source.
 + Code repetitition, every class' source file .cpp needs a matching
   header file. 

References: 

 + [[https://blog.codinghorror.com/the-problem-with-c/][The Problem With C++]] - Jeff Atwood. 
 + [[https://dorinlazar.ro/why-c-sucks-2016-02-edition/][Why C++ sucks (2016.02 edition) – dorinlazăr.ro]]
 + [[https://flyx.org/2014/04/24/cpp_sucks/][flyx.org - Reasons why C++ sucks]]
 + [[https://whydoesitsuck.com/cpp-sucks-for-a-reason/][The C++ Programming Language Sucks for a Very Good Reason | Why Does It Suck?]]
 + [[https://en.wikipedia.org/wiki/Criticism_of_C%2B%2B][Criticism of C++ - Wikipedia]]
 + [[https://en.wikipedia.org/wiki/Most_vexing_parse][Most vexing parse - Wikipedia]]
** C++ Resources

*C++ General Resources*

 - Ian D. Chivers - *An Introduction to C++*
   <http://www.icsd.aegean.gr/lecturers/kavallieratou/Cplusplus_files/notes.pdf>

 - [[https://www.reddit.com/r/Physics/comments/2w4exo/what_are_the_useful_aspects_of_c_in_physics/][What are the useful aspects of C++ in Physics programming? : Physics]]

 - [[https://anteru.net/blog/2016/05/01/3249/][Designing C APIs in 2016 | Anteru’s blog]]

*C++ Numerical Methods and Scientific Computing*

 - Prof. R. Hiptmair, SAM, ETH Zurich. *Numerical Methods for
   Computational Science and Engineering* -
   <http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf>


 - Norbert Pozar. *Basic C++ for numerical computations: vectors*
   <http://polaris.s.kanazawa-u.ac.jp/~npozar/basic-cpp-for-numerics-vectors.html>


*C++ STL - Standard Template Library*


 - *A modest STL tutorial*
   <http://cs.brown.edu/~jak/proglang/cpp/stltut/tut.html>


 - Carlos Moreno. *C++ Vectors* <https://cal-linux.com/tutorials/vectors.html>


*C++ ABI - Application Binary Interface, Binary Compatibility and FFI*

 - By Agner Fog. *Calling conventions for different C++ compilers and
   operating systems*
   <http://www.agner.org/optimize/calling_conventions.pdf>


 - Armin Ronacher. *Beautiful Native Libraries*
   <http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/>


 - Herb Sutter. *Defining a Portable C++ ABI* <https://isocpp.org/files/papers/n4028.pdf>

 - *Some thoughts on binary compatibility*
   <http://blog.qt.io/blog/2009/08/12/some-thoughts-on-binary-compatibility/>

 - *Interoperability of Libraries Created by Different Compiler
   Brands* <http://www.mingw.org/wiki/Interoperability_of_Libraries_Created_by_Different_Compiler_Brands>

 - Thiago Macieira. *Binary compatibility for library developers*
   <https://events.linuxfoundation.org/sites/events/files/slides/Binary_Compatibility_for_library_devs.pdf>

 - *What Language I Use for… Creating Reusable Libraries: Objective-C*
   <http://www.informit.com/articles/article.aspx?p=2144812>

 - *Compilable modern alternatives to C/C++* -
   <https://softwareengineering.stackexchange.com/questions/162614/compilable-modern-alternatives-to-c-c>

 - [[https://stackoverflow.com/questions/3217513/are-llvm-gcc-and-clang-binary-compatible-with-gcc-particularly-mingw-gcc-on-w][linker - Are llvm-gcc and clang binary compatible with gcc? - particularly mingw gcc on Windows - Stack Overflow]]

 - [[http://rlc.vlinder.ca/blog/2009/08/binary-compatibility/][Binary Compatibility | Making Life Easier]]

 - *System V Application Binary Interface AMD64 Architecture Processor
   Supplement* <https://c9x.me/compile/bib/abi-x64.pdf>

 - *Software optimization resources* - <http://www.agner.org/optimize/>

 - [[https://softwareengineering.stackexchange.com/questions/281882/why-does-c-provide-language-bindings-where-c-falls-short][Why does C provide language 'bindings' where C++ falls short? - Software Engineering Stack Exchange]]

 - [[https://news.ycombinator.com/item?id=2379676][I've written in C++ professionally almost 12 years (17 years counting College), ... | Hacker News]]

 - [[https://www.reddit.com/r/swift/comments/67z7dy/what_is_abi_stability_and_why_does_it_matter/][What is ABI stability and why does it matter? : swift]]

 - [[https://www.reddit.com/r/programming/comments/4r6r8e/abi_vs_api/][ABI vs. API : programming]]

 - [[https://www.reddit.com/r/linux_gaming/comments/5nqaux/confused_about_compatibility/dcdxd19/][heartsofwar comments on Confused about Compatibility]]

 - [[https://www.reddit.com/r/askscience/comments/3ei05n/why_is_that_programs_need_to_be_ported_between/][Why is that programs need to be ported between operating systems in order in to function? What goes on at the programming level to require this? : askscience]]

 - [[https://www.reddit.com/r/AskProgramming/comments/5c74i4/some_thoughts_about_abis/][some thoughts about ABIs : AskProgramming]]

 - [[http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html][Damien Katz: The Unreasonable Effectiveness of C]]

 - [[https://www.reddit.com/r/linux/comments/42vngw/why_is_the_linux_community_ambivalent_about/][Why is the Linux community ambivalent about binary compatibility? : linux]]

 - [[https://www.reddit.com/r/C_Programming/comments/4afu69/implementing_cross_platform_library_in_c_proscons/][Implementing cross platform library in C pros/cons C_Programming]]

 - 

 - 

*C-Interface* 

 - *CppCon 2014: Stefanus DuToit "Hourglass Interfaces for C++ APIs* -
   <https://www.youtube.com/watch?v=PVYdHDm0q6Y>


*FFI - Foreign Function Interface*

 - https://en.wikipedia.org/wiki/Foreign_function_interface

 - [[http://www.mono-project.com/docs/advanced/pinvoke/][Interop with Native Libraries | Mono]]

 - [[https://en.wikipedia.org/wiki/SWIG][SWIG - Wikipedia]] -  Simplified Wrapper and Interface Generator

 - [[https://sourceware.org/libffi/][libffi]] - A Portable Foreign Function Interface Library

 - [[https://en.wikipedia.org/wiki/Libffi][libffi - Wikipedia]]

 - [[https://docs.python.org/3/extending/extending.html][1. Extending Python with C or C++ — Python 3.6.1 documentation]]

 - [[https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx][Platform Invoke Tutorial (C#)]]

 - [[https://www.reddit.com/r/explainlikeimfive/comments/5c2yfq/eli5_how_can_a_single_software_project_use/][Eli5: How can a single software project use multiple languages? Wouldn't the compiler have difficulty understanding what's what? : explainlikeimfive]]

 - [[https://www.reddit.com/r/learnprogramming/comments/3dzif8/how_do_you_communicate_between_different_computer/][How do you communicate between different computer languages? : learnprogramming]]


*Courses and Online Books*

 - [[https://en.wikibooks.org/wiki/C%2B%2B_Programming][C++ Programming - Wikibooks, open books for an open world]]


 - Francois Fleuret. *C++ lecture notes*
   <https://www.idiap.ch/~fleuret/files/Francois_Fleuret_-_C++_Lecture_Notes.pdf>


 - Course:  https://www3.ntu.edu.sg/home/ehchua/programming/

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp0_Introduction.html][An Introduction to C++ Programming for First-time Programmers - C++ Programming Tutorial]] - https://archive.is/MRDZI

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_STL.html][C++ Libraries, String and Standard Template Library]] - https://archive.is/lrIDk

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp2_MoreBasics.html][C++ More Basics]] - https://archive.is/pr7pn

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html][Object-oriented Programming (OOP) in C++]] - https://archive.is/lpXae

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html][C++ Pointers and References]] - https://archive.is/Ja1xJ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp5_OOPExamples.html][Examples on Classes and Objects]] - https://archive.is/eZJPl

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp8_Template.html][Object-oriented Programming (OOP) in C++ - Template and Generic Programming]] - https://archive.is/eG0KZ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp10_IO.html][C++ IO Streams and File Input/Output]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp11_TipsTraps.html][Examples on Classes and Objects]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/DataStructureAlgorithm.html][Data Structure and Algorithm]]

*Unix - API / LibC*

 - *User space and the libc interface* - <https://www.win.tue.nl/~aeb/linux/lk/lk-3.html>


*Embedded Systems*

 - [[http://bitbashing.io/embedded-cpp.html][C++ On Embedded Systems]]

 - [[http://git.eti.pg.gda.pl/intel-grant/pliki/esp/ESP_Toolchain_ENG.pdf][Embedded Systems Programming OS Linux - Toolchain]]

 - 

*Alternatives to C++*

The C++ language is suitable for system programming, writing native
applications and writing high performance software components or
libraries. However the lack of standard ABI - Application Binary
interface makes calling C++ calling a C++ library through FFI -
Foreign Function Interface in another language harder.

Due to the C++ ABI issues, many portable libraries that are easier to
invoked through a FFI are written in C, for instance, GTK GUI toolkit,
... 

Selection Requirements: 

 - Compile to native code.

 - Have an stable and standard ABI - Application Binary Interface like C.

 - Be able to build shared libraries *.so or *.dll and easily invoked
   through FFI - Foreign Function Intefaces of high level languages
   such as Python, Ruby, Java, C# and so on.

 - Be memory safe in order to avoid buffer overflow. 


_D language_


   - [[http://bitbashing.io/2015/01/26/d-is-like-native-python.html][D is like native Python]]

   - [[http://code.dlang.org/packages/pyd][Package pyd version 0.9.9 - DUB - The D package registry]]

   - [[http://dlang.org/spec/abi.html][Application Binary Interface - D Programming Language]] 

   - [[https://dlang.org/dll-linux.html][Writing Shared Libraries With D On Linux - D Programming Language]]

   - [[http://blog.tenstral.net/2016/05/adventures-in-d-programming.html][Adventures in D programming | Ximions Blog]]

_Gambit Scheme_ 

A Scheme implementation that is interactive with a REPL and that can
generate C-code and invoke C-libraries. It can be compiled to
shared libraries *.so or *.dlls and be called from scheme REPL.

_Rust_

** C => to C++ Guidelines

+ Malloc - Avoid malloc and manual memory management. Instead of that
  use _new_ and _vector_ instead of realloc.
+ Pointer - Avoid pointers.
+ Arrays - Use C++ STL vector classes instead of arrays.
+ Strings. Don't use array of characters to represent a string,
  instead of that use c++ strings by inclunding '#include <string>'
  header at the top of file.
+ Separate the operating system depedent code from the
  operating system agnostic code.

** Books 
*** C++ Programming Language 

+ Bruce Eckel. *Thinking in C++*. 1995
  + Notes: Despite being an old book, it has a step-by-step coverage
    of C++ main concepts and some design patterns.

+ Andrew Koenig and Barbara E. Moo. *Accelerated C++: Practical Programming by Example*

+ Andrei Alexandrescu. *Modern C++ Design: Generic Programming and*
  *Design Patterns Applied 1st Edition*. 2001 
  + Notes: Provides a comprehensive and broad coverage of C++
    generic/template metaprogramming.
  + Link: [[https://www.amazon.com/Modern-Design-Generic-Programming-Patterns/dp/0201704315][Amazon]]

+ Scott Meyers. *Effective C++ Third Edition, 55 Specific Ways to Improve Your*
  *Programs and Designs* 

+ Bjarne Stroustrup. *Tour of C++ second edition*

 *More Advanced Books:*

+ Martin Reddy. *API Design for C++* 
  + Table of contents: http://www.apibook.com/blog/contents
  + Amazon: https://www.amazon.com/API-Design-C-Martin-Reddy/dp/0123850037
  + Note: Covers design patters, API Versioning, Plugins, Scripts, ...

*** System Programming - Posix / Linux and U**N-ix

Note: Most of those books use C because operating system services and
low level system libraries are exposed in *C language* and most used
operating systems nowadays were written in C. In addition, C++ still
doesn't have a stable and standardized ABI (Application Binary
Interface like C).

Books about Linux C-APIs are not only useful for this operating
system, but also for other Unix-based OSes such as MacOSx, BSD,
Android (Based on Linux), QNX Rtos and so on.

 * Michael Kerrisk. *The Linux Programming Interface* - 2010 - ISBN
   978-1-59327-220-3
   + Coverage: File I/O, Processes, Memory Allocation, Daemons, Shared
     Libraries, Interprocess communication, System V Message Queues,
     System V Semaphores, Memory Mapping, TCP/IP Sockets,
     Unix-Sockets, Terminals and System Calls.
   + Web site:  http://man7.org/tlpi/
   + Wikipedia: [[https://en.wikipedia.org/wiki/The_Linux_Programming_Interface][The Linux Programming Interface - Wikipedia]]
   + Chapters:  http://man7.org/tlpi/toc-short.html
   + [[https://www.amazon.com/Linux-Programming-Interface-System-Handbook/dp/1593272200][Amazon Link]]

 * Kurt Wall et al. *Linux Programming Unleashed* - 1999
   + Covers low level system calls; process control;
     thread-synchronization primitives; TCP/IP sockets and network;
     shared memory and XWidows system/Xlib user interface.
   + The most used language in the book is C, although there are some
     examples in C++.
   + [[https://www.amazon.com/Linux-Programming-Unleashed-Kurt-Wall/dp/0672320215][Amazon link to second edition]]

*** System Programming - Microsft Windows NT

  + Mark Russinovitch et al - *Windows Internals* - 5th edition -
    Microsft Press 2000. 
    + Coverage: Windows API, Virtual Memory, Kernel Mode X User Mode,
      Terminal, Object and Handles, Registry, Sysinternals Tools,
      Kernel System Components, System Calls, Windows Sockets
      (Winsock), NetBIOS, NTFS file system.
    + [[https://www.amazon.com/Windows-Internals-Part-Developer-Reference/dp/0735648735][Amazon Link]] (6th edition)


  + Charles Petzold - *Windows Programming* - Microsoft Press - 5th
    edition - 1998
    + Coverage: Win32 API, windows graphical stack, GDI (Graphics
      Device Interface), Dynamic Linked Libraries DLLs. 
    + [[https://www.amazon.com/Programming-Windows%25C2%25AE-Fifth-Developer-Reference/dp/157231995X][Amazon Link]]

  + Johnson M. Hart, *Win32 System Programming: A Windows® 2000* -
    *Application Developer's Guide*, 2nd Edition, Addison -
    Wesley, 2000.
    + Note: This book discusses select Windows programming problems
      and addresses  the problem of portable programming by comparing
      Windows and Unixapproaches.
    + [[https://www.amazon.com/Win32-System-Programming-Application-Developers/dp/0201703106][Amazon Link]]

  + Jeffrey Richter, *Programming Applications for Microsoft Windows*,
    4th Edition, Microsoft Press, September 1999.
    + Note: This book provides a comprehensive discussion of the
      Windows API suggested reading.

  + Visual Basic - *Programmer’s Guide to the Win32 API*, The
    Authoritative Solution by Dan Appleman

  + Don Box - *Essential COM* 1st edition - 1998 - Addison-Wesley
    Professional - ISBN 978-0201634464
    + Comprehensive coverage of COM - Component Object Model. 
    + [[https://www.amazon.com/Essential-COM-Don-Box/dp/0201634465][Amazon Link]]
** Interesting Source Codes 

 + *Libfuse* (C, not C++)
   * https://github.com/libfuse/libfuse
   * The reference implementation of the Linux FUSE (Filesystem in
     Userspace) interface.  

 + *CERN-Reflex* => SEAL Reflection System 
   + https://github.com/snoopspy/reflex/tree/master/src
   + What it can do:
     + Return type by name, by type info, invoke constructor of
       registered type.
     + Return type unique identifier.
   + Techniques Used:
     + Type erasure using C++ template technique and void* pointer.
   + Some Codes:
     + Reflection types database
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Type.h
       + https://github.com/snoopspy/reflex/blob/master/src/Kernel.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/Typedef.h
       + https://github.com/snoopspy/reflex/blob/master/src/Class.h
       + https://github.com/snoopspy/reflex/blob/master/src/Function.h
     + Property List => Properties get/set can be added to an object
       at runtime.
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/PropertyList.h
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyList.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PropertyListImpl.cxx
     + Object Interface
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Object.h
     + Any Container for type erasure derived from Boost.Variant 
       + https://github.com/snoopspy/reflex/blob/master/src/Any.cxx
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/Any.h
     + Shared library and Plugins - wrapper
       + https://github.com/snoopspy/reflex/blob/master/inc/Reflex/SharedLibrary.h
       + https://github.com/snoopspy/reflex/blob/master/src/PluginService.cxx
       + https://github.com/snoopspy/reflex/blob/master/src/PluginFactoryMap.cxx
     + Python Code Generator => Parses GCCXML to generate a C++ code
       with reflection dictionary metadata. 
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/genreflex.py
       + https://github.com/snoopspy/reflex/blob/master/python/genreflex/gendict.py
       + 

 + *GNU Scientific Library* (C-lib)
   + https://github.com/ampl/gsl 

   + Most Used C-features:
     + *static* keyword used for make functions private to the
       compilation unit they are defined, so they are not visible in
       the executable, static or shared library. It is important to
       avoid name clashing because C doesn't have namespaces and it
       also needs all names to be unique as this language doesn't have
       overloading like C++.  

     + *const double array[], size_t size* => For passing C-arrays
       allocated by the caller code.

     + _void* vstate_ - Void pointer (opaque pointer) for passing state
       around functions and hiding data representation. TL;DR. Emulate
       orientation.

     + _const void* vstate_  => The "object" cannot be modified by the
       function.

     + malloc, free => Heap memory allocation.

   + Some Codes:
     + Polynomial Evaluation 
       + https://github.com/ampl/gsl/blob/master/poly/gsl_poly.h
     + Root Solvers 
       + https://github.com/ampl/gsl/blob/master/roots/bisection.c
       + https://github.com/ampl/gsl/blob/master/roots/newton.c
       + https://github.com/ampl/gsl/blob/master/roots/gsl_roots.h
       + https://github.com/ampl/gsl/blob/master/roots/steffenson.c
       + https://github.com/ampl/gsl/blob/master/gsl_math.h
     + Interpolation
       + https://github.com/ampl/gsl/blob/master/interpolation/linear.c
       + https://github.com/ampl/gsl/blob/master/interpolation/spline.c
       + https://github.com/ampl/gsl/blob/master/interpolation/poly.c
     + Derivate:
       + https://github.com/ampl/gsl/blob/master/deriv/deriv.c
     + Probability Distributions:
       + Normal - https://github.com/ampl/gsl/blob/master/cdf/gauss.c
       + Normal Inverse - https://github.com/ampl/gsl/blob/master/cdf/gaussinv.c
       + LogNormal https://github.com/ampl/gsl/blob/master/cdf/lognormal.c
       + T-student - https://github.com/ampl/gsl/blob/master/cdf/tdist.c
       + 

 + *CERN-Root* (CERN's Interactive C++ Framework)
   + https://github.com/root-project/root
   + Features Used:
     + std:: math functions, std::log, std::exp, std::max, std::min, std::fabs
   + Some Codes:
     + https://github.com/root-project/root/blob/master/.clang-format
     + https://github.com/root-project/root/blob/master/math/mathcore/src/RichardsonDerivator.cxx
     + https://github.com/root-project/root/blob/master/math/mathcore/src/BrentMethods.cxx

 + *libspng* (C-lib)
   + https://gitlab.com/randy408/libspng
   + A simpler, modern libpng alternative
   + Some Codes:
     + [[https://gitlab.com/randy408/libspng/blob/master/CMakeLists.txt][CMakeLists.txt · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/common.c][common.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/decode.c][decode.c · master · Randy / libspng · GitLab]]
     + [[https://gitlab.com/randy408/libspng/blob/master/spng.h][spng.h · master · Randy / libspng · GitLab]]

 + *go-ole* (GO Language)
   + https://github.com/go-ole/go-ole
   + win32 ole implementation for golang
   + Some Codes:
     + https://github.com/go-ole/go-ole/blob/master/com.go
     + https://github.com/go-ole/go-ole/blob/master/guid.go
     + https://github.com/go-ole/go-ole/blob/master/idispatch.go
     + https://github.com/go-ole/go-ole/blob/master/variant.go

 + *Busybox* (C Code) - Embedded Linux Swiss Army Knife
   + https://git.busybox.net/busybox/tree/
   + Some Codes:
     + https://git.busybox.net/busybox/tree/console-tools/reset.c
     + https://git.busybox.net/busybox/tree/coreutils
     + https://git.busybox.net/busybox/tree/coreutils/nohup.c
     + https://git.busybox.net/busybox/tree/coreutils/ls.c
     + https://git.busybox.net/busybox/tree/coreutils/shred.c (Secure deleting)
     + https://git.busybox.net/busybox/tree/coreutils/tail.c
     + https://git.busybox.net/busybox/tree/networking/arp.c
     + https://git.busybox.net/busybox/tree/networking/ifconfig.c

 + *Android C-APIs* (C Code)
   + https://android.googlesource.com/platform/hardware/
   + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware
   + Some Codes:
     + [[https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/gps.h][include/hardware/gps.h - platform/hardware/libhardware - Git at Google]]
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/camera.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/nfc.h
     + https://android.googlesource.com/platform/hardware/libhardware/+/jb-mr0-release/include/hardware/sensors.h

 + *Terminion* - (Rust) Library for low level ANSI/vt100 terminal control.
   + https://github.com/redox-os/termion
   + Some Codes:
     + https://github.com/redox-os/termion/blob/master/src/color.rs
     + https://github.com/redox-os/termion/blob/master/examples/is_tty.rs
     + https://github.com/redox-os/termion/blob/master/src/clear.rs
     + https://github.com/redox-os/termion/blob/master/src/screen.rs
