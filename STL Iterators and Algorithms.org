#+INCLUDE: theme/style.org 
#+TITLE: CPP/C++ STL Iterators and Algorithms
#+DESCRIPTION: cpp/c++ stl standard template library algorithms and iterators
#+STARTUP: content 

 - [[wiki:index][Index]]

** STL Iterators and Algorithms 
*** Overview 

STL Algorithms are a collection of useful generic functions which
operates over iterators ranges of STL containers/collections for
performing many common tasks such as sorting, copying elements,
removing elements, computing sum of elements and so on. It is worth
knowing how to use iterators as they are already solve many common
tasks and problems and also avoids reiventing the wheel.

Notes: 

 + Function-object here means: function pointer, callable object which
   overloads the operator function-call _operator()(int x)_ or C++11
   lambda function. 

 + Many STL algorithsm works in similar way to higher order function
   of functional programming as they accept a function-object as
   argument.

 + STL Algorithms makes uses of iterators (generalization of pointers)
   and function-object argument or function arguments for short.

 + Benefits of STL Algorithms:
   + Allows declarative programming since they allow one to perform a task
     by declaring *what* to do instead of *how* to do. 
   + Provide a common vocabulary for C++ developers as iterators are
     standardized and widely known what can increase the code
     readability. 
   + Provide many blocks general building blocks for C++ what saves
     times and headaches.
   + Algorithms work with almost any STL container/collection/data
     structure and can also work with any custom collections which
     have iterators.

Iterator: 
 + Defintion: generalization of pointer - provides a standard
   interface for accessing elements of STL containers or any container
   supporting iterators without caring about the container
   implementation or the container internal data representation.

 + Types of iterators:

   + Input Iterator
     + Read-only and can be read only once.
     + istream_iterator(istream& is);
   + Output Iterator
     + Write-only
     + Example: ostream_iterator(ostream& os);
   + Forward Iterator
     + Gathering input + output iterators
     + Example: std::forward_list::iterator, std::unordered_map::iterator
   + Bidirectional Iterator
     + Like Forward Iterator, but also has operator--
     + Example: std::list::iterator
   + Random Access Iterator
     + Has overloaded operator[], pointer arithmetic
     + Example: pointer to C-array and vector or deque iterators.

Algorithms: 

 + _Functional_
   + std::for_each
     + Applies a function which performs side effects on every element
       of a collection. 
   + std::transform 

 + _Query_
   + std::count
     + Count the number of elements equal to a given value 
   + std::count_if
     + Count the number of elements matching a given predicate function.
   + std::equal(iter begin1, iter end1, inter begin2)
   + std::all_of(iter begin, iter end, PRED pred) -> bool
     + Returns true if all elements satisfies a predicate function
       PRED which type is std::function<bool (X)> where X is the type
       of container elements. Note: For an empty container always returns
       true. 
   + std::any_of(iter begin, iter end, PRED pred) -> bool
     + Returns true if at least one element of the container satifies
       a predicate. For an empty containers, always returns false. 
   + std::none_of(iter begin, iter end, PRED pred) -> bool
     + Returns true if no element of a container satifies a given
       predicate.
   + std::find
   + std::find_if 
   + std::ajdacent_find
   + std::binary_search

 + _Moving_
   + std::copy(iter begin1, iter end1, iter begin2)
     + Copy contents of container 1 to container 2. Note: it makes the
       assumption that the second container or output iterator has
       enough slots to accomodate the elements of container1.
   + std::move(iter begin1, iter end1, iter begin2)
   + std::swap(iter begin1, iter end1, iter begin2)
     + Swap two containers with same size.

 + _Value Modifiers_
   + std::fill(iter begin1, iter end1, value);
     + Fill a container with a given value.
   + std::generate(iter begin1, iter end1, fn)
     + Fill a container by calling the function fn of type (() => T)
       at every element. Note: T is the type of container elements.
   + std::replace(iter begin1, iter end, T value1, T value2)
     + Replace all elements equal to value1 by value2.

 + _Reordering_
   + std::sort(iter begin, iter end)
   + std::reverse(iter begin, iter end)
   + std::rotate
   + std::shuffle(iter begin, iter end, std::default_random_engine(seed) - Note (C++11)
   + std::random_shuffle(iter begin, iter end) [Deprecated]
   + std::next_permutation
   + std::prev_permutation 

 + _Numeric_ - header <numeric>
   + std::iota
   + std::transform 
   + std::accumulate(iter begin, iter end, intial value)
     + Computes the sum of elements in the container by calling the
       operator (+)
   + std::adjacent_difference
   + std::partial_sum
   + std::inner_product 


Further Reading:  

 + [[https://www.youtube.com/watch?v=eidEEmGLQcU][CppCon 2015: Michael VanLoon “STL Algorithms in Action ” - YouTube]]
 + [[https://adv-r.hadley.nz/rcpp.html][Advanced R]]
 + [[https://www.fluentcpp.com/getthemap/][The World Map of C++ STL Algorithms - Fluent C++]]
 + [[http://www.techiedelight.com/data-structures-and-algorithms-interview-questions-stl/][Data structures and algorithms problems in C++ using STL]]
 + [[https://www.bogotobogo.com/cplusplus/stl4_algorithms.php][C++ Tutorial: STL IV - Algorithms - 2018]]
 + [[https://www.codeproject.com/Articles/854127/Top-Beautiful-Cplusplus-std-Algorithms-Examples][Top 5 Beautiful C++ std Algorithms Examples - CodeProject]]
 + [[https://www.go4expert.com/articles/cpp-stl-iterators-t34695/][C++ STL Iterators | Go4Expert]]
 + [[http://anderberg.me/2016/07/04/c-custom-iterators/][C++ Custom Iterators - Tobias Anderberg]]
 + [[http://www.drdobbs.com/c-iterators/184403135][C++: Iterators | Dr Dobb's]]
 + [[https://www.cs.odu.edu/~zeil/cs361/f17/Public/iterators/index.html][Iterators: an ADT for Positions]]

Documentation: 

 + C++ STL 
   * [[https://en.cppreference.com/w/cpp/iterator/iterator][std::iterator - cppreference.com]]
   * [[https://en.cppreference.com/w/cpp/iterator/next][std::next - cppreference.com]]
   * [[https://en.cppreference.com/w/cpp/iterator/iterator_traits][std::iterator_traits - cppreference.com]]

 + Boost Library 
   * [[https://www.boost.org/doc/libs/1_66_0/libs/iterator/doc/index.html][The Boost.Iterator Library Boost - 1.66.0]]

*** Iterators 

An iterator is a generalization of pointers for decouple data
structures from algorithms and accessing data structures in a uniform
way regardless they implementation details and memory
layout. 

 *Random Access Iterator*

 Experimeting Iterators in ROOT REPL:

 + Create a vector object: 

#+BEGIN_SRC cpp 
  >> std::vector<int> xs{1, 2, 3, 4, 5, 6};
  >> xs
  (std::vector<int> &) { 1, 2, 3, 4, 5, 6 }
#+END_SRC

 + Create an interator to the beginning of the container (bject 'it')

#+BEGIN_SRC cpp 
  >> auto it = xs.begin();
  >> it
  (__gnu_cxx::__normal_iterator<int *, std::vector<int, std::allocator<int> > > &) @0x7fb750ce9028

  // Dereference iterator to get the pointed object:
  >> *it
  (int) 1
#+END_SRC

 + Manipulate iterator: 

#+BEGIN_SRC cpp 
  // Increment iterator 
  >> it++;

  >> *it
  (int) 2

  >> it++;

  >> *it
  (int) 3
  
  // Check whether 
  >> it == xs.end()
  it == xs.end()
  (bool) false

  >> it++;

  >> *(it++)
  (int) 4

  >> *(it++)
  (int) 5

  >> *(it++)
  (int) 6
  >> it == xs.end()
  (bool) true
  >> 
#+END_SRC

 + Decrement iterator:
   + A vector iterator is a random access iterator, so it can also be
     decremented. 

#+BEGIN_SRC cpp
  >> auto itb = xs.end()
  (__gnu_cxx::__normal_iterator<int *, std::vector<int, std::allocator<int> > > &) @0x7fb750ce9030

  >> itb--
  (__gnu_cxx::__normal_iterator) @0x3e32550
  >> *itb
  (int) 6

  >> itb--,*itb
  (int) 5
  >> itb--,*itb
  (int) 4
  >> itb--,*itb
  (int) 3
  >> itb--,*itb
  (int) 2
  >> itb--,*itb
  (int) 1

  // Stop iteration 
  >> itb == xs.begin()
  (bool) true
#+END_SRC

 *Iterators and deque data structure* 

Create iterator for deque data structure: 

#+BEGIN_SRC cpp 
  >> std::deque<char> ds{'a', 'b', 'c', 'd', 'e'};
  >> std::deque<char>::iterator itt = ds.begin();
  >> ds
  (std::deque<char> &) { 'a', 'b', 'c', 'd', 'e' }
#+END_SRC

Manipulate Iterator: 

#+BEGIN_SRC cpp 
  >> itt
  (std::deque<char, std::allocator<char> >::iterator &) @0x7fb750ce9088

  >> *itt
  (char) 'a'
  >> ++itt,*itt
  (char) 'b'
  >> ++itt,*itt
  (char) 'c'
  >> ++itt,*itt
  (char) 'd'
  >> ++itt,*itt
  (char) 'e'

  >> itt == ds.end()
  (bool) false

  >> ++itt
  (std::_Deque_iterator<char, char &, char *>::_Self &) @0x7fb750ce9088

  >> itt == ds.end()
  (bool) true
#+END_SRC

  *Loop over iterators* 

Version 1: Loop over iterator - defining iterator without auto syntax.

#+BEGIN_SRC cpp 
  >> auto xss = std::vector<std::string>{"generic", "programming", "C++", "low", "level", "high"};
  >> xss
  { "generic", "programming", "C++", "low", "level", "high" }
  >> 

  // ************* VERSION 1 **********************

  // Explicit notation 
  >> std::vector<std::string>::iterator xit = xss.begin();

  >> for(; xit != xss.end(); xit++) std::cout << " => " << *xit << "\n";
   => generic
   => programming
   => C++
   => low
   => level
   => high
  >> 
#+END_SRC

Or: 

#+BEGIN_SRC cpp
 for(std::vector<std::string>::iterator xit2 = xss.begin(); xit2 != xss.end(); xit2++) { 
   std::cout << " => " << *xit2 << "\n";
 }
 // Output: 
 => generic
 => programming
 => C++
 => low
 => level
 => high
#+END_SRC

Version 2: Loop over iterator - defining iterator with auto syntax.

#+BEGIN_SRC cpp 
  // ************* VERSION 2 **********************
  // C++11 amazing auto type deduction!
  >> auto ait = xss.begin();
  >> for(; ait != xss.end(); ait++) std::cout << " => " << *ait << "\n";
   => generic
   => programming
   => C++
   => low
   => level
   => high
  >> 
#+END_SRC

Or: 

#+BEGIN_SRC cpp 
  >> for(auto ait = xss.begin(); ait != xss.end(); ait++) std::cout << " => " << *ait << "\n";
   => generic
   => programming
   => C++
   => low
   => level
   => high
#+END_SRC

*** Algorithms 
**** for_each 

  - vector 

 #+BEGIN_SRC cpp 
   void dispSqrt(double x){
        std::cout << std::setw(10) << std::sqrt(x) << "\n";
   }

   >> std::vector<int> v{2, 4, 56, 10, 25, 60, 10, 50, -10};
   >> std::for_each(v.begin(), v.end(), [](double x){ std::cout << std::setw(10) << x << "\n";});
            2
            4
           56
           10
           25
           60
           10
           50
          -10

    >> std::for_each(v.begin(), v.end(), dispSqrt);
       1.41421
             2
       7.48331
       3.16228
             5
       7.74597
       3.16228
       7.07107
          -nan

    >> std::for_each(v.begin(), v.begin() + 4, dispSqrt);
       1.41421
             2
       7.48331
       3.16228
 #+END_SRC

  - deque 

 #+BEGIN_SRC cpp 
   >> std::deque<int> vx{2, 4, 56, 10, 25, 50};
   >> std::for_each(vx.begin(), vx.end(), [](double x){ std::cout << std::setw(10) << x << "\n";});
            2
            4
           56
           10
           25
           50

    >>  std::for_each(vx.begin(), vx.end(), dispSqrt);
       1.41421
             2
       7.48331
       3.16228
             5
       7.07107

    >>  std::for_each(vx.begin(), vx.begin() + 3, dispSqrt);
       1.41421
             2
       7.48331
 #+END_SRC

  - list

 #+BEGIN_SRC cpp 
 >> std::list<int> v{2, 4, 56, 10, 25, 60, 10};
 >>  std::for_each(v.begin(), v.end(), [](int x){ std::cout << std::setw(10) << x << "\n";});
          2
          4
         56
         10
         25
         60
         10
 #+END_SRC

  - map (aka dictionary, it's similar to hash table by usage (unordered_map in C++11 and higher), but uses different data structure inside: red-black tree (map) against hash table (unordered_map))

 #+BEGIN_SRC cpp 
   >> auto dataset = std::map<std::string, double> { {"x", 10.23}, {"z", -2.341}, {"k", sqrt(2)}};
   >> 
   std::cout << std::fixed << std::setprecision(3);
   std::for_each(dataset.begin(), dataset.end(),
                             [](const std::pair<std::string, double>& p){
                                     std::cout << std::setw(10) << p.first << std::setw(10) << p.second << "\n";
                             });
 #+END_SRC

 Output: 

 #+BEGIN_SRC text 
          k     1.414
          x    10.230
          z    -2.341
 #+END_SRC

**** for_each and function objects (functors)

 STL "algorithms" can also be used with  callable objects
 function-objects or functors:

  - vector + function-object (functor class)

 #+BEGIN_SRC cpp 
     /** Functor - Function Object 
      * Encapsulates a quadratic function. 
      */
     struct QuadFun{
        double a, b, c;	
        QuadFun(double a, double b, double c):
            a(a), b(b), c(c)
        {		
        }
        // Delegated constructor 
        QuadFun(): QuadFun(1.0, 1.0, 1.0)
        {		
        }
        double eval(double x){
           // a * x^2 + b * x + c 
           return a * x * x + b * x + c;
        }
        void operator()(double x){
           std::cout << std::setw(10) << x
                     << std::setw(10) << this->eval(x)
                     << "\n";
        }
     };

 #+END_SRC

 Example 1:

 #+BEGIN_SRC cpp 
    >> std::vector<int> v{2, 4, 56, 10, 25, 60, 10, 50, -10};
    >> std::for_each(v.begin(), v.end(), QuadFun())
             2         7
             4        21
            56      3193
            10       111
            25       651
            60      3661
            10       111
            50      2551
           -10        91
 #+END_SRC

 Example 2: 

 #+BEGIN_SRC cpp 
   >> auto q = QuadFun(2, 1, 5)
   (QuadFun &) @0x7f95a601c028
   >> q.a
   (double) 2.0000000
   >> q.b
   (double) 1.0000000
   >> q.c
   (double) 5.0000000
   >> 

   >> q(0)
            0         5
   >> q(1)
            1         8
   >> q(2)
            2        15

   >> q.eval(0)
   (double) 5.0000000
   >> q.eval(1)
   (double) 8.0000000
   >> q.eval(2)
   (double) 15.000000

   >> q.operator()(0)
            0         5
   >> q.operator()(1)
            1         8
   >> q.operator()(2)
            2        15
   >> q.operator()(3)
            3        26


   >> std::for_each(v.begin(), v.end(), q)
            2        15
            4        41
           56      6333
           10       215
           25      1280
           60      7265
           10       215
           50      5055
          -10       195

   >> q.a = 0
   (double) 0.0000000
   >> q.b = 0;
   >> q.c = 0;

   >> std::for_each(v.begin(), v.end(), q)
            2         0
            4         0
           56         0
           10         0
           25         0
           60         0
           10         0
           50         0
          -10         0
 #+END_SRC 

**** istream iterator 
***** File 

 #+BEGIN_SRC cpp 
   >> std::list<int> vy{2, 4, 56, 10, 25, 50};
   >> std::for_each(vy.begin(), vy.end(), [](double x){ std::cout << std::setw(10) << x << "\n";});
            2
            4
           56
           10
           25
           50
 #+END_SRC

  - file: 

 #+BEGIN_SRC cpp 
   auto file   = std::ifstream("/etc/hosts");
   auto b  = std::istream_iterator<std::string>(file);    
   auto e  = std::istream_iterator<std::string>(); 
   std::for_each(b, e, [](std::string word){ std::cout << word << "\n";});  

   >> auto file   = std::ifstream("/etc/hosts");
   >> auto b  = std::istream_iterator<std::string>(file);    
   >> auto e  = std::istream_iterator<std::string>(); 
   >> std::for_each(b, e, [](std::string word){ std::cout << word << "\n";});   
   127.0.0.1
   localhost
   localhost.localdomain
   localhost4
   localhost4.localdomain4
   ::1
   localhost
   localhost.localdomain
   localhost6
   localhost6.localdomain6
   >> 
 
 #+END_SRC
***** String

 #+BEGIN_SRC cpp 
   std::string price = "10.23 12.0 10.05 10.8 15.80 16.24";
   std::stringstream ss(price);
   std::istream_iterator<double> b(ss);
   std::istream_iterator<double> e;

   std::cout << std::fixed << std::setprecision(3);
   std::for_each(b, e, [](double x){ std::cout << std::setw(10) << x << "\n";})

   >> std::for_each(b, e, [](double x){ std::cout << std::setw(10) << x << "\n";})
       10.230
       12.000
       10.050
       10.800
       15.800
       16.240
 #+END_SRC

**** fill 

 Set or initialize all container elements with a given element.

  + Header: <algorithm>

 Usage:

 #+BEGIN_SRC cpp 
   std::fil(IteratorBegin, IteratorEnd, value);
 #+END_SRC

  - Vector 

 #+BEGIN_SRC cpp 
   >> std::vector<double> xs1(5);
   >> xs1
   (std::vector<double> &) { 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000 }
   >> 
   >> std::fill(xs1.begin(), xs1.end(), 3.5)
   >> xs1
   (std::vector<double> &) { 3.5000000, 3.5000000, 3.5000000, 3.5000000, 3.5000000 }
   >> 
   >> std::fill(xs1.begin(), xs1.begin() + 3, 4.0)
   >> xs1
   (std::vector<double> &) { 4.0000000, 4.0000000, 4.0000000, 3.5000000, 3.5000000 }
   >> 
 #+END_SRC

  - List 

 #+BEGIN_SRC cpp 
   >> std::list<double> xs2(5);
   >> xs2
   (std::list<double> &) { 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000 }
   >> std::fill(xs2.begin(), xs2.end(), 15.0)
   >> xs2
   (std::list<double> &) { 15.000000, 15.000000, 15.000000, 15.000000, 15.000000 }
   >> 
   >> 
 #+END_SRC
**** Copy iterator to output stream 

 #+BEGIN_SRC cpp 
  >> vector<double> p {3.0, 5.0, 5.0, -10.0};

  >> std::copy(p.begin(), p.end(), std::ostream_iterator<double>(std::cout, "\n"));
  3
  5
  5
  -10
 #+END_SRC
**** Copy 

 Copy elements from a range (iterator pair) to an output iterator.

  - Docs: [[https://en.cppreference.com/w/cpp/algorithm/copy][std::copy, std::copy_if - cppreference.com]]

 Example: copy vector to deque.

 #+BEGIN_SRC cpp 
   >> std::vector<int> xs{1, 2, 10, 20, 30, 50};

   >> std::deque<int> ds;
   >> 
   >> ds
   (std::deque<int> &) {}
   >> 

   >> std::copy(xs.begin(), xs.end(), std::back_inserter(ds));
   >> ds
   (std::deque<int> &) { 1, 2, 10, 20, 30, 50 }
   >> 

 #+END_SRC

  - Copy deque to stdout 

 #+BEGIN_SRC cpp 
   #include <iostream>
   #include <deque>
   #include <iterator> // ostream_iterator 
   #include <algorithm>

   auto xs = std::deque<int> {15, -2, 10, 20, 30, 5};
   auto oit = std::ostream_iterator<int>(std::cout, "\n ");
   std::copy(xs.begin(), xs.end(), oit);

   >> std::copy(xs.begin(), xs.end(), oit);
   15
    -2
    10
    20
    30
    5
   >> 
 #+END_SRC

  - Copy deque to string

 #+BEGIN_SRC cpp 
   #include <iostream>
   #include <deque>
   #include <iterator> // ostream_iterator 
   #include <algorithm>
   #include <string> 
   #include <sstream>  

   auto xs = std::deque<int> {15, -2, 10, 20, 30, 5};
   std::stringstream ss;
   auto oit = std::ostream_iterator<int>(ss, " ");
   std::copy(xs.begin(), xs.end(), oit);

   >> std::cout << ss.str() << "\n";
   15 -2 10 20 30 5 
   >> 
 #+END_SRC

  - Copy C-array to vector

 #+BEGIN_SRC cpp 
   >> auto v1 = std::vector<double>{}
   (std::vector<double, std::allocator<double> > &) {}

   >> auto v2 = std::vector<double>{}
   (std::vector<double, std::allocator<double> > &) {}

   >> double dataset[] = {-2.23, 10.94, 8.87, 4.56, 2.15}
   (double [5]) { -2.2300000, 10.940000, 8.8700000, 4.5600000, 2.1500000 }
   >> 

   >> std::copy(std::begin(dataset), std::end(dataset), std::back_inserter(v1))
   (std::back_insert_iterator<std::vector<double, std::allocator<double> > >) @0x250d860
   >> v1
   (std::vector<double, std::allocator<double> > &) { -2.2300000, 10.940000, 8.8700000, 4.5600000, 2.1500000 }
   >> 

   >> std::copy(dataset, dataset + 5, std::back_inserter(v2));
   >> v2
   (std::vector<double, std::allocator<double> > &) { -2.2300000, 10.940000, 8.8700000, 4.5600000, 2.1500000 }
   >> 

 #+END_SRC

**** Copy_if 

 Copy elements from a range (iterator pair) to an output iterator which
 matches some predicate (unary boolean function).

  + Docs: [[https://en.cppreference.com/w/cpp/algorithm/copy][std::copy, std::copy_if - cppreference.com]]

 Example 1: std::copy_if with lambda function 

 #+BEGIN_SRC cpp 
   #include <vector>
   #include <deque>
   #include <algorithm>

   auto xs = std::vector<int> {10, 2, 25, 90, 4, 50, 80, 120, 35, 67};
   auto out1 = std::deque<int>{};

   >> std::copy_if(xs.begin(), xs.end(), std::back_inserter(out1), 
        [](int x){ return x < 40; });

   >> out1
   { 10, 2, 25, 4, 35 }
   >> 

   >> out1.clear();
   >> out1
   {}
 #+END_SRC

 Example 2: std::copy_if with predefined function-objects and
 std::bind.

  + See: [[https://en.cppreference.com/w/cpp/header/functional][<functional>]] - contains lots of built-in function objects
    which can be comnbined with iterators and higher order functions.

 #+BEGIN_SRC cpp 
     #include <vector>
     #include <deque>
     #include <algorithm>
     #include <functional>

     // Import _1, _2, _2 for std::bind 
     using namespace std::placeholders;

     auto xs   = std::vector<int> {10, 2, 25, 90, 4, 50, 80, 120, 35, 67};
     auto out1 = std::deque<int>{};

   // Copy only elements < 40 
   >>  std::copy_if(xs.begin(), xs.end(), 
                   std::back_inserter(out1), 
                   std::bind(std::less<int>(),_1, 40));

   >> out1
    { 10, 2, 25, 4, 35 }
 #+END_SRC

**** Count 

 The algorithm count returns how many elements of a container are equal
 to a given value.

  - Vector: 

 #+BEGIN_SRC cpp 
   >> auto xs = std::vector<int> {1, 2, 3, 2, 2, 5, 9, 8, 10, 5, 9, 4, 2, 9, 1};
   >> 
   >> std::count(xs.begin(), xs.end(), 1)
   (long) 2
   >> std::count(xs.begin(), xs.end(), 2)
   (long) 4
   >> std::count(xs.begin(), xs.end(), 8)
   (long) 1
   >> std::count(xs.begin(), xs.end(), 100)
   (long) 0
   >> 
 #+END_SRC

  - C arrays

 #+BEGIN_SRC cpp 
   >> int arr [] = {1, 2, 3, 2, 2, 5, 9, 8, 10, 5, 9, 4, 2, 9, 1};

   // Number of array elements 
   >> int size = sizeof(arr) / sizeof(int)
   (int) 15

   >> std::count_if(arr, arr + size, [](int x){ return x == 100;})
   (long) 0
   >> std::count_if(arr, arr + size, [](int x){ return x == 2;})
   (long) 4
   >> std::count_if(arr, arr + size, [](int x){ return x == 8;})
   (long) 
 #+END_SRC

**** CountIf 

 Count how many elements satifies a given predicate.

 #+BEGIN_SRC cpp 
   >> std::count_if(xs.begin(), xs.end(), [](int x){ return x == 100;})
   (long) 0
   >> 
   >> std::count_if(xs.begin(), xs.end(), [](int x){ return x == 2;})
   (long) 4
   >> std::count_if(xs.begin(), xs.end(), [](int x){ return x == 100;})
   (long) 0
   >> 

   >> std::count_if(arr, arr + size, [](int x){ return x <= 5;})
   (long) 10
   >> 
 #+END_SRC
**** Equal 

 Check whether two sequences are equal, example: 

  + Docs: [[http://www.cplusplus.com/reference/algorithm/equal/][equal - C++ Reference]]

 #+BEGIN_SRC cpp 
    >> 
    >> std::vector<int> xs{1, 2, 3, 4, 5, 6};
    >> std::list<int> xslist{1, 2, 3, 4, 5, 6};
    >> 
    >> std::equal(xs.begin(), xs.end(), xslist.begin())
    (bool) true
    >> std::equal(xslist.begin(), xslist.end(), xs.begin())
    (bool) true
    >> xslist.push_front(7)
    >> xslist
    (std::list<int> &) { 7, 1, 2, 3, 4, 5, 6 }
    >> std::equal(xslist.begin(), xslist.end(), xs.begin())
    (bool) false
    >> std::equal(xs.begin(), xs.end(), xslist.begin())
    (bool) false
    >> 

 #+END_SRC

**** generator 

 Header: <algorithm>

  - <https://en.cppreference.com/w/cpp/algorithm/generate>

 #+BEGIN_SRC cpp 
   >> std::vector<int> xs(10);
   >> xs
   (std::vector<int> &) { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   >> std::generate(xs.begin(), xs.end(), [](){ return 5; })
   >> xs
   (std::vector<int> &) { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 }

   >> int x = 0;
   >> std::generate(xs.begin(), xs.end(), [&](){ x++  ; return x; })
   >> xs
   (std::vector<int> &) { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
   >> 

   >> int k = 1;
   >> std::generate(xs.begin(), xs.end(), [&](){ k++  ; return k * 3; })
   >> xs
   (std::vector<int> &) { 6, 9, 12, 15, 18, 21, 24, 27, 30, 33 }
   >> 

 #+END_SRC
**** reverse 

 Reverse a sequence. 
  - Header: <algorithm>
  - https://en.cppreference.com/w/cpp/algorithm/reverse

 STL List 

 #+BEGIN_SRC cpp 
   >> std::list<std::string> data = { "hello" , "world", "C++", "iterators", "assembly"};

   >> data
   (std::list<std::string> &) { "hello", "world", "C++", "iterators", "assembly" }
   >> std::reverse(data.begin(), data.end())

   >> data
   (std::list<std::string> &) { "assembly", "iterators", "C++", "world", "hello" }
   >> 
 #+END_SRC

 STL Vector 

 #+BEGIN_SRC cpp 
   >> std::vector<std::string> data2 = { "hello" , "world", "C++", "iterators", "assembly"};

   >> std::reverse(data2.begin(), data2.end())

   >> data2
   (std::vector<std::string> &) { "assembly", "iterators", "C++", "world", "hello" }
   >> 
 #+END_SRC

**** iota 

 Header: <numeric>

  - [[https://en.cppreference.com/w/cpp/algorithm/iota][std::iota - cppreference.com]]

 #+BEGIN_SRC cpp 
   >> std::iota(xsa.begin(), xsa.end(), 1)
   >> xsa
   (std::vector<int> &) { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
   >> std::iota(xsa.begin(), xsa.end(), 2)
   >> xsa
   (std::vector<int> &) { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
   >> std::iota(xsa.begin(), xsa.end(), 2)
   >> xsa
   (std::vector<int> &) { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
   >> std::iota(xsa.begin(), xsa.end(), 4)
   >> xsa
   (std::vector<int> &) { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
   >>     
 #+END_SRC
**** accumulate 

 This function works in a similar way to the fold-left operation common
 in functional programming languages.

  - header: <numeric>
  - https://en.cppreference.com/w/cpp/algorithm/accumulate

 #+BEGIN_SRC cpp 
   >> std::vector<int> xss{1, 2, 4, 5, 6, 7, 8, 9};
   >> xss
   (std::vector<int> &) { 1, 2, 4, 5, 6, 7, 8, 9 }
   >> 
   >> std::accumulate(xss.begin(), xss.end(), 0, [](int acc, int x){ return 10 * acc + x;})
   (int) 12456789
   >> 

   // Sum of all elements 
   >> std::accumulate(xss.begin(), xss.end(), 1, [](int acc, int x){ return acc + x;})
   (int) 43
   >> 

   // Product of all elements 
   >> std::accumulate(xss.begin(), xss.end(), 1, [](int acc, int x){ return acc * x;})
   (int) 120960
   >> 
 #+END_SRC
**** adjacent different 

  - header: <numeric>
  - https://en.cppreference.com/w/cpp/algorithm/adjacent_difference

 #+BEGIN_SRC cpp
   >> std::vector<int> v{2, 4, 56, 10, 25, 60};

   >> std::deque<int> d(v.size());

   >> std::adjacent_difference(v.begin(), v.end(), d.begin())
   (std::_Deque_iterator<int, int &, int *>) @0x3c84010

   >> d
   (std::deque<int> &) { 2, 2, 52, -46, 15, 35 }
   >> 
 #+END_SRC
**** max_element and min_element 

 Max element iterator -> Get the maximum element of an STL-like
 container/collection. 

 References:
  + [[https://en.cppreference.com/w/cpp/algorithm/max_element][std::max_element - cppreference.com]]
  + [[https://en.cppreference.com/w/cpp/algorithm/min_element][std::min_element - cppreference.com]]

 Usage: 
  - Note: T is the type of container elements.
 
 #+BEGIN_SRC text 
   max_element(iterator Begin, iterator End) -> iterator 
   max_element(iterator Begin, iterator End, Comparator comp) -> iterator 
 #+END_SRC

 Example: 

 #+BEGIN_SRC cpp 
   std::vector<double> xs = {-1.2, -50.0, 100.0, -4.2, 105, -200.423};

   auto it = std::max_element(xs.begin(), xs.end());

   >> *it
   (double) 105.00000
   >> 

   for(; it != xs.end(); it++){ std::cout << *it << "\n"; }

   >> for(; it != xs.end(); it++){ std::cout << *it << "\n"; }
   105
   -200.423
   >>

   // Find maximum element with custom comparator 
   auto it2 = std::max_element(xs.begin(), xs.end(),
                              [](double x, double y){ return std::abs(x) < std::abs(y);} )

   >> *it2
   (double) -200.42300
   >> 
   >>
   >> for(; it2 != xs.end(); it2++){ std::cout << *it2 << "\n"; }
   -200.423
   -200.423
   >> 

   >> xs.clear()
   >> xs
   (std::vector<double> &) {}
   >> 

   auto it3 = std::max_element(xs.begin(), xs.end(),
                              [](double x, double y){ return std::abs(x) < std::abs(y);});

   // If returns true, then no value is found. 
   >> it3 == xs.end()
   (bool) true

   >> it3 != xs.end()
   (bool) false
	
 #+END_SRC

