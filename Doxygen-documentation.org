#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - Doxygen - Documentation Generator 
#+DESCRIPTION: cpp c++ c doxygen documentation html generator 
#+STARTUP: content 

 - [[wiki:index][Index]]

* Doxygen Documentation Generator 
** Overview 

Doxygen is a tool that can generate project documentation in html, pdf
or Latex from code comments formatted with Doxygen markup syntax. The
generated documentation makes easier to navigate and understand the
code as it may contain all public functions, classes, namespaces,
enumerations, side notes and code examples.

 + Author: Dimitri Van Heesch (1997)
 + Official Web Site: http://www.doxygen.nl/
 + Projects using Doxygen:
   + http://www.doxygen.nl/projects.html

Supported Languages besides C++: 
 + C
 + C++
 + Fortran 
 + Objective-C
 + C#
 + PHP
 + Python
 + IDL (Corba, MIDL - Microsft Interface Definition Language)
 + VHDL
 + Tcl 
 + D-Language (Not full support)

Online Examples of Doxygen Documentation:

 * [[https://eigen.tuxfamily.org/dox/][Eigen3]] - Template-based library for Linear Algebra.

 * [[https://www.ogre3d.org/docs/api/1.9/][Ogre3D]] - Game Engine (Object-Oriented Graphics Rendering Engine)

 * [[http://gslwrap.sourceforge.net/index.html][GslWrapper]] - C++ wrapper class for the GNU Scientific Library

 * [[http://www.leidinger.net/FreeBSD/dox/kern/html/][FreeBSD Kernel Code]]

Other C++ Documentation Generators: 

 + [[http://www.sphinx-doc.org/en/master/][Sphinx]]
   + https://breathe.readthedocs.io/en/latest/
   + [[https://stackoverflow.com/questions/12933900/is-sphinx-already-suitable-for-c-documentation][Is Sphinx already suitable for C++ documentation?]]

 + [[https://en.wikipedia.org/wiki/ROBODoc][ROBODoc]] - [[https://rfsber.home.xs4all.nl/Robo/robodoc.html][Official Web Site]]

Other Documentation Generators:

 + [[https://en.wikipedia.org/wiki/Pydoc][Pydoc]] - Python standard documentation generator. 

 + [[https://en.wikipedia.org/wiki/Ddoc][Ddoc]] - Documentation Generator for D-language (Walter Bright)

See also: 
 + [[https://en.wikipedia.org/wiki/Comparison_of_documentation_generators][Comparison of Documentation Generator]] - Wikipedia
** Example 
*** Overview  

Files: [[https://gist.github.com/caiorss/b04df92734c93e300658285d0b76ed07][Gist with full Code]]

Getting the sample code: 

#+BEGIN_SRC sh 
  $ git clone https://gist.github.com/caiorss/b04df92734c93e300658285d0b76ed07 example-doxygen 
  Cloning into 'example-doxygen'...
  remote: Enumerating objects: 4, done.
  remote: Counting objects: 100% (4/4), done.
  remote: Compressing objects: 100% (4/4), done.
  remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
  Unpacking objects: 100% (4/4), done.
   
  $ cd example-doxygen  
  $ ls
  Doxyfile  mathutils.hpp
#+END_SRC

Generate html documentation: 

#+BEGIN_SRC sh 
  $ doxygen Doxyfile 

  Notice: Output directory `./docs' does not exist. I have created it for you.
  Searching for include files...
  Searching for example files...
  Searching for images...
  Searching for dot files...
  Searching for msc files...
  Searching for dia files...
  Searching for files to exclude
  Searching INPUT for files to process...
  Searching for files in directory /home/archbox/root-scripts/example-doxygen
  Reading and parsing tag files
  Parsing files
  Preprocessing /home/archbox/root-scripts/example-doxygen/mathutils.hpp...
  Parsing file /home/archbox/root-scripts/example-doxygen/mathutils.hpp...
  Building group list...

  ... ... ... ... 

  Generating file member index...
  Generating example index...
  finalizing index lists...
  writing tag file...
  lookup cache used 46/65536 hits=123 misses=47
  finished...
#+END_SRC

List generated documentation: 

#+BEGIN_SRC sh 
   $ ls
   docs/  Doxyfile  mathutils.hpp

   $ tree docs -L 2
   docs
   ├── html
   │   ├── annotated.html
   │   ├── bc_s.png
   │   ├── bdwn.png
   │   ├── classes.html
   │   ├── classMathUtils_1_1XYChart.html
   │   ├── classMathUtils_1_1XYChart-members.html
   │   ├── closed.png
   │   ├── doc.png
   │   ├── doxygen.css
     ... ... ... ... ... ... 
   │   ├── tab_a.png
   │   ├── tab_b.png
   │   ├── tab_h.png
   │   ├── tabs.css
   │   ├── tab_s.png
   │   └── todo.html
     ... ... ... ... ... ... 

   3 directories, 62 files
#+END_SRC

Open documentation in the browser: 

#+BEGIN_SRC sh 
  $ firefox docs/html/index.html 
#+END_SRC

If the project Doxyfile configuration file does not exist, a default
one can be generated with Doxygen:

#+BEGIN_SRC sh 
 $ doxygen -g  # Default output file "Doxyfile"
 $ doxygen -g  OutputFile.cof
#+END_SRC
*** Type Aliases  

 *Simple type alias:*

#+BEGIN_SRC cpp 
   /// Mathematical function of type double
   using MathFunc = std::function<double (double)>;
#+END_SRC

Output: 

#+CAPTION: Documentation of type alis MathFunc 
[[file:images/doxygen-alias-MathFunc.png][file:images/doxygen-alias-MathFunc.png]]


 *Templated type alias* 

#+BEGIN_SRC cpp 
    /// Generic math function
    /// @tparam T Any float-point type such as float, double or long double
    template<class T>
    using MathFuncGen = std::function<T (T)>;
#+END_SRC

#+CAPTION: Documentation of type alias MathFunGen 
[[file:images/doxygen-alias-MathFuncGen.png][file:images/doxygen-alias-MathFuncGen.png]]

*** Enumeration MathErrorCode 

Enumeration code (file: mathutils.hpp): 

#+BEGIN_SRC cpp 
     /// @brief Mathematical error code 
     enum class MathErrorCode: std::uint32_t {
          /// Bit 0 (value 0x00 or 0) not set => Means no error 
          E_OK          = 0x00,
          /// bit 0 (value 0x01 or 1) means that an error of any type happened
          E_ERROR       = 0x01,
          /// bit 1 (value 0x02 or 2) Overflow error 
          E_OVERFLOW    = 0x02,
          /// bit 2 (value 0x04 or 4) Undeflow error 
          E_UNDERFLOW   = 0x04,
          /// bit 3 (value 0x08 or 8) Not a number
          E_NAN         = 0x08,
          /// bit 4 (value 0x10 or 16) Root, series or algorithm result doesn't converge.
          E_CONVERGENCE = 0x10,
          /// bit 5  (value 0x20 or 16) Maximum iterations reached 
          E_MAX_ITER    = 0x20   
     };	
#+END_SRC

Output: 

#+CAPTION: Doxygen enumeration MathErrorCode - A
[[file:images/doxygen-enum-MathErrorCodeA.png][file:images/doxygen-enum-MathErrorCodeA.png]] 

#+CAPTION: Doxygen enumeration MathErrorCode - B
[[file:images/doxygen-enum-MathErrorCodeB.png][file:images/doxygen-enum-MathErrorCodeB.png]] 
*** Function NewtonSolver 

File: mathutils.hpp 

#+BEGIN_SRC cpp 
  /** @brief Contains non-linear equations solvers */
  namespace MathUtils::Solvers{
      // Note: Nested namespaces are only available in C++17.
      using namespace MathUtils::Base;

      /**
       ,*  @brief Solves non-linear equation with Newton method.
       ,*
       ,*  @details
       ,*   Solves a non-linear equation using the Newton method which uses the  
       ,*   function and its derivate function for finding a suitable approximation 
       ,*   to the equation root. 
       ,*
       ,*  @see   MathUtils::Base::MathFunc
       ,*  @see   https://en.wikipedia.org/wiki/Newton%27s_method
       ,*  @todo  Implement unit test with lots of test cases.
       ,* 
       ,*  @param fun  Non-linear function f(x)
       ,*  @param dfun Derivative of non-linear function df(x) = d/dx f(x)
       ,*  @param x0   Initial guess 
       ,*  @param eps  Tolerance for stopping criteria. 
       ,*  @return     Equation result object containing result and error code.
       ,*/
      MathResult
      NewtonSolver(MathFunc fun, MathFunc dfun, double x0, double eps);

     ... ... ...      ... ... ...      ... ... ...      ... ... ... 
#+END_SRC

Output: 

#+CAPTION: Documentation generated for function NewtonSolver
[[file:images/doxygen-function-solver1.png][file:images/doxygen-function-solver1.png]]
*** Templated Function GenericNewtonSolver 

File: mathutils.hpp 

#+BEGIN_SRC cpp 
  /** @brief Contains non-linear equations solvers */
  namespace MathUtils::Solvers{
     ... ....    ... ....    ... .... 

     ///  @brief Solves non-linear equation with Newton method.
     ///
     ///  @tparam T   Any float-point type such as float, double or long double
     ///  @param fun  Non-linear function f(x)
     ///  @param dfun Derivative of non-linear function df(x) = d/dx f(x)
     ///  @param x0   Initial guess 
     ///  @param eps  Tolerance for stopping criteria. 
     ///  @return     Equation result as a float point type T.
     ///
     ///  @details
     ///  Solves non-linear equation using Newton method. This function needs two
     ///  functions, the function to be solved @p fun and its derivate @p dfun
     /// 
     ///  @note     The function f(x) must be continues and differentiable.
     ///  @warning  Throws NonCoverge exception when the root is not found.
     /// 
     ///  @see NewtonSolver
     ///  @see https://en.wikipedia.org/wiki/Newton%27s_method  	
     ///
     ///  Example: 
     ///  @code 
     ///    // Solve f(x) = x^2 - 25.0 , df(x) = 2x around x0 = 10.0
     ///    auto fun = [](double x){ return x * x -  25.0 };
     ///    auto dfun = [](double x){ return 2 * x; }
     ///     
     ///    double root = GenericNewtonsolver(fun, dfun, 10.0, 0.001);
     ///    std::cout << "Root = " << root << std::endl;
     ///  @endcode
     ///	
    template<typename T>	
    auto GenericNewtonSolver(MathFuncGen<T> fun, MathFuncGen<T> dfun, T x0, T eps) -> T;

  } // --- End of Namespace  MathUtils::Solvers ----//
#+END_SRC

Output: 

#+CAPTION: Documentation of function GenericNewtonSolver - part 1
[[file:images/doxygen-fun-GenericNewtonSolver1.png][file:images/doxygen-fun-GenericNewtonSolver1.png]]  

#+CAPTION: Documentation of function GenericNewtonSolver - part 2
[[file:images/doxygen-fun-GenericNewtonSolver2.png][file:images/doxygen-fun-GenericNewtonSolver2.png]] 
*** C-Function daxpy 

#+BEGIN_SRC cpp 
   /**  @brief C++ implementation of Fotran BLAS daxypy       
        Computes the equation ys[i] <- xs[i] * alpha + beta     

        @note Function with C-linkage. 

        @param[in]      n      Array size. Size of xs and ys
        @param[in]      xs     Input  array xs
        @param[in, out] ys     Output array ys    
        @param[in]      alpha  Linear coefficient 
        @Return         Void 
     */
   extern "C"
   auto daxpy(size_t n, double const* xs, double* ys, double alpha, double beta) -> void;
#+END_SRC

Output: 

#+CAPTION: C-Function daxpy 
[[file:images/doxygen-fun-daxpy1.png][file:images/doxygen-fun-daxpy1.png]]


*** Class XYChart 

#+BEGIN_SRC cpp 
     /// @brief Class for plotting cuves, equations and differential equations.
     /// @author Ghost Author 
     class XYChart{
     public:
         /// @brief Construct plot object with a given dimension.
         ///
         /// @pre The chart size must not be negative. 
         ///
         /// @param width  Initial XYChart width
         /// @param height Initial XYChart length
         /// 
         XYChart(double width, double length);

         /// Class destructor 
         virtual ~XYChart() = default;

         /// @brief Clear chart
         /// @details Clear all drawings and plots in the chart area.
         virtual void clear();

         /// @brief Add curve x[i], y[i] to chart
         ///
         /// @pre  Precondition: the arrays x[] and y[] must have size n.
         /// @post There are no post conditions.
         /// 
         /// @param n  array size
         /// @param x  array of x-coordinates values 
         /// @param y  array of y-coordinates values 
         /// @return   Void
         ///
         /// @details
         /// Plot the curve compriseds of points P[i] = (X[i], Y[i]),
         /// where i = 0, 1, 2... n - 1.
         ///
         void addCurve(size_t n, const double x[], const double y[]);

         /// Copy constructor 
         XYChart(Plotter const&) = delete;
         /// Copy-assignment operator 
         XYChart& operator=(XYChart const&) = delete;
     private:
     };
#+END_SRC

Output: 

#+CAPTION: Documentation of class XYChart - part 1
[[file:images/doxygen-class-XYChart1.png][file:images/doxygen-class-XYChart1.png]] 

#+CAPTION: Documentation of class XYChart - part 2
[[file:images/doxygen-class-XYChart2.png][file:images/doxygen-class-XYChart2.png]]


 *Constructor* 

#+BEGIN_SRC cpp 
    /// @brief Construct plot object with a given dimension.
    ///
    /// @pre The chart size must not be negative. 
    ///
    /// @param width  Initial XYChart width
    /// @param height Initial XYChart length
    /// 
    XYChart(double width, double length);
#+END_SRC

Output: 

#+CAPTION: Documentation of class XYChart - Constructor - part 3
[[file:images/doxygen-class-XYChart3.png][file:images/doxygen-class-XYChart3.png]]


 *Method addCurve* 

#+BEGIN_SRC cpp 
    /// @brief Add curve x[i], y[i] to chart
    ///
    /// @pre  Precondition: the arrays x[] and y[] must have size n.
    /// @post There are no post conditions.
    /// 
    /// @param n  array size
    /// @param x  array of x-coordinates values 
    /// @param y  array of y-coordinates values 
    /// @return   Void
    ///
    /// @details
    /// Plot the curve compriseds of points P[i] = (X[i], Y[i]),
    /// where i = 0, 1, 2... n - 1.
    ///
    void addCurve(size_t n, const double x[], const double y[]);
#+END_SRC

#+CAPTION: Documentation of class XYChart - Member function addCurve - part 3
[[file:images/doxygen-class-XYChart4.png][file:images/doxygen-class-XYChart4.png]] 


