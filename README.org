#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - C++ Shrine
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 

* C++ - CPP 
** Pages in this document 

 *Core C++ - ISO/IEC 14882*

 + [[file:Understanding-CPP.org][Understanding C++]] (C++ in deep)
   + Exploring C++ basic and advanced concepts and also modern C++
     features with both small and reproducible C++ sample programs and
     interactive examples taken from the CERN's ROOT/Cling REPL tool.

 + [[file:CPP-template-metaprogramming.org][Template Metaprogramming]]
   + also known as generic programming.

 + [[file:cpp-design-patterns.org][Design Patterns]]
   + Object Oriented Design Patterns + Generic Programming Design
     Patterns + Functional Programming.

 + [[file:cpp-reference-card.org][C++ and STL reference card]]
   * Concise reference of C++ standard template library showing main
     methods, collections (aka containters) and type signatures.

 *Tooling* 

 + [[file:compiler-flags-options.org][Compiler flags and options]]
   + Reference card for C++ compiler options. GCC, Clang and
     MSVC(VC++) compilers.

 + [[file:building-systems.org][Building systems and build automation]]
   + Coverage C++ building systems such as CMake, GNU-Make and so on.

 + [[file:Cpp-C-Debuggers.org][C and C++ Debuggers Notes]]
   * Notes about C and C++ debuggers. Covered: GDB (GNU Debugger) and
     WinDBG (Windows Debugger). 

 + [[file:Root-cern-repl.org][CERN's Root C++ REPL and CLING]]
   + Notes about the CERN's interactive interpereter based on
     Clang/LLVM for C++ where the user can type and evaluate C++ code,
     load libraries like shared libraries, boost libraries and and
     also test C++ with immediate feedback. ROOT is invaluable tool
     for learn, practicing C++ and create demonstrations.

 *Misc*

 + [[file:WindowsAPI-cpp.org][Windows API Programming in C++]]
   * C++ system programming for Win32/Win64 API. Note: The Windows API
     is not part of the ISO C++ Standard and is exclusive to this
     operating system.

 + [[file:DLL-Binary-Components-SharedLibraries.org][Shared Libraries - DLL - Binary Components in C++]]
   * Creating binary components DLLs in C++ on Windows and Unix-like
     operating systems (Linux). 

 + [[file:Interfacing-C-APIs-and-libraries.org][Interfacing C APIs and libraries]]
   + Examples about how to interface and create wrappers to C APIs or
     libraries in modern C++ or C++ >= C++11 and use STL containers
     with C-APIs.

 + [[file:bookmarks.org][Bookmarks]]
   + Bookmarks, tools, online tools, conference videos and so on.

 + [[file:Videos-and-conferences.org][Videos and Conferences]]

 + [[file:resources-executable.org][Embed Resources into Executables]]

 + [[file:sample-modern-cpp-programs.org][Sample programs in modern C++ style]]
   + Complete small C++ programs and proof-of-concepts.


 *This Repository* 
 
 + https://github.com/caiorss/C-Cpp-Notes

 *This Site*

 + https://caiorss.github.io/C-Cpp-Notes/


Note: This document can also be viewed from Smart Phones, Tablets or
any other small screen devices.

** C++ Checklist

- [ ] - Create C++ shared library 
- [ ] - Create a C-interface and FFI-interface for a C++ shared
  library.
  - [ ] - Example - Haskell FFI.
  - [ ] - Example - Python FFI.
  - [ ] - Example - F# (.NET) FFI.
- [ ] - Some graphical programming with QT.
- [ ] - Interface low level Unix/Linux OS services.
- [ ] - Standard STL library
- [ ] - Vectors and numerical computing with STL.

