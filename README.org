#+TITLE: CPP / C++ Review
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 
#+AUTHOR: Caio Rodrigues 

* C++ - CPP 
** Pages in this document 

 + [[file:Understanding-CPP.org][Understanding C++]] - Exploration of C++ basic concepts and also
   modern C++ features.

 + [[file:cpp-reference-card.org][C++ and STL reference card]] - Concise reference of C++ standard
   template library showing main methods, collections (aka
   containters) and type signatures.

 + [[file:Root-cern-repl.org][CERN's Root C++ REPL and CLING]] - Notes about the CERN's interactive
   interpereter based on Clang/LLVM for C++ where the user can type
   and evaluate C++ code, load libraries like shared libraries, boost
   libraries and and also test C++ with immediate feedback. ROOT is
   invaluable tool for learn, practicing C++ and create demonstrations.

 + [[file:sample-modern-cpp-programs.org][Sample Modern C++ Programs]]

** C++ Language features

C++ Supported Paradigms: 

 + _Imperative / Procedural_ as C and Pascal

 + _Object Oriented_

 + _Functional Programmign_ since C++11 with the introduction type
   deduction (auto keyword) and lambda functions.

 + _Generic Programming_ - Template metaprogramming, a combination of
   statically typed duck-typing and lisp-like metaprogramming that
   allows efficient code generation at compile-time.

Other Features: 

 + Automatic memory management.
 + No garbage collector.
 + Low level access to system and operating system services or API in
   a similar way to C.

Domains where C++ is used: 

 + System Programming - It means, operating systems, device drivers,
   hardware interfacing, USB driver ...
 + Embedded Systems 
 + 3D game engines and AAA (triple-A) games.
 + High Performance Computing (HPC)
 + High perfomance numerical simulation.
 + High Perfomance reusable libraries and software components
 + Physics
 + High Energy Physics - See CERN 

** Big Picture

 + Operating System
   - Windows
   - Linux (Unix)
   - Mac OSX (unix)
   - BSD Family (Unix)

 + Executable Formats
   - Windows / .exe, *.dll files         (PE32)
   - Linux   / No extension, *.so files  (ELF)
   - MacOSX  / *.dylib                   (MachO)

 + Processor Architecture

   - Most used for personal computers (based on x86)
     - Intel x86     - 32 bits.
     - AMD/Inteal 64 - 64 bits.

   - Most used for embedded systems and mobile devices.
     - ARM (32 bits) - Widely used in Smartphones, PDAs, Tablets and
       so on.
     - Power PC

 + Graphical Stack - Outline of the most common graphical systems.

   + X11 - XServer / Unix (Linux, BSD, FreeBSD)

   + Windows API / Microsoft Windows OS

   + MacOSX ???


*Tooling*

 + Compilers

   + Windows C/C++ compiler

   + GCC - Gnu C/C++ Compiler (Stard Compiler of many Linux distributions)

   + LLVM/Clang

   + Proprietary compilers: Many manufacturers provide compilers for
     their processors, microcontrollers and embedded systems that
     generally have a different architecture than most people are used
     to.

 + Building Tools

   + GNU Make

   + Cmake

 + Main C/C++ GUI - Graphical User Interfaces Libraries

   + QT toolkit / C++ - Cross Platform. QT is the most supported cross
     platform toolkit, but it is hard to be called from languages
     other than C++ as it is written in C++ and this language doesn't
     have a standard ABI (Application Binary Interface).

   + GTK / C with C++ inteface - Cross platform, most common in Linux OS.

   + Cocoa / MacOSX - Not cross platform. It is only available to MacOSX.

   + Windows API. / Only available for Windows.

** Mind Map 

Shared Libraries / Software Components 

 - Interoperability

 - Binary Compatibility

 - C-library

   - [[http://www.etalabs.net/compare_libcs.html][Comparison of C/POSIX standard library implementations for Linux]]

 - Linking

   - Static Linking

   - Dynamic Linking

 - [[http://en.wikipedia.org/wiki/Dependency_hell][Dependency Hell]]

 - API - Application Programming Interface

 - ABI - [[https://en.wikipedia.org/wiki/Application_binary_interface][Application Binary Interface]]

   - Calling Conventions

   - [[https://en.wikipedia.org/wiki/System_call][System Call]]

   - Stable and Standard ABI - C Language

   - [[https://en.wikipedia.org/wiki/Loader_(computing)][Loader (computing)]]

   - [[https://en.wikipedia.org/wiki/Dynamic_linker][Dynamic linker]]

   - [[https://en.wikipedia.org/wiki/Binary-code_compatibility][Binary-code compatibility]]

 - FFI - Foreign Function Interface 

 - Excetuable Formats

   - [[https://en.wikipedia.org/wiki/Portable_Executable][PE]] - Portable Executable / Windows (*.exe files and *.dll files)

   - [[https://en.wikipedia.org/wiki/Executable_and_Linkable_Format][ELF]] - Executable and Linkable Format / Unix (Linux, BSD ...)

   - [[https://en.wikipedia.org/wiki/Mach-O][Mach-O]] -  Mach object file format / Mach-OSX and IOS

   - [[https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats][Comparison of executable file formats]]

   - 

** C++ Checklist

- [ ] - Create C++ shared library 

- [ ] - Create a C-interface and FFI-interface for a C++ shared
  library.

  - [ ] - Example - Haskell FFI.

  - [ ] - Example - Python FFI.

  - [ ] - Example - F# (.NET) FFI.

- [ ] - Some graphical programming with QT.

- [ ] - Interface low level Unix/Linux OS services.

- [ ] - Standard STL library

- [ ] - Vectors and numerical computing with STL.

** C++ Resources

*C++ General Resources*

 - Ian D. Chivers - *An Introduction to C++*
   <http://www.icsd.aegean.gr/lecturers/kavallieratou/Cplusplus_files/notes.pdf>

 - [[https://www.reddit.com/r/Physics/comments/2w4exo/what_are_the_useful_aspects_of_c_in_physics/][What are the useful aspects of C++ in Physics programming? : Physics]]

 - [[https://anteru.net/blog/2016/05/01/3249/][Designing C APIs in 2016 | Anteru’s blog]]

*C++ Numerical Methods and Scientific Computing*

 - Prof. R. Hiptmair, SAM, ETH Zurich. *Numerical Methods for
   Computational Science and Engineering* -
   <http://www.sam.math.ethz.ch/~hiptmair/tmp/NumCSE/NumCSE15.pdf>


 - Norbert Pozar. *Basic C++ for numerical computations: vectors*
   <http://polaris.s.kanazawa-u.ac.jp/~npozar/basic-cpp-for-numerics-vectors.html>


*C++ STL - Standard Template Library*


 - *A modest STL tutorial*
   <http://cs.brown.edu/~jak/proglang/cpp/stltut/tut.html>


 - Carlos Moreno. *C++ Vectors* <https://cal-linux.com/tutorials/vectors.html>


*C++ ABI - Application Binary Interface, Binary Compatibility and FFI*

 - By Agner Fog. *Calling conventions for different C++ compilers and
   operating systems*
   <http://www.agner.org/optimize/calling_conventions.pdf>


 - Armin Ronacher. *Beautiful Native Libraries*
   <http://lucumr.pocoo.org/2013/8/18/beautiful-native-libraries/>


 - Herb Sutter. *Defining a Portable C++ ABI* <https://isocpp.org/files/papers/n4028.pdf>

 - *Some thoughts on binary compatibility*
   <http://blog.qt.io/blog/2009/08/12/some-thoughts-on-binary-compatibility/>

 - *Interoperability of Libraries Created by Different Compiler
   Brands* <http://www.mingw.org/wiki/Interoperability_of_Libraries_Created_by_Different_Compiler_Brands>

 - Thiago Macieira. *Binary compatibility for library developers*
   <https://events.linuxfoundation.org/sites/events/files/slides/Binary_Compatibility_for_library_devs.pdf>

 - *What Language I Use for… Creating Reusable Libraries: Objective-C*
   <http://www.informit.com/articles/article.aspx?p=2144812>

 - *Compilable modern alternatives to C/C++* -
   <https://softwareengineering.stackexchange.com/questions/162614/compilable-modern-alternatives-to-c-c>

 - [[https://stackoverflow.com/questions/3217513/are-llvm-gcc-and-clang-binary-compatible-with-gcc-particularly-mingw-gcc-on-w][linker - Are llvm-gcc and clang binary compatible with gcc? - particularly mingw gcc on Windows - Stack Overflow]]

 - [[http://rlc.vlinder.ca/blog/2009/08/binary-compatibility/][Binary Compatibility | Making Life Easier]]

 - *System V Application Binary Interface AMD64 Architecture Processor
   Supplement* <https://c9x.me/compile/bib/abi-x64.pdf>

 - *Software optimization resources* - <http://www.agner.org/optimize/>

 - [[https://softwareengineering.stackexchange.com/questions/281882/why-does-c-provide-language-bindings-where-c-falls-short][Why does C provide language 'bindings' where C++ falls short? - Software Engineering Stack Exchange]]

 - [[https://news.ycombinator.com/item?id=2379676][I've written in C++ professionally almost 12 years (17 years counting College), ... | Hacker News]]

 - [[https://www.reddit.com/r/swift/comments/67z7dy/what_is_abi_stability_and_why_does_it_matter/][What is ABI stability and why does it matter? : swift]]

 - [[https://www.reddit.com/r/programming/comments/4r6r8e/abi_vs_api/][ABI vs. API : programming]]

 - [[https://www.reddit.com/r/linux_gaming/comments/5nqaux/confused_about_compatibility/dcdxd19/][heartsofwar comments on Confused about Compatibility]]

 - [[https://www.reddit.com/r/askscience/comments/3ei05n/why_is_that_programs_need_to_be_ported_between/][Why is that programs need to be ported between operating systems in order in to function? What goes on at the programming level to require this? : askscience]]

 - [[https://www.reddit.com/r/AskProgramming/comments/5c74i4/some_thoughts_about_abis/][some thoughts about ABIs : AskProgramming]]

 - [[http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html][Damien Katz: The Unreasonable Effectiveness of C]]

 - [[https://www.reddit.com/r/linux/comments/42vngw/why_is_the_linux_community_ambivalent_about/][Why is the Linux community ambivalent about binary compatibility? : linux]]

 - [[https://www.reddit.com/r/C_Programming/comments/4afu69/implementing_cross_platform_library_in_c_proscons/][Implementing cross platform library in C pros/cons C_Programming]]

 - 

 - 

*C-Interface* 

 - *CppCon 2014: Stefanus DuToit "Hourglass Interfaces for C++ APIs* -
   <https://www.youtube.com/watch?v=PVYdHDm0q6Y>


*FFI - Foreign Function Interface*

 - https://en.wikipedia.org/wiki/Foreign_function_interface

 - [[http://www.mono-project.com/docs/advanced/pinvoke/][Interop with Native Libraries | Mono]]

 - [[https://en.wikipedia.org/wiki/SWIG][SWIG - Wikipedia]] -  Simplified Wrapper and Interface Generator

 - [[https://sourceware.org/libffi/][libffi]] - A Portable Foreign Function Interface Library

 - [[https://en.wikipedia.org/wiki/Libffi][libffi - Wikipedia]]

 - [[https://docs.python.org/3/extending/extending.html][1. Extending Python with C or C++ — Python 3.6.1 documentation]]

 - [[https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx][Platform Invoke Tutorial (C#)]]

 - [[https://www.reddit.com/r/explainlikeimfive/comments/5c2yfq/eli5_how_can_a_single_software_project_use/][Eli5: How can a single software project use multiple languages? Wouldn't the compiler have difficulty understanding what's what? : explainlikeimfive]]

 - [[https://www.reddit.com/r/learnprogramming/comments/3dzif8/how_do_you_communicate_between_different_computer/][How do you communicate between different computer languages? : learnprogramming]]


*Courses and Online Books*

 - [[https://en.wikibooks.org/wiki/C%2B%2B_Programming][C++ Programming - Wikibooks, open books for an open world]]


 - Francois Fleuret. *C++ lecture notes*
   <https://www.idiap.ch/~fleuret/files/Francois_Fleuret_-_C++_Lecture_Notes.pdf>


 - Course:  https://www3.ntu.edu.sg/home/ehchua/programming/

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp0_Introduction.html][An Introduction to C++ Programming for First-time Programmers - C++ Programming Tutorial]] - https://archive.is/MRDZI

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_STL.html][C++ Libraries, String and Standard Template Library]] - https://archive.is/lrIDk

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp2_MoreBasics.html][C++ More Basics]] - https://archive.is/pr7pn

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp3_OOP.html][Object-oriented Programming (OOP) in C++]] - https://archive.is/lpXae

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp4_PointerReference.html][C++ Pointers and References]] - https://archive.is/Ja1xJ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp5_OOPExamples.html][Examples on Classes and Objects]] - https://archive.is/eZJPl

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp8_Template.html][Object-oriented Programming (OOP) in C++ - Template and Generic Programming]] - https://archive.is/eG0KZ

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp9_String.html][C++ Libraries, String and Standard Template Library]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp10_IO.html][C++ IO Streams and File Input/Output]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/cp11_TipsTraps.html][Examples on Classes and Objects]]

   - [[https://www3.ntu.edu.sg/home/ehchua/programming/cpp/DataStructureAlgorithm.html][Data Structure and Algorithm]]

*Unix - API / LibC*

 - *User space and the libc interface* - <https://www.win.tue.nl/~aeb/linux/lk/lk-3.html>


*Embedded Systems*

 - [[http://bitbashing.io/embedded-cpp.html][C++ On Embedded Systems]]

 - [[http://git.eti.pg.gda.pl/intel-grant/pliki/esp/ESP_Toolchain_ENG.pdf][Embedded Systems Programming OS Linux - Toolchain]]

 - 

*Alternatives to C++*

The C++ language is suitable for system programming, writing native
applications and writing high performance software components or
libraries. However the lack of standard ABI - Application Binary
interface makes calling C++ calling a C++ library through FFI -
Foreign Function Interface in another language harder.

Due to the C++ ABI issues, many portable libraries that are easier to
invoked through a FFI are written in C, for instance, GTK GUI toolkit,
... 

Selection Requirements: 

 - Compile to native code.

 - Have an stable and standard ABI - Application Binary Interface like C.

 - Be able to build shared libraries *.so or *.dll and easily invoked
   through FFI - Foreign Function Intefaces of high level languages
   such as Python, Ruby, Java, C# and so on.

 - Be memory safe in order to avoid buffer overflow. 


_D language_


   - [[http://bitbashing.io/2015/01/26/d-is-like-native-python.html][D is like native Python]]

   - [[http://code.dlang.org/packages/pyd][Package pyd version 0.9.9 - DUB - The D package registry]]

   - [[http://dlang.org/spec/abi.html][Application Binary Interface - D Programming Language]] 

   - [[https://dlang.org/dll-linux.html][Writing Shared Libraries With D On Linux - D Programming Language]]

   - [[http://blog.tenstral.net/2016/05/adventures-in-d-programming.html][Adventures in D programming | Ximions Blog]]

_Gambit Scheme_ 

A Scheme implementation that is interactive with a REPL and that can
generate C-code and invoke C-libraries. It can be compiled to
shared libraries *.so or *.dlls and be called from scheme REPL.

_Rust_

** Drawbacks and ABI Issues

*Drawbacks*

 + C++ is unsafe. Bugs like stack overflow, buffer overlow, null
   pointr exceptions may happen.

 + _Operating System Depedent_ - C++ may be portable, but it is not
   cross platform since it is compiled to machine code and for a
   particular operatiing system.

 + Hardware dependent (Processor Architecture) and Operating System
   Depedent. C++ is compied to machine code / binary code for a
   particular operating system and processor architecture with
   different executable formats. The most common processor
   architectures are Intel x86 (32 bits) and AMD64 (64 bits).

   + OS Windows            / Executable Format - PE-32

   + Unix (Linux, BSD ...) / Executable Format - ELF

   + Mac-OSX               / Executable Format - Mac-O

   +

 + _No Standard ABI (Application Binary Interface)_ - C++ shared
   libraries and programs compiled with different compilers or
   different versions of same compiler may be incompatible because
   unlinke C, C++ doesn't have a standard ABI. It makes hard to call
   libraries written in C+++ through an FFI - Foreign Function
   Interface form another programming language such as Python.


*ABI Issues* - Credits: *Defining a Portable C++ ABI* - https://isocpp.org/files/papers/n4028.pdf

_A C++ developer cannot compile C++ code and share the object file with_
_other C++ developers on the same platform and know that the result_
_will compile and link correctly_. Our status quo is that two source
files a.cpp and b.cpp can only be linked together if they are compiled
with both:" -- ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

 - "the same version of the same compiler, or another compiler with a
   compatibility mode" ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])

 - "compatible switch settings, since most C++ compilers offer
   incompatible switch settings where even compiling two files with
   the same version of the same compiler will not link successfully."
   ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



Issues:

 - "It makes sharing binary C++ libraries more difficult: _To ship a C++_
   _library in binary form for a given platform requires building it_
   _with possibly dozens of popular combinations of switch settings for_
   the popular compiler(s) on that platform, and then may not cover
   all combinations. Alternatively, one can wrap the library in that
   platform’s stable C ABI, which brings us to…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 - "_It is a valid reason to use C: This is (the) one area where C is_
   _superior to C++_. Among programs and programmers who would otherwise
   use C++, _the top reason to use C appears to be the inability to_
   _publish an API with a stable binary ABI_, including that it can be
   linked to from C, C++, and other languages’ foreign function
   interfaces (FFIs) such as Java JNI and .NET PInvoke. In
   particular…"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])



 - "_It therefore creates ongoing security problems: The fact that C is_
   _the only de facto ABI-stable lingua franca continues to encourage_
   _type- and memory-unsafe C APIs that traffick in things like error_
   prone pointer/length pairs instead of more strongly typed and still
   highly efficient abstractions, including but not limited to
   std::string or the new string_view"  ([[https://isocpp.org/files/papers/n4028.pdf][Herb Sutter]])


*Solutions to ABI compatibility issues*

 1) _Distribute the library in source format_. Approach adopted by QT
    (former Trolltech Inc, now the QT Company) with open source and
    commercial license.

 2) Distribute the library in binary format and only support a
    specific compiler.

 3) _Compile he C++ shared library with all possible compilers_ and
    distribute the binaries for each compiler, compiler version,
    processor architecture and operating system.

 4) _Write the library in C, instead of C++_. This approach is followed
    by most Unix/Linux libraries and OpenGL and Gtk GUI toolkit.

 5) Use some language that can compile/generate C-code (transpiler).

 6) Use Microsoft COM (Component Object Model)/ DCOM or CORBA, DBUS ... 



Note: C is until now the only language with a standard and public ABI
and most OS exposes its API through a C interface, programming
languages runtimes are generally implement in C.

** Guidelines

+ Malloc - Avoid malloc and manual memory management. Instead of that
  use _new_ and _vector_ instead of realloc.
+ Pointer - Avoid pointers.
+ Arrays - Use C++ STL vector classes instead of arrays.
+ Strings. Don't use array of characters to represent a string,
  instead of that use c++ strings by inclunding '#include <string>'
  header at the top of file.
+ Separate the operating system depedent code from the
  operating system agnostic code.

