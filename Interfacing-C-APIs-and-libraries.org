#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ Notes - Integration with C-APIs
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 

* Interfacing C APIs and libraries 
** Definitions 

 + *Nix* like: Any operating system based or inspiered on UNIX
   (Tradermark of Opengroup) such as Linux, Android, BSD, MacOX and so
   on. No operating system can call itself UNIX without the Opengroup
   certification.
   + See:
     + [[http://www.unix.org/trademark.html][UNIX Trademark]]
     + [[https://en.wikipedia.org/wiki/Unix][Unix - Wikipedia]]
     + [[https://www.cnet.com/news/apple-in-court-dispute-over-unix/][Apple in court dispute over Unix]]

** Example: Nix / getcwd and chdir 

 *getcwd* 

 + Brief: Get the current working directory.

 + Description: "These functions return a null-terminated string
   containing an absolute pathname that is the current working
   directory of the calling process.  The pathname is returned as the
   function result and via the argument buf, if present."
   + [[http://man7.org/linux/man-pages/man3/getcwd.3.html][(gecwd - Linux Manual)]]

#+BEGIN_SRC cpp 
  #include <unistd.h>
  char *getcwd(char *buf, size_t size);
#+END_SRC

 *chdir* 

 + Brief: Change the current working directory.
 + Description: On success returns zero and on failure returns -1 and
   set the flag *errno*. 

#+BEGIN_SRC cpp 
  #include <unistd.h>
  int chdir(const char *path);
#+END_SRC

Using those APIs in C: 

#+BEGIN_SRC cpp 
  #include <unistd.h>

  >> getcwd(NULL, 0)
  (char *) "/home/archbox"
  >>

  >> getcwd(nullptr, 0)
  (char *) "/home/archbox"
  >> 

  >> chdir("/var/log")
  (int) 0
  >> getcwd(NULL, 0)
  (char *) "/var/log"
  >> 
#+END_SRC

Using those functions with C++ string std::string. 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <string>

  #include <unistd.h>

  >> std::string dirpath = "/etc/";

  // Problem: Pass a std::string where const char* is expected 
  >> chdir(dirpath)
  ROOT_prompt_67:1:1: error: no matching function for call to 'chdir'
  chdir(dirpath)
  ^~~~~
  /usr/include/unistd.h:497:12: note: candidate function not viable: no known conversion from 'std::string'

  // Solution: 
  >> chdir(dirpath.c_str())
  (int) 0
  >>

  >> dirpath.c_str()
  (const char *) "/etc/"
  >> 

  >> getcwd(nullptr, 0)
  (char *) "/etc"

  >> std::string(getcwd(nullptr, 0))
  (std::string) "/etc"
  >> 
#+END_SRC

C++ Wrapper: 

#+BEGIN_SRC cpp 
  auto getCWD() -> std::string {
       return std::string(getcwd(nullptr, 0));
  }

  auto setCWD(const std::string& path) -> void {
       int status = ::chdir(path.c_str());
       if(status < 0)
           throw std::runtime_error("Failed to change directory.");
  }

  >> setCWD("/tmp")
  >> getCWD()
  (std::string) "/tmp"
  >> 

  >> setCWD("/tmp/dummy")
  Error in <TRint::HandleTermInput()>: std::runtime_error caught: Failed to change directory.
  >> 
#+END_SRC


References: 
 + [[http://man7.org/linux/man-pages/man3/getcwd.3.html][getcwd(3) - Linux manual page]]
 + [[https://linux.die.net/man/2/chdir][chdir(2): change working directory - Linux man page]]

** Example: Nix / gethostname (std::string)

Get the computer hostname. This function needs two arguments, an array
of chars, which is used for returning the hostname, and the size of
the array. If the array size is not enough for returning the hostname,
the function returns -1, otherwise it returns 0. The size of
hostname "string" is limited to ~HOST_NAME_MAX~.

#+BEGIN_SRC cpp 
   #include <unistd.h>
   int gethostname(char *name, size_t len);
#+END_SRC

Example: Using this function in *C* (Root REPL). 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <unistd.h>
  char hname[HOST_NAME_MAX];

  >> HOST_NAME_MAX
  (int) 64
  >> 

  >> hname
  (char [64]) "\0\0\0\0\0\0\0\0\0\0\0\0\0\...."

  >> gethostname(hname, HOST_NAME_MAX)
  (int) 0
  >> 

  >> hname
  (char [64]) "localhost.localdomain\0\0\0\..."

#+END_SRC

Example: Using gethostname with std::string 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <unistd.h>

  // Create a string with filled with '\0' null character of size HOST_NAME_MAX
  >> std::string shname(HOST_NAME_MAX, 0)
  (std::string &) "\0\0\0\0\0\0\0\0\0\0\0...."
  >> 

  >> shname.size()
  (unsigned long) 64


  >> gethostname(&shname[0], shname.size())
  (int) 0

  >> shname
  (std::string &) "localhost.localdomain\0\0\0\0\0\0\0\0\..."
  >> 

  >> std::cout << "Hostname = " << shname << "\n";
  Hostname = localhost.localdomain
  >> 

  // Remove trailing \0 characters 
  >> std::string x;
  >> std::getline(std::stringstream(shname), x, '\0')
  >> x
  (std::string &) "localhost.localdomain"
  >> 
#+END_SRC

Putting it all together in a C++ wrapper: 

#+BEGIN_SRC cpp 
    #include <iostream>
    #include <string>
    #include <sstream>
    #include <unistd.h>

    // C++ Wrapper or C++ interface 
    std::string getHostname(){
        std::string shname(HOST_NAME_MAX, 0);
        int status = gethostname(&shname[0], shname.size());
        if(status < 0)
                throw std::runtime_error("Error: failed to retrieve hostname.");
        std::string out;
        std::getline(std::stringstream(shname), out, '\0');	
        return out;
   }

   >> getHostname()
   (std::string) "localhost.localdomain"
   >> 
#+END_SRC

 *References:*

 + FreeBSD - [[https://www.freebsd.org/cgi/man.cgi?query=gethostname][gethostname]]
 + [[https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/gethostname.3.html][Mac OS X Manual Page For gethostname(3)]]
 + [[https://www.ibm.com/support/knowledgecenter/en/SSB23S_1.1.0.15/gtpc2/cpp_gethostname.html][IBM Knowledge Center - gethostname: Return host name]]
 + [[https://www.gnu.org/software/libc/manual/html_node/Host-Identification.html][Host Identification (The GNU C Library)]]
